{"ast":null,"code":"import redirect from \"./redirect\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nexport default async function isAuthenticated(context) {\n  const result = {};\n\n  try {\n    const {\n      getMyProfile\n    } = await context.apolloClient.query({\n      query: meQuery\n    });\n\n    if (getMyProfile) {\n      result[\"data\"] = getMyProfile;\n    }\n  } catch (error) {\n    try {\n      const {\n        message,\n        status\n      } = JSON.parse(error.message);\n\n      if (status === 401) {\n        alert(\"세션이 만료되었습니다. 로그인 화면으로 이동합니다.\");\n        redirect(context.ctx, \"/login\");\n      } else {\n        result[\"error\"] = message;\n      }\n    } catch {\n      result[\"error\"] = error.message;\n    }\n  } finally {\n    return result;\n  }\n}","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/lib/isAuthenticated.ts"],"names":["redirect","meQuery","isAuthenticated","context","result","getMyProfile","apolloClient","query","error","message","status","JSON","parse","alert","ctx"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AAOA,eAAe,eAAeC,eAAf,CAA+BC,OAA/B,EAA6D;AAC1E,QAAMC,MAAM,GAAG,EAAf;;AACA,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAmB,MAAMF,OAAO,CAACG,YAAR,CAAqBC,KAArB,CAA2B;AACxDA,MAAAA,KAAK,EAAEN;AADiD,KAA3B,CAA/B;;AAGA,QAAII,YAAJ,EAAkB;AAChBD,MAAAA,MAAM,CAAC,MAAD,CAAN,GAAiBC,YAAjB;AACD;AACF,GAPD,CAOE,OAAOG,KAAP,EAAc;AACd,QAAI;AACF,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAsBC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,OAAjB,CAA5B;;AACA,UAAIC,MAAM,KAAK,GAAf,EAAoB;AAClBG,QAAAA,KAAK,CAAC,8BAAD,CAAL;AACAb,QAAAA,QAAQ,CAACG,OAAO,CAACW,GAAT,EAAc,QAAd,CAAR;AACD,OAHD,MAGO;AACLV,QAAAA,MAAM,CAAC,OAAD,CAAN,GAAkBK,OAAlB;AACD;AACF,KARD,CAQE,MAAM;AACNL,MAAAA,MAAM,CAAC,OAAD,CAAN,GAAkBI,KAAK,CAACC,OAAxB;AACD;AACF,GAnBD,SAmBU;AACR,WAAOL,MAAP;AACD;AACF","sourcesContent":["import redirect from \"./redirect\";\nimport { meQuery } from \"../graphql/auth/query/me\";\n\ntype Props = {\n  data?: object;\n  error?: string;\n};\n\nexport default async function isAuthenticated(context: any): Promise<Props> {\n  const result = {};\n  try {\n    const { getMyProfile } = await context.apolloClient.query({\n      query: meQuery\n    });\n    if (getMyProfile) {\n      result[\"data\"] = getMyProfile;\n    }\n  } catch (error) {\n    try {\n      const { message, status } = JSON.parse(error.message);\n      if (status === 401) {\n        alert(\"세션이 만료되었습니다. 로그인 화면으로 이동합니다.\");\n        redirect(context.ctx, \"/login\");\n      } else {\n        result[\"error\"] = message;\n      }\n    } catch {\n      result[\"error\"] = error.message;\n    }\n  } finally {\n    return result;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}