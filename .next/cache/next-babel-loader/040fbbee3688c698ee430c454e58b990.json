{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nimport Layout from \"../components/common/Layout\";\nimport Section from \"../components/common/Section\";\nimport SearchUser from \"../components/search/SearchUserContainer\";\nimport SearchPost from \"../components/search/SearchPostContainer\";\n\nvar Search = function Search() {\n  var dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    ssr: false,\n    onCompleted: function onCompleted(_ref) {\n      var getMyProfile = _ref.getMyProfile;\n      var id = getMyProfile.id,\n          nickname = getMyProfile.nickname,\n          email = getMyProfile.email,\n          avatar = getMyProfile.avatar,\n          isMaster = getMyProfile.isMaster;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname: nickname,\n        email: email,\n        avatar: avatar,\n        isMaster: isMaster\n      });\n    }\n  });\n  return __jsx(Layout, {\n    title: \"\\uAC80\\uC0C9\\uACB0\\uACFC\"\n  }, __jsx(Section, null, __jsx(SearchUser, null), __jsx(SearchPost, null)));\n};\n\nSearch.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var query, keyword, _query$orderBy, orderBy, apolloClient;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref2.query;\n            keyword = query.keyword, _query$orderBy = query.orderBy, orderBy = _query$orderBy === void 0 ? \"createdAt_DESC\" : _query$orderBy;\n            apolloClient = initializeApollo();\n            _context.next = 5;\n            return apolloClient.query({\n              query: searchQuery,\n              variables: {\n                first: 10,\n                keyword: keyword,\n                orderBy: orderBy\n              }\n            });\n\n          case 5:\n            return _context.abrupt(\"return\", {\n              props: {\n                initialApolloState: apolloClient.cache.extract()\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}(); // export const getServerSideProps: GetServerSideProps = async ({ query }) => {\n//   const { keyword, orderBy = \"createdAt_DESC\" } = query;\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: searchQuery,\n//     variables: {\n//       first: 10,\n//       keyword,\n//       orderBy\n//     }\n//   });\n//   return {\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     }\n//   };\n// };\n\n\nexport default Search;","map":null,"metadata":{},"sourceType":"module"}