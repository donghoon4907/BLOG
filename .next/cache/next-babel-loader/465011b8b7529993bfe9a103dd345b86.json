{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport FeedPresenter from \"./FeedPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport { noticesQuery } from \"../../graphql/notice/query\";\nimport { useVssState, useVssDispatch, SHOW_NOTICE_MODAL } from \"../../context\";\n\nvar FeedContainer = function FeedContainer() {\n  _s();\n\n  var _useVssState = useVssState(),\n      isMaster = _useVssState.isMaster,\n      isShowNoticeModal = _useVssState.isShowNoticeModal,\n      isShowAddPostModal = _useVssState.isShowAddPostModal,\n      isShowLoginModal = _useVssState.isShowLoginModal;\n\n  var dispatch = useVssDispatch();\n  var recommandUserEl = useRef(null);\n\n  var _useQuery = useQuery(postsQuery, {\n    variables: {\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      posts = _useQuery.data,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var _useQuery2 = useQuery(noticesQuery, {\n    variables: {\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      notices = _useQuery2.data;\n\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var handleScrollFetchMore = function handleScrollFetchMore() {\n    if (loading) return;\n    var _document$documentEle = document.documentElement,\n        scrollHeight = _document$documentEle.scrollHeight,\n        clientHeight = _document$documentEle.clientHeight,\n        scrollTop = _document$documentEle.scrollTop;\n\n    if (posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  var handleAddNotice = useCallback(function () {\n    dispatch({\n      type: SHOW_NOTICE_MODAL,\n      action: \"add\",\n      actionText: \"등록\",\n      title: \"\",\n      description: \"\",\n      noticeId: \"\"\n    });\n  }, []);\n  useEffect(function () {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return function () {\n      return window.removeEventListener(\"scroll\", handleScrollFetchMore);\n    };\n  }, [posts && posts.getPosts, loading]);\n  return __jsx(FeedPresenter, {\n    loading: loading,\n    loadingMorePosts: loadingMorePosts,\n    posts: posts.getPosts,\n    notices: notices.getNotices,\n    isMaster: isMaster,\n    isShowNoticeModal: isShowNoticeModal,\n    isShowAddPostModal: isShowAddPostModal,\n    isShowLoginModal: isShowLoginModal,\n    onAddNotice: handleAddNotice,\n    recommandUserEl: recommandUserEl\n  });\n};\n\n_s(FeedContainer, \"e9fa3+3bUdPM0vybfU7dlqh9/7M=\", false, function () {\n  return [useVssState, useVssDispatch, useQuery, useQuery];\n});\n\n_c = FeedContainer;\nexport default FeedContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/feed/FeedContainer.tsx"],"names":["React","useCallback","useEffect","useRef","useQuery","NetworkStatus","FeedPresenter","postsQuery","noticesQuery","useVssState","useVssDispatch","SHOW_NOTICE_MODAL","FeedContainer","isMaster","isShowNoticeModal","isShowAddPostModal","isShowLoginModal","dispatch","recommandUserEl","variables","first","notifyOnNetworkStatusChange","posts","data","loading","fetchMore","networkStatus","notices","loadingMorePosts","handleScrollFetchMore","document","documentElement","scrollHeight","clientHeight","scrollTop","getPosts","length","skip","handleAddNotice","type","action","actionText","title","description","noticeId","window","addEventListener","removeEventListener","getNotices"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, FC } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport FeedPresenter from \"./FeedPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport { noticesQuery } from \"../../graphql/notice/query\";\nimport { useVssState, useVssDispatch, SHOW_NOTICE_MODAL } from \"../../context\";\n\nconst FeedContainer: FC = () => {\n  const {\n    isMaster,\n    isShowNoticeModal,\n    isShowAddPostModal,\n    isShowLoginModal\n  } = useVssState();\n  const dispatch = useVssDispatch();\n  const recommandUserEl = useRef(null);\n\n  const { data: posts, loading, fetchMore, networkStatus } = useQuery(\n    postsQuery,\n    {\n      variables: {\n        first: 10\n      },\n      notifyOnNetworkStatusChange: true\n    }\n  );\n\n  const { data: notices } = useQuery(noticesQuery, {\n    variables: {\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  });\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const handleAddNotice = useCallback(() => {\n    dispatch({\n      type: SHOW_NOTICE_MODAL,\n      action: \"add\",\n      actionText: \"등록\",\n      title: \"\",\n      description: \"\",\n      noticeId: \"\"\n    });\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [posts && posts.getPosts, loading]);\n\n  return (\n    <FeedPresenter\n      loading={loading}\n      loadingMorePosts={loadingMorePosts}\n      posts={posts.getPosts}\n      notices={notices.getNotices}\n      isMaster={isMaster}\n      isShowNoticeModal={isShowNoticeModal}\n      isShowAddPostModal={isShowAddPostModal}\n      isShowLoginModal={isShowLoginModal}\n      onAddNotice={handleAddNotice}\n      recommandUserEl={recommandUserEl}\n    />\n  );\n};\n\nexport default FeedContainer;\n"]},"metadata":{},"sourceType":"module"}