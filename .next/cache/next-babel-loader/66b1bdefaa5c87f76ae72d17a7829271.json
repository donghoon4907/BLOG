{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport Router from \"next/router\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport Loader from \"../common/Loader\";\n\nvar SearchPostContainer = function SearchPostContainer() {\n  var keyword = Router.query.keyword || \"\";\n  var orderBy = Router.query.orderBy || \"createdAt_DESC\";\n\n  var _useQuery = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      orderBy: orderBy,\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      posts = _useQuery.data,\n      loadPostLoading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore;\n\n  var handleSort = useCallback(function (nextOrderBy) {\n    Router.push(\"/search?keyword=\".concat(keyword, \"&orderBy=\").concat(nextOrderBy));\n  }, []);\n\n  var handleScrollFetchMore = function handleScrollFetchMore() {\n    if (loadPostLoading) return;\n    var _document$documentEle = document.documentElement,\n        scrollHeight = _document$documentEle.scrollHeight,\n        clientHeight = _document$documentEle.clientHeight,\n        scrollTop = _document$documentEle.scrollTop;\n\n    if (posts && posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            },\n            updateQuery: function updateQuery(prev, _ref) {\n              var fetchMoreResult = _ref.fetchMoreResult;\n              if (!fetchMoreResult) return prev;\n\n              if (fetchMoreResult.getPosts.length === 0) {\n                window.removeEventListener(\"scroll\", handleScrollFetchMore);\n              }\n\n              return Object.assign({}, prev, {\n                getPosts: [].concat(_toConsumableArray(prev.getPosts), _toConsumableArray(fetchMoreResult.getPosts))\n              });\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return function () {\n      return window.removeEventListener(\"scroll\", handleScrollFetchMore);\n    };\n  }, [posts && posts.getPosts, loadPostLoading]);\n\n  if (loadPostLoading && !posts) {\n    return __jsx(Loader, null);\n  }\n\n  return __jsx(SearchPostPresenter, {\n    posts: posts,\n    orderBy: orderBy,\n    onSort: handleSort\n  });\n};\n\nexport default SearchPostContainer;","map":null,"metadata":{},"sourceType":"module"}