{"ast":null,"code":"var __jsx = React.createElement;\nimport Router from \"next/router\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport Loader from \"../common/Loader\";\n\nconst SearchPostContainer = () => {\n  const keyword = Router.query.keyword || \"\";\n  const orderBy = Router.query.orderBy || \"createdAt_DESC\";\n  const {\n    data: posts,\n    loading: loadPostLoading,\n    fetchMore\n  } = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      orderBy,\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const handleSort = useCallback(nextOrderBy => {\n    Router.push(`/search?keyword=${keyword}&orderBy=${nextOrderBy}`);\n  }, []);\n\n  const handleScrollFetchMore = () => {\n    if (loadPostLoading) return;\n    const {\n      scrollHeight,\n      clientHeight,\n      scrollTop\n    } = document.documentElement;\n\n    if (posts && posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            },\n            updateQuery: (prev, {\n              fetchMoreResult\n            }) => {\n              if (!fetchMoreResult) return prev;\n\n              if (fetchMoreResult.getPosts.length === 0) {\n                window.removeEventListener(\"scroll\", handleScrollFetchMore);\n              }\n\n              return Object.assign({}, prev, {\n                getPosts: [...prev.getPosts, ...fetchMoreResult.getPosts]\n              });\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [posts && posts.getPosts, loadPostLoading]);\n\n  if (loadPostLoading && !posts) {\n    return __jsx(Loader, null);\n  }\n\n  return __jsx(SearchPostPresenter, {\n    posts: posts,\n    orderBy: orderBy,\n    onSort: handleSort\n  });\n};\n\nexport default SearchPostContainer;","map":null,"metadata":{},"sourceType":"module"}