{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\nimport { useVssDispatch, SET_LOGIN_MODAL } from \"../../context\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\n\nvar SignInContainer = function SignInContainer() {\n  _s();\n\n  var dispatch = useVssDispatch();\n\n  var _useLazyQuery = useLazyQuery(meQuery),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n      me = _useLazyQuery2[0];\n\n  var _useMutation = useMutation(logInMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      login = _useMutation2[0],\n      loading = _useMutation2[1].loading;\n\n  var email = useInput(\"\");\n  var pwd = useInput(\"\");\n  var handleSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _yield$login, logIn, _ref2, getMyProfile, _JSON$parse, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n\n              if (!loading) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", alert(\"요청 중입니다. 잠시만 기다려주세요.\"));\n\n            case 3:\n              _context.prev = 3;\n              _context.next = 6;\n              return login({\n                variables: {\n                  email: email.value,\n                  pwd: pwd.value\n                }\n              });\n\n            case 6:\n              _yield$login = _context.sent;\n              logIn = _yield$login.data.logIn;\n\n              if (!logIn) {\n                _context.next = 16;\n                break;\n              }\n\n              setAccessToken(logIn);\n              dispatch({\n                type: SET_LOGIN_MODAL,\n                payload: false\n              });\n              _context.next = 13;\n              return me();\n\n            case 13:\n              _ref2 = _context.sent;\n              getMyProfile = _ref2.data.getMyProfile;\n\n              if (getMyProfile) {}\n\n            case 16:\n              _context.next = 22;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](3);\n              _JSON$parse = JSON.parse(_context.t0.message), message = _JSON$parse.message;\n              alert(message);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 18]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [email.value, pwd.value, loading]);\n  return __jsx(SignInPresenter, {\n    loading: loading,\n    email: email,\n    pwd: pwd,\n    onSubmit: handleSubmit\n  });\n};\n\n_s(SignInContainer, \"7NSVR8ooNn/j4dM0tI5kaUTNY+g=\", false, function () {\n  return [useVssDispatch, useLazyQuery, useMutation, useInput, useInput];\n});\n\n_c = SignInContainer;\nexport default SignInContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignInContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/auth/SignInContainer.tsx"],"names":["React","useCallback","useMutation","useLazyQuery","useInput","logInMutation","SignInPresenter","setAccessToken","useVssDispatch","SET_LOGIN_MODAL","meQuery","SignInContainer","dispatch","me","login","loading","email","pwd","handleSubmit","e","preventDefault","alert","variables","value","logIn","data","type","payload","getMyProfile","JSON","parse","message"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAkD,OAAlD;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAwD,eAAxD;AACA,SAASC,OAAT,QAAwB,6BAAxB;;AAEA,IAAMC,eAAmB,GAAG,SAAtBA,eAAsB,GAAM;AAAA;;AAChC,MAAMC,QAAQ,GAAGJ,cAAc,EAA/B;;AADgC,sBAEnBL,YAAY,CAACO,OAAD,CAFO;AAAA;AAAA,MAEzBG,EAFyB;;AAAA,qBAGHX,WAAW,CAACG,aAAD,CAHR;AAAA;AAAA,MAGzBS,KAHyB;AAAA,MAGhBC,OAHgB,oBAGhBA,OAHgB;;AAKhC,MAAMC,KAAK,GAAGZ,QAAQ,CAAC,EAAD,CAAtB;AACA,MAAMa,GAAG,GAAGb,QAAQ,CAAC,EAAD,CAApB;AAEA,MAAMc,YAAY,GAAGjB,WAAW;AAAA,wEAC9B,iBAAOkB,CAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEA,cAAAA,CAAC,CAACC,cAAF;;AADF,mBAEML,OAFN;AAAA;AAAA;AAAA;;AAAA,+CAGWM,KAAK,CAAC,sBAAD,CAHhB;;AAAA;AAAA;AAAA;AAAA,qBAQcP,KAAK,CAAC;AACdQ,gBAAAA,SAAS,EAAE;AAAEN,kBAAAA,KAAK,EAAEA,KAAK,CAACO,KAAf;AAAsBN,kBAAAA,GAAG,EAAEA,GAAG,CAACM;AAA/B;AADG,eAAD,CARnB;;AAAA;AAAA;AAOcC,cAAAA,KAPd,gBAOMC,IAPN,CAOcD,KAPd;;AAAA,mBAWQA,KAXR;AAAA;AAAA;AAAA;;AAYMjB,cAAAA,cAAc,CAACiB,KAAD,CAAd;AACAZ,cAAAA,QAAQ,CAAC;AACPc,gBAAAA,IAAI,EAAEjB,eADC;AAEPkB,gBAAAA,OAAO,EAAE;AAFF,eAAD,CAAR;AAbN;AAAA,qBAmBiBd,EAAE,EAnBnB;;AAAA;AAAA;AAkBgBe,cAAAA,YAlBhB,SAkBQH,IAlBR,CAkBgBG,YAlBhB;;AAoBM,kBAAIA,YAAJ,EAAkB,CACjB;;AArBP;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4BAwBwBC,IAAI,CAACC,KAAL,CAAW,YAAMC,OAAjB,CAxBxB,EAwBYA,OAxBZ,eAwBYA,OAxBZ;AAyBIV,cAAAA,KAAK,CAACU,OAAD,CAAL;;AAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD8B;;AAAA;AAAA;AAAA;AAAA,OA6B9B,CAACf,KAAK,CAACO,KAAP,EAAcN,GAAG,CAACM,KAAlB,EAAyBR,OAAzB,CA7B8B,CAAhC;AAgCA,SACE,MAAC,eAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,GAAG,EAAEC,GAHP;AAIE,IAAA,QAAQ,EAAEC;AAJZ,IADF;AAQD,CAhDD;;GAAMP,e;UACaH,c,EACJL,Y,EACgBD,W,EAEfE,Q,EACFA,Q;;;KANRO,e;AAkDN,eAAeA,eAAf","sourcesContent":["import React, { useCallback, FormEvent, FC } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\nimport { useVssDispatch, SET_LOGIN_MODAL, SET_ME } from \"../../context\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\n\nconst SignInContainer: FC = () => {\n  const dispatch = useVssDispatch();\n  const [me] = useLazyQuery(meQuery);\n  const [login, { loading }] = useMutation(logInMutation);\n\n  const email = useInput(\"\");\n  const pwd = useInput(\"\");\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (loading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n      try {\n        const {\n          data: { logIn }\n        } = await login({\n          variables: { email: email.value, pwd: pwd.value }\n        });\n        if (logIn) {\n          setAccessToken(logIn);\n          dispatch({\n            type: SET_LOGIN_MODAL,\n            payload: false\n          });\n          const {\n            data: { getMyProfile }\n          } = (await me()) as any;\n          if (getMyProfile) {\n          }\n        }\n      } catch (error) {\n        const { message } = JSON.parse(error.message);\n        alert(message);\n      }\n    },\n    [email.value, pwd.value, loading]\n  );\n\n  return (\n    <SignInPresenter\n      loading={loading}\n      email={email}\n      pwd={pwd}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SignInContainer;\n"]},"metadata":{},"sourceType":"module"}