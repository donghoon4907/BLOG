{"ast":null,"code":"var __jsx = React.createElement;\nimport Router from \"next/router\";\nimport React, { useCallback } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\n\nconst SignInContainer = () => {\n  const [login, {\n    loading\n  }] = useMutation(logInMutation);\n  const email = useInput(\"\");\n  const pwd = useInput(\"\");\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n    if (loading) return;\n\n    try {\n      await login({\n        variables: {\n          email: email.value,\n          pwd: pwd.value\n        },\n        update: (_, {\n          data\n        }) => {\n          if (data && data.logIn) {\n            setAccessToken(data.logIn);\n            Router.push(\"/\");\n          }\n        }\n      });\n    } catch (error) {\n      const {\n        message\n      } = JSON.parse(error.message);\n      alert(message);\n    }\n  }, [email.value, pwd.value, loading]);\n  return __jsx(SignInPresenter, {\n    loading: loading,\n    email: email,\n    pwd: pwd,\n    onSubmit: handleSubmit\n  });\n};\n\nexport default SignInContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/auth/SignInContainer.tsx"],"names":["Router","React","useCallback","useMutation","useInput","logInMutation","SignInPresenter","setAccessToken","SignInContainer","login","loading","email","pwd","handleSubmit","e","preventDefault","variables","value","update","_","data","logIn","push","error","message","JSON","parse","alert"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,QAAkD,OAAlD;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,cAAT,QAA+B,iBAA/B;;AAEA,MAAMC,eAAmB,GAAG,MAAM;AAChC,QAAM,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAuBP,WAAW,CAACE,aAAD,CAAxC;AACA,QAAMM,KAAK,GAAGP,QAAQ,CAAC,EAAD,CAAtB;AACA,QAAMQ,GAAG,GAAGR,QAAQ,CAAC,EAAD,CAApB;AAEA,QAAMS,YAAY,GAAGX,WAAW,CAC9B,MAAOY,CAAP,IAAyC;AACvCA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIL,OAAJ,EAAa;;AACb,QAAI;AACF,YAAMD,KAAK,CAAC;AACVO,QAAAA,SAAS,EAAE;AAAEL,UAAAA,KAAK,EAAEA,KAAK,CAACM,KAAf;AAAsBL,UAAAA,GAAG,EAAEA,GAAG,CAACK;AAA/B,SADD;AAEVC,QAAAA,MAAM,EAAE,CAACC,CAAD,EAAI;AAAEC,UAAAA;AAAF,SAAJ,KAAiB;AACvB,cAAIA,IAAI,IAAIA,IAAI,CAACC,KAAjB,EAAwB;AACtBd,YAAAA,cAAc,CAACa,IAAI,CAACC,KAAN,CAAd;AACArB,YAAAA,MAAM,CAACsB,IAAP,CAAY,GAAZ;AACD;AACF;AAPS,OAAD,CAAX;AASD,KAVD,CAUE,OAAOC,KAAP,EAAc;AACd,YAAM;AAAEC,QAAAA;AAAF,UAAcC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACC,OAAjB,CAApB;AACAG,MAAAA,KAAK,CAACH,OAAD,CAAL;AACD;AACF,GAlB6B,EAmB9B,CAACb,KAAK,CAACM,KAAP,EAAcL,GAAG,CAACK,KAAlB,EAAyBP,OAAzB,CAnB8B,CAAhC;AAsBA,SACE,MAAC,eAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,GAAG,EAAEC,GAHP;AAIE,IAAA,QAAQ,EAAEC;AAJZ,IADF;AAQD,CAnCD;;AAqCA,eAAeL,eAAf","sourcesContent":["import Router from \"next/router\";\nimport React, { useCallback, FormEvent, FC } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\n\nconst SignInContainer: FC = () => {\n  const [login, { loading }] = useMutation(logInMutation);\n  const email = useInput(\"\");\n  const pwd = useInput(\"\");\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (loading) return;\n      try {\n        await login({\n          variables: { email: email.value, pwd: pwd.value },\n          update: (_, { data }) => {\n            if (data && data.logIn) {\n              setAccessToken(data.logIn);\n              Router.push(\"/\");\n            }\n          }\n        });\n      } catch (error) {\n        const { message } = JSON.parse(error.message);\n        alert(message);\n      }\n    },\n    [email.value, pwd.value, loading]\n  );\n\n  return (\n    <SignInPresenter\n      loading={loading}\n      email={email}\n      pwd={pwd}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SignInContainer;\n"]},"metadata":{},"sourceType":"module"}