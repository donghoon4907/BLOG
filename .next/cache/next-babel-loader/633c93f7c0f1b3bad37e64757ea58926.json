{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\n\nconst SetNoticeContainer = ({\n  title,\n  description,\n  action,\n  actionText,\n  noticeId,\n  isMaster\n}) => {\n  const dispatch = useVssDispatch();\n  const {\n    loading,\n    call\n  } = useLazyAxios();\n  const modalTitle = useInput(title);\n  const modalDescription = useInput(description);\n  const {\n    0: mdDescription,\n    1: setMdDescription\n  } = useState(\"\");\n  const {\n    0: preview,\n    1: setPreview\n  } = useState(\"\");\n  const {\n    0: modalAction,\n    1: setModalAction\n  } = useState({\n    code: action,\n    modalTitle: actionText\n  }); // readonly, modifiable, modify, add\n\n  const [add, {\n    loading: addNoticeLoading\n  }] = useMutation(addNoticeMutation);\n  const [update, {\n    loading: updateNoticeLoading\n  }] = useMutation(updateNoticeMutation);\n  const [remove, {\n    loading: removeNoticeLoading\n  }] = useMutation(removeNoticeMutation);\n\n  const convertTextIntoMd = async text => {\n    if (!text) return alert(\"내용을 입력하세요.\");\n    const {\n      data,\n      error\n    } = await call({\n      method: \"post\",\n      url: process.env.MDAPI_PATH,\n      data: {\n        text,\n        mode: \"gfm\",\n        context: \"github/gollum\"\n      }\n    });\n\n    if (data) {\n      const doc = new DOMParser().parseFromString(data, \"text/html\");\n      return doc.body.innerHTML;\n    } else if (error) {\n      return null;\n    }\n  };\n\n  const handlePreView = useCallback(async () => {\n    if (loading || !modalDescription.value) return;\n\n    try {\n      const md = await convertTextIntoMd(modalDescription.value);\n\n      if (md) {\n        setPreview(md);\n      }\n    } catch {\n      alert(\"미리보기 로드에 실패했습니다.\");\n    }\n  }, [modalDescription.value]);\n  const handleRefreshPreview = useCallback(() => {\n    setPreview(\"\");\n  }, []);\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: false\n    });\n  }, []);\n  const handleShowEdit = useCallback(() => {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n  const handleDelete = useCallback(async () => {\n    if (removeNoticeLoading) return alert(\"요청 중입니다.\");\n    const {\n      data: {\n        deleteNotice\n      }\n    } = await remove({\n      variables: {\n        noticeId\n      }\n    });\n\n    if (deleteNotice) {\n      alert(\"공지사항이 삭제되었습니다.\");\n      window.location.reload();\n    }\n  }, [removeNoticeLoading]);\n  const handleSubmit = useCallback(async () => {\n    if (!modalTitle.value) {\n      return alert(\"제목을 입력하세요.\");\n    }\n\n    if (!modalDescription.value) {\n      return alert(\"내용을 입력하세요.\");\n    }\n\n    if (modalAction.code === \"add\") {\n      if (addNoticeLoading) return alert(\"요청 중입니다.\");\n      const {\n        data: {\n          addNotice\n        }\n      } = await add({\n        variables: {\n          title: modalTitle.value,\n          description: modalDescription.value\n        }\n      });\n\n      if (addNotice) {\n        alert(\"공지사항이 등록되었습니다.\");\n        window.location.reload();\n      }\n    } else if (modalAction.code === \"modify\") {\n      if (updateNoticeLoading) return alert(\"요청 중입니다.\");\n      const {\n        data: {\n          updateNotice\n        }\n      } = await update({\n        variables: {\n          title: modalTitle.value,\n          description: modalDescription.value,\n          noticeId\n        }\n      });\n\n      if (updateNotice) {\n        alert(\"공지사항이 수정되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [modalAction.code, modalTitle.value, modalDescription.value, addNoticeLoading, updateNoticeLoading]);\n  useEffect(() => {\n    async function loadDescription(value) {\n      const md = await convertTextIntoMd(value);\n\n      if (md) {\n        setMdDescription(md);\n      }\n    }\n\n    if (description) {\n      loadDescription(description);\n    }\n  }, []);\n  return __jsx(SetNoticePresenter, {\n    loading: loading,\n    action: modalAction,\n    isMaster: isMaster,\n    title: modalTitle,\n    description: modalDescription,\n    mdDescription: mdDescription,\n    preview: preview,\n    onShowEdit: handleShowEdit,\n    onPreview: handlePreView,\n    onRefreshPreview: handleRefreshPreview,\n    onClose: handleClose,\n    onDelete: handleDelete,\n    onSubmit: handleSubmit\n  });\n};\n\nexport default SetNoticeContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetNoticeContainer.tsx"],"names":["React","useCallback","useState","useEffect","useMutation","addNoticeMutation","updateNoticeMutation","removeNoticeMutation","SetNoticePresenter","useInput","useLazyAxios","useVssDispatch","SET_NOTICE_MODAL","SetNoticeContainer","title","description","action","actionText","noticeId","isMaster","dispatch","loading","call","modalTitle","modalDescription","mdDescription","setMdDescription","preview","setPreview","modalAction","setModalAction","code","add","addNoticeLoading","update","updateNoticeLoading","remove","removeNoticeLoading","convertTextIntoMd","text","alert","data","error","method","url","process","env","MDAPI_PATH","mode","context","doc","DOMParser","parseFromString","body","innerHTML","handlePreView","value","md","handleRefreshPreview","handleClose","type","payload","handleShowEdit","handleDelete","deleteNotice","variables","window","location","reload","handleSubmit","addNotice","updateNotice","loadDescription"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, FC } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\n\ntype Props = {\n  title: string;\n  description: string;\n  action: string;\n  actionText: string;\n  noticeId: string;\n  isMaster: boolean;\n};\n\nconst SetNoticeContainer: FC<Props> = ({\n  title,\n  description,\n  action,\n  actionText,\n  noticeId,\n  isMaster\n}) => {\n  const dispatch = useVssDispatch();\n  const { loading, call } = useLazyAxios();\n  const modalTitle = useInput(title);\n  const modalDescription = useInput(description);\n  const [mdDescription, setMdDescription] = useState(\"\");\n  const [preview, setPreview] = useState(\"\");\n  const [modalAction, setModalAction] = useState({\n    code: action,\n    modalTitle: actionText\n  }); // readonly, modifiable, modify, add\n\n  const [add, { loading: addNoticeLoading }] = useMutation(addNoticeMutation);\n\n  const [update, { loading: updateNoticeLoading }] = useMutation(\n    updateNoticeMutation\n  );\n\n  const [remove, { loading: removeNoticeLoading }] = useMutation(\n    removeNoticeMutation\n  );\n\n  const convertTextIntoMd = async text => {\n    if (!text) return alert(\"내용을 입력하세요.\");\n\n    const { data, error } = await call({\n      method: \"post\",\n      url: process.env.MDAPI_PATH,\n      data: {\n        text,\n        mode: \"gfm\",\n        context: \"github/gollum\"\n      }\n    });\n    if (data) {\n      const doc = new DOMParser().parseFromString(data, \"text/html\");\n      return doc.body.innerHTML;\n    } else if (error) {\n      return null;\n    }\n  };\n\n  const handlePreView = useCallback(async () => {\n    if (loading || !modalDescription.value) return;\n\n    try {\n      const md = await convertTextIntoMd(modalDescription.value);\n\n      if (md) {\n        setPreview(md);\n      }\n    } catch {\n      alert(\"미리보기 로드에 실패했습니다.\");\n    }\n  }, [modalDescription.value]);\n\n  const handleRefreshPreview = useCallback(() => {\n    setPreview(\"\");\n  }, []);\n\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: false\n    });\n  }, []);\n\n  const handleShowEdit = useCallback(() => {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n\n  const handleDelete = useCallback(async () => {\n    if (removeNoticeLoading) return alert(\"요청 중입니다.\");\n\n    const {\n      data: { deleteNotice }\n    } = await remove({\n      variables: {\n        noticeId\n      }\n    });\n    if (deleteNotice) {\n      alert(\"공지사항이 삭제되었습니다.\");\n      window.location.reload();\n    }\n  }, [removeNoticeLoading]);\n\n  const handleSubmit = useCallback(async () => {\n    if (!modalTitle.value) {\n      return alert(\"제목을 입력하세요.\");\n    }\n\n    if (!modalDescription.value) {\n      return alert(\"내용을 입력하세요.\");\n    }\n\n    if (modalAction.code === \"add\") {\n      if (addNoticeLoading) return alert(\"요청 중입니다.\");\n\n      const {\n        data: { addNotice }\n      } = await add({\n        variables: {\n          title: modalTitle.value,\n          description: modalDescription.value\n        }\n      });\n      if (addNotice) {\n        alert(\"공지사항이 등록되었습니다.\");\n        window.location.reload();\n      }\n    } else if (modalAction.code === \"modify\") {\n      if (updateNoticeLoading) return alert(\"요청 중입니다.\");\n\n      const {\n        data: { updateNotice }\n      } = await update({\n        variables: {\n          title: modalTitle.value,\n          description: modalDescription.value,\n          noticeId\n        }\n      });\n      if (updateNotice) {\n        alert(\"공지사항이 수정되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [\n    modalAction.code,\n    modalTitle.value,\n    modalDescription.value,\n    addNoticeLoading,\n    updateNoticeLoading\n  ]);\n\n  useEffect(() => {\n    async function loadDescription(value) {\n      const md = await convertTextIntoMd(value);\n      if (md) {\n        setMdDescription(md);\n      }\n    }\n    if (description) {\n      loadDescription(description);\n    }\n  }, []);\n\n  return (\n    <SetNoticePresenter\n      loading={loading}\n      action={modalAction}\n      isMaster={isMaster}\n      title={modalTitle}\n      description={modalDescription}\n      mdDescription={mdDescription}\n      preview={preview}\n      onShowEdit={handleShowEdit}\n      onPreview={handlePreView}\n      onRefreshPreview={handleRefreshPreview}\n      onClose={handleClose}\n      onDelete={handleDelete}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SetNoticeContainer;\n"]},"metadata":{},"sourceType":"module"}