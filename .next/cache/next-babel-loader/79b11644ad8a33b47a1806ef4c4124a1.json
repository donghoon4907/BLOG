{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport Router from \"next/router\";\nimport { useMutation } from \"@apollo/client\";\nimport PostPresenter from \"./PostPresenter\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport { likeMutation } from \"../../graphql/post/mutation/like\";\n\nconst PostContainer = () => {\n  const {\n    id,\n    title,\n    description,\n    createdAt,\n    user,\n    video,\n    isLiked,\n    likeCount,\n    isMyPost,\n    status,\n    room\n  } = props;\n  const {\n    0: ctrlIsLiked,\n    1: setCtrlIsLiked\n  } = useState(isLiked);\n  const {\n    0: ctrlLikeCount,\n    1: setCtrlLikeCount\n  } = useState(likeCount);\n  const [like, {\n    loading: likeLoading\n  }] = useMutation(likeMutation);\n  const [remove, {\n    loading: removeLoading\n  }] = useMutation(removePostMutation); // 포스트 채팅방 접근 이벤트\n\n  const handleRoom = useCallback(() => {\n    Router.push(`/room/${room.id}`);\n  }, []); // 좋아요 / 좋아요 취소 이벤트\n\n  const handleLike = useCallback(async () => {\n    if (likeLoading) return;\n    const {\n      data: {\n        likePost\n      }\n    } = await like({\n      variables: {\n        postId: id\n      }\n    });\n\n    if (likePost) {\n      if (ctrlIsLiked) {\n        setCtrlIsLiked(false);\n        setCtrlLikeCount(ctrlLikeCount - 1);\n      } else {\n        setCtrlIsLiked(true);\n        setCtrlLikeCount(ctrlLikeCount + 1);\n      }\n    }\n  }, [ctrlIsLiked, ctrlLikeCount, likeLoading]); // 삭제 이벤트\n\n  const handleDelete = useCallback(async () => {\n    if (removeLoading) return;\n\n    if (confirm(\"해당 포스트를 삭제하시겠습니까?\")) {\n      const {\n        data: {\n          deletePost\n        }\n      } = await remove({\n        variables: {\n          postId: id\n        }\n      });\n\n      if (deletePost) {\n        alert(\"해당 포스트가 삭제되었습니다.\");\n        window.location.reload();\n      } else {\n        alert(\"포스트 삭제 중 오류가 발생했습니다.\");\n      }\n    }\n  }, [removeLoading]);\n  return __jsx(PostPresenter, {\n    id: id,\n    title: title,\n    description: description,\n    status: status,\n    createdAt: createdAt,\n    user: user,\n    video: video,\n    isLiked: ctrlIsLiked,\n    likeCount: ctrlLikeCount,\n    isMyPost: isMyPost,\n    onClickLike: handleLike,\n    onClickRoom: handleRoom,\n    onClickDelete: handleDelete\n  });\n};\n\nexport default PostContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/post/PostContainer.tsx"],"names":["React","useState","useCallback","Router","useMutation","PostPresenter","removePostMutation","likeMutation","PostContainer","id","title","description","createdAt","user","video","isLiked","likeCount","isMyPost","status","room","props","ctrlIsLiked","setCtrlIsLiked","ctrlLikeCount","setCtrlLikeCount","like","loading","likeLoading","remove","removeLoading","handleRoom","push","handleLike","data","likePost","variables","postId","handleDelete","confirm","deletePost","alert","window","location","reload"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, FC } from \"react\";\nimport Router from \"next/router\";\nimport { useMutation } from \"@apollo/client\";\nimport PostPresenter from \"./PostPresenter\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport { likeMutation } from \"../../graphql/post/mutation/like\";\n\nexport type Props = {\n  id: string;\n  title: string;\n  description: string;\n  video: any;\n  user: any;\n  likes: any;\n  createdAt: string;\n  updatedAt: string;\n  status: any;\n  isLiked: boolean;\n  likeCount: number;\n  isMyPost: boolean;\n  room: any;\n};\n\nconst PostContainer: FC<Props> = () => {\n  const {\n    id,\n    title,\n    description,\n    createdAt,\n    user,\n    video,\n    isLiked,\n    likeCount,\n    isMyPost,\n    status,\n    room\n  } = props;\n  const [ctrlIsLiked, setCtrlIsLiked] = useState(isLiked);\n  const [ctrlLikeCount, setCtrlLikeCount] = useState(likeCount);\n\n  const [like, { loading: likeLoading }] = useMutation(likeMutation);\n  const [remove, { loading: removeLoading }] = useMutation(removePostMutation);\n\n  // 포스트 채팅방 접근 이벤트\n  const handleRoom = useCallback(() => {\n    Router.push(`/room/${room.id}`);\n  }, []);\n\n  // 좋아요 / 좋아요 취소 이벤트\n  const handleLike = useCallback(async () => {\n    if (likeLoading) return;\n\n    const {\n      data: { likePost }\n    } = await like({\n      variables: { postId: id }\n    });\n\n    if (likePost) {\n      if (ctrlIsLiked) {\n        setCtrlIsLiked(false);\n        setCtrlLikeCount(ctrlLikeCount - 1);\n      } else {\n        setCtrlIsLiked(true);\n        setCtrlLikeCount(ctrlLikeCount + 1);\n      }\n    }\n  }, [ctrlIsLiked, ctrlLikeCount, likeLoading]);\n\n  // 삭제 이벤트\n  const handleDelete = useCallback(async () => {\n    if (removeLoading) return;\n    if (confirm(\"해당 포스트를 삭제하시겠습니까?\")) {\n      const {\n        data: { deletePost }\n      } = await remove({\n        variables: { postId: id }\n      });\n\n      if (deletePost) {\n        alert(\"해당 포스트가 삭제되었습니다.\");\n        window.location.reload();\n      } else {\n        alert(\"포스트 삭제 중 오류가 발생했습니다.\");\n      }\n    }\n  }, [removeLoading]);\n\n  return (\n    <PostPresenter\n      id={id}\n      title={title}\n      description={description}\n      status={status}\n      createdAt={createdAt}\n      user={user}\n      video={video}\n      isLiked={ctrlIsLiked}\n      likeCount={ctrlLikeCount}\n      isMyPost={isMyPost}\n      onClickLike={handleLike}\n      onClickRoom={handleRoom}\n      onClickDelete={handleDelete}\n    />\n  );\n};\n\nexport default PostContainer;\n"]},"metadata":{},"sourceType":"module"}