{"ast":null,"code":"var __jsx = React.createElement;\nimport Router from \"next/router\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport Loader from \"../common/Loader\";\n\nconst SearchPostContainer = () => {\n  const keyword = Router.query.keyword || \"\";\n  const orderBy = Router.query.orderBy || \"createdAt_DESC\";\n  const {\n    data: posts,\n    loading: loadPostLoading,\n    fetchMore\n  } = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      orderBy,\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const handleSort = useCallback(nextOrderBy => {\n    Router.push(`/search?keyword=${keyword}&orderBy=${nextOrderBy}`);\n  }, []);\n\n  const handleScrollFetchMore = () => {\n    if (loadPostLoading) return;\n    const {\n      scrollHeight,\n      clientHeight,\n      scrollTop\n    } = document.documentElement;\n\n    if (posts && posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            },\n            updateQuery: (prev, {\n              fetchMoreResult\n            }) => {\n              if (!fetchMoreResult) return prev;\n\n              if (fetchMoreResult.getPosts.length === 0) {\n                window.removeEventListener(\"scroll\", handleScrollFetchMore);\n              }\n\n              return Object.assign({}, prev, {\n                getPosts: [...prev.getPosts, ...fetchMoreResult.getPosts]\n              });\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [posts && posts.getPosts, loadPostLoading]);\n\n  if (loadPostLoading && !posts) {\n    return __jsx(Loader, null);\n  }\n\n  return __jsx(SearchPostPresenter, {\n    posts: posts,\n    orderBy: orderBy,\n    onSort: handleSort\n  });\n};\n\nexport default SearchPostContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/search/SearchPostContainer.tsx"],"names":["Router","React","useCallback","useEffect","useQuery","SearchPostPresenter","postsQuery","Loader","SearchPostContainer","keyword","query","orderBy","data","posts","loading","loadPostLoading","fetchMore","variables","searchKeyword","decodeURIComponent","first","notifyOnNetworkStatusChange","handleSort","nextOrderBy","push","handleScrollFetchMore","scrollHeight","clientHeight","scrollTop","document","documentElement","getPosts","length","skip","updateQuery","prev","fetchMoreResult","window","removeEventListener","Object","assign","addEventListener"],"mappings":"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","sourcesContent":["import Router from \"next/router\";\nimport React, { useCallback, useEffect, FC } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport Loader from \"../common/Loader\";\n\nconst SearchPostContainer: FC = () => {\n  const keyword = (Router.query.keyword || \"\") as string;\n  const orderBy = (Router.query.orderBy || \"createdAt_DESC\") as string;\n\n  const { data: posts, loading: loadPostLoading, fetchMore } = useQuery(\n    postsQuery,\n    {\n      variables: {\n        searchKeyword: decodeURIComponent(keyword),\n        orderBy,\n        first: 10\n      },\n      notifyOnNetworkStatusChange: true\n    }\n  );\n\n  const handleSort = useCallback(nextOrderBy => {\n    Router.push(`/search?keyword=${keyword}&orderBy=${nextOrderBy}`);\n  }, []);\n\n  const handleScrollFetchMore = () => {\n    if (loadPostLoading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (posts && posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            },\n            updateQuery: (\n              prev,\n              { fetchMoreResult }: { fetchMoreResult?: any }\n            ) => {\n              if (!fetchMoreResult) return prev;\n\n              if (fetchMoreResult.getPosts.length === 0) {\n                window.removeEventListener(\"scroll\", handleScrollFetchMore);\n              }\n\n              return Object.assign({}, prev, {\n                getPosts: [...prev.getPosts, ...fetchMoreResult.getPosts]\n              });\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [posts && posts.getPosts, loadPostLoading]);\n\n  if (loadPostLoading && !posts) {\n    return <Loader />;\n  }\n\n  return (\n    <SearchPostPresenter posts={posts} orderBy={orderBy} onSort={handleSort} />\n  );\n};\n\nexport default SearchPostContainer;\n"]},"metadata":{},"sourceType":"module"}