{"ast":null,"code":"var _jsxFileName = \"/Users/idonghun/Desktop/vss/frontend/components/search/SearchPostContainer.tsx\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport React, { useEffect, Fragment } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\n\nconst SearchPostContainer = () => {\n  const router = useRouter();\n  const {\n    keyword,\n    sort\n  } = router.query;\n  const {\n    data,\n    loading,\n    fetchMore,\n    networkStatus,\n    refetch\n  } = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      sort,\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const {\n      scrollHeight,\n      clientHeight,\n      scrollTop\n    } = document.documentElement;\n\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [data && data.getPosts, loading]);\n\n  if (!data && loading) {\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(SearchPostPresenter, {\n    loading: loading,\n    loadingMorePosts: loadingMorePosts,\n    posts: data.getPosts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default SearchPostContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/search/SearchPostContainer.tsx"],"names":["useRouter","React","useEffect","Fragment","useQuery","NetworkStatus","SearchPostPresenter","postsQuery","SearchPostContainer","router","keyword","sort","query","data","loading","fetchMore","networkStatus","refetch","variables","searchKeyword","decodeURIComponent","first","notifyOnNetworkStatusChange","loadingMorePosts","handleScrollFetchMore","scrollHeight","clientHeight","scrollTop","document","documentElement","getPosts","length","skip","window","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,gBAAxC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,MAAMC,mBAAuB,GAAG,MAAM;AACpC,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AAEA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBF,MAAM,CAACG,KAAjC;AAEA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,SAAjB;AAA4BC,IAAAA,aAA5B;AAA2CC,IAAAA;AAA3C,MAAuDb,QAAQ,CACnEG,UADmE,EAEnE;AACEW,IAAAA,SAAS,EAAE;AACTC,MAAAA,aAAa,EAAEC,kBAAkB,CAACV,OAAD,CADxB;AAETC,MAAAA,IAFS;AAGTU,MAAAA,KAAK,EAAE;AAHE,KADb;AAMEC,IAAAA,2BAA2B,EAAE;AAN/B,GAFmE,CAArE;AAYA,QAAMC,gBAAgB,GAAGP,aAAa,KAAKX,aAAa,CAACU,SAAzD;;AAEA,QAAMS,qBAAqB,GAAG,MAAM;AAClC,QAAIV,OAAJ,EAAa;AACb,UAAM;AAAEW,MAAAA,YAAF;AAAgBC,MAAAA,YAAhB;AAA8BC,MAAAA;AAA9B,QAA4CC,QAAQ,CAACC,eAA3D;;AACA,QAAIhB,IAAI,CAACiB,QAAT,EAAmB;AACjB,UAAIH,SAAS,GAAGD,YAAZ,KAA6BD,YAAjC,EAA+C;AAC7C,YAAIZ,IAAI,CAACiB,QAAL,CAAcC,MAAd,GAAuB,EAAvB,KAA8B,CAAlC,EAAqC;AACnChB,UAAAA,SAAS,CAAC;AACRG,YAAAA,SAAS,EAAE;AACTc,cAAAA,IAAI,EAAEnB,IAAI,CAACiB,QAAL,CAAcC;AADX;AADH,WAAD,CAAT;AAKD;AACF;AACF;AACF,GAdD;;AAgBA7B,EAAAA,SAAS,CAAC,MAAM;AACd+B,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCV,qBAAlC;AACA,WAAO,MAAMS,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCX,qBAArC,CAAb;AACD,GAHQ,EAGN,CAACX,IAAI,IAAIA,IAAI,CAACiB,QAAd,EAAwBhB,OAAxB,CAHM,CAAT;;AAKA,MAAI,CAACD,IAAD,IAASC,OAAb,EAAsB;AACpB,WAAO,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACE,MAAC,mBAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,gBAAgB,EAAES,gBAFpB;AAGE,IAAA,KAAK,EAAEV,IAAI,CAACiB,QAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOD,CAnDD;;AAqDA,eAAetB,mBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport React, { useEffect, FC, Fragment } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\n\nconst SearchPostContainer: FC = () => {\n  const router = useRouter();\n\n  const { keyword, sort } = router.query as any;\n\n  const { data, loading, fetchMore, networkStatus, refetch } = useQuery(\n    postsQuery,\n    {\n      variables: {\n        searchKeyword: decodeURIComponent(keyword),\n        sort,\n        first: 10\n      },\n      notifyOnNetworkStatusChange: true\n    }\n  );\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [data && data.getPosts, loading]);\n\n  if (!data && loading) {\n    return <Fragment />;\n  }\n\n  return (\n    <SearchPostPresenter\n      loading={loading}\n      loadingMorePosts={loadingMorePosts}\n      posts={data.getPosts}\n    />\n  );\n};\n\nexport default SearchPostContainer;\n"]},"metadata":{},"sourceType":"module"}