{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, memo } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport PostContainer from \"../post/PostContainer\";\nimport NoData from \"../common/NoData\";\nimport Loader from \"../common/Loader\";\n\nvar PostList = function PostList() {\n  _s();\n\n  var _useQuery = useQuery(postsQuery, {\n    variables: {\n      first: 10,\n      searchKeyword: \"test\"\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var handleScrollFetchMore = function handleScrollFetchMore() {\n    if (loading) return;\n    var _document$documentEle = document.documentElement,\n        scrollHeight = _document$documentEle.scrollHeight,\n        clientHeight = _document$documentEle.clientHeight,\n        scrollTop = _document$documentEle.scrollTop;\n\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  var mapToPosts = function mapToPosts() {\n    return data.getPosts.length > 0 ? data.getPosts.map(function (post) {\n      return __jsx(PostContainer, _extends({\n        key: post.id\n      }, post));\n    }) : __jsx(NoData, null, __jsx(\"h1\", null, \"\\uAC8C\\uC2DC\\uAE00\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"));\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return function () {\n      return window.removeEventListener(\"scroll\", handleScrollFetchMore);\n    };\n  }, [data.getPosts, loading]);\n\n  if (loading && loadingMorePosts) {\n    return __jsx(Loader, null);\n  }\n\n  return __jsx(React.Fragment, null, mapToPosts());\n};\n\n_s(PostList, \"Hg8nRRXsV313/95+ylafcTQinlk=\", false, function () {\n  return [useQuery];\n});\n\n_c = PostList;\nexport default _c2 = memo(PostList);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PostList\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/feed/PostList.tsx"],"names":["React","useEffect","memo","useQuery","NetworkStatus","postsQuery","PostContainer","NoData","Loader","PostList","variables","first","searchKeyword","notifyOnNetworkStatusChange","data","loading","fetchMore","networkStatus","loadingMorePosts","handleScrollFetchMore","document","documentElement","scrollHeight","clientHeight","scrollTop","getPosts","length","skip","mapToPosts","map","post","id","window","addEventListener","removeEventListener"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA+BC,IAA/B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,gBAAxC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;AAEA,IAAMC,QAAY,GAAG,SAAfA,QAAe,GAAM;AAAA;;AAAA,kBAC2BN,QAAQ,CAACE,UAAD,EAAa;AACvEK,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,aAAa,EAAE;AAFN,KAD4D;AAKvEC,IAAAA,2BAA2B,EAAE;AAL0C,GAAb,CADnC;AAAA,MACjBC,IADiB,aACjBA,IADiB;AAAA,MACXC,OADW,aACXA,OADW;AAAA,MACFC,SADE,aACFA,SADE;AAAA,MACSC,aADT,aACSA,aADT;;AASzB,MAAMC,gBAAgB,GAAGD,aAAa,KAAKb,aAAa,CAACY,SAAzD;;AAEA,MAAMG,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAClC,QAAIJ,OAAJ,EAAa;AADqB,gCAEgBK,QAAQ,CAACC,eAFzB;AAAA,QAE1BC,YAF0B,yBAE1BA,YAF0B;AAAA,QAEZC,YAFY,yBAEZA,YAFY;AAAA,QAEEC,SAFF,yBAEEA,SAFF;;AAGlC,QAAIV,IAAI,CAACW,QAAT,EAAmB;AACjB,UAAID,SAAS,GAAGD,YAAZ,KAA6BD,YAAjC,EAA+C;AAC7C,YAAIR,IAAI,CAACW,QAAL,CAAcC,MAAd,GAAuB,EAAvB,KAA8B,CAAlC,EAAqC;AACnCV,UAAAA,SAAS,CAAC;AACRN,YAAAA,SAAS,EAAE;AACTiB,cAAAA,IAAI,EAAEb,IAAI,CAACW,QAAL,CAAcC;AADX;AADH,WAAD,CAAT;AAKD;AACF;AACF;AACF,GAdD;;AAgBA,MAAME,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,WAAOd,IAAI,CAACW,QAAL,CAAcC,MAAd,GAAuB,CAAvB,GACLZ,IAAI,CAACW,QAAL,CAAcI,GAAd,CAAkB,UAAAC,IAAI;AAAA,aAAI,MAAC,aAAD;AAAe,QAAA,GAAG,EAAEA,IAAI,CAACC;AAAzB,SAAiCD,IAAjC,EAAJ;AAAA,KAAtB,CADK,GAGL,MAAC,MAAD,QACE,uEADF,CAHF;AAOD,GARD;;AAUA7B,EAAAA,SAAS,CAAC,YAAM;AACd+B,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCd,qBAAlC;AACA,WAAO;AAAA,aAAMa,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCf,qBAArC,CAAN;AAAA,KAAP;AACD,GAHQ,EAGN,CAACL,IAAI,CAACW,QAAN,EAAgBV,OAAhB,CAHM,CAAT;;AAKA,MAAIA,OAAO,IAAIG,gBAAf,EAAiC;AAC/B,WAAO,MAAC,MAAD,OAAP;AACD;;AAED,SAAO,4BAAGU,UAAU,EAAb,CAAP;AACD,CA/CD;;GAAMnB,Q;UACgDN,Q;;;KADhDM,Q;AAiDN,qBAAeP,IAAI,CAACO,QAAD,CAAnB","sourcesContent":["import React, { useEffect, FC, memo } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport PostContainer from \"../post/PostContainer\";\nimport NoData from \"../common/NoData\";\nimport Loader from \"../common/Loader\";\n\nconst PostList: FC = () => {\n  const { data, loading, fetchMore, networkStatus } = useQuery(postsQuery, {\n    variables: {\n      first: 10,\n      searchKeyword: \"test\"\n    },\n    notifyOnNetworkStatusChange: true\n  });\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const mapToPosts = () => {\n    return data.getPosts.length > 0 ? (\n      data.getPosts.map(post => <PostContainer key={post.id} {...post} />)\n    ) : (\n      <NoData>\n        <h1>게시글이 없습니다.</h1>\n      </NoData>\n    );\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [data.getPosts, loading]);\n\n  if (loading && loadingMorePosts) {\n    return <Loader />;\n  }\n\n  return <>{mapToPosts()}</>;\n};\n\nexport default memo(PostList);\n"]},"metadata":{},"sourceType":"module"}