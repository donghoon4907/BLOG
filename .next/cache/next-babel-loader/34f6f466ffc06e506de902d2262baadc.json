{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport Loader from \"../common/Loader\";\n\nvar SearchPostContainer = function SearchPostContainer() {\n  _s();\n\n  var router = useRouter();\n  var _ref = router.query,\n      keyword = _ref.keyword,\n      orderBy = _ref.orderBy;\n\n  var _useQuery = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      orderBy: orderBy,\n      first: 10\n    },\n    skip: !keyword,\n    notifyOnNetworkStatusChange: true\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var handleScrollFetchMore = function handleScrollFetchMore() {\n    if (loading) return;\n    var _document$documentEle = document.documentElement,\n        scrollHeight = _document$documentEle.scrollHeight,\n        clientHeight = _document$documentEle.clientHeight,\n        scrollTop = _document$documentEle.scrollTop;\n\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  var handleSort = useCallback(function (nextOrderBy) {\n    router.push(\"/search?keyword=\".concat(keyword, \"&orderBy=\").concat(nextOrderBy));\n  }, []);\n  useEffect(function () {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return function () {\n      return window.removeEventListener(\"scroll\", handleScrollFetchMore);\n    };\n  }, [data && data.getPosts, loading]);\n\n  if (!data && loading) {\n    return __jsx(Loader, null);\n  }\n\n  return __jsx(SearchPostPresenter, {\n    loading: loading,\n    loadingMorePosts: loadingMorePosts,\n    posts: data.getPosts,\n    orderBy: orderBy,\n    onSort: handleSort\n  });\n};\n\n_s(SearchPostContainer, \"EJhT44vaSrTP02hdHl44TBCc00Y=\", false, function () {\n  return [useRouter, useQuery];\n});\n\n_c = SearchPostContainer;\nexport default SearchPostContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchPostContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/search/SearchPostContainer.tsx"],"names":["useRouter","React","useCallback","useEffect","useQuery","NetworkStatus","SearchPostPresenter","postsQuery","Loader","SearchPostContainer","router","query","keyword","orderBy","variables","searchKeyword","decodeURIComponent","first","skip","notifyOnNetworkStatusChange","data","loading","fetchMore","networkStatus","loadingMorePosts","handleScrollFetchMore","document","documentElement","scrollHeight","clientHeight","scrollTop","getPosts","length","handleSort","nextOrderBy","push","window","addEventListener","removeEventListener"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA4D,OAA5D;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,gBAAxC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;AAEA,IAAMC,mBAAuB,GAAG,SAA1BA,mBAA0B,GAAM;AAAA;;AACpC,MAAMC,MAAM,GAAGV,SAAS,EAAxB;AADoC,aAGPU,MAAM,CAACC,KAHA;AAAA,MAG5BC,OAH4B,QAG5BA,OAH4B;AAAA,MAGnBC,OAHmB,QAGnBA,OAHmB;;AAAA,kBAKgBT,QAAQ,CAACG,UAAD,EAAa;AACvEO,IAAAA,SAAS,EAAE;AACTC,MAAAA,aAAa,EAAEC,kBAAkB,CAACJ,OAAD,CADxB;AAETC,MAAAA,OAAO,EAAPA,OAFS;AAGTI,MAAAA,KAAK,EAAE;AAHE,KAD4D;AAMvEC,IAAAA,IAAI,EAAE,CAACN,OANgE;AAOvEO,IAAAA,2BAA2B,EAAE;AAP0C,GAAb,CALxB;AAAA,MAK5BC,IAL4B,aAK5BA,IAL4B;AAAA,MAKtBC,OALsB,aAKtBA,OALsB;AAAA,MAKbC,SALa,aAKbA,SALa;AAAA,MAKFC,aALE,aAKFA,aALE;;AAepC,MAAMC,gBAAgB,GAAGD,aAAa,KAAKlB,aAAa,CAACiB,SAAzD;;AAEA,MAAMG,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAClC,QAAIJ,OAAJ,EAAa;AADqB,gCAEgBK,QAAQ,CAACC,eAFzB;AAAA,QAE1BC,YAF0B,yBAE1BA,YAF0B;AAAA,QAEZC,YAFY,yBAEZA,YAFY;AAAA,QAEEC,SAFF,yBAEEA,SAFF;;AAGlC,QAAIV,IAAI,CAACW,QAAT,EAAmB;AACjB,UAAID,SAAS,GAAGD,YAAZ,KAA6BD,YAAjC,EAA+C;AAC7C,YAAIR,IAAI,CAACW,QAAL,CAAcC,MAAd,GAAuB,EAAvB,KAA8B,CAAlC,EAAqC;AACnCV,UAAAA,SAAS,CAAC;AACRR,YAAAA,SAAS,EAAE;AACTI,cAAAA,IAAI,EAAEE,IAAI,CAACW,QAAL,CAAcC;AADX;AADH,WAAD,CAAT;AAKD;AACF;AACF;AACF,GAdD;;AAgBA,MAAMC,UAAU,GAAG/B,WAAW,CAAC,UAAAgC,WAAW,EAAI;AAC5CxB,IAAAA,MAAM,CAACyB,IAAP,2BAA+BvB,OAA/B,sBAAkDsB,WAAlD;AACD,GAF6B,EAE3B,EAF2B,CAA9B;AAIA/B,EAAAA,SAAS,CAAC,YAAM;AACdiC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCZ,qBAAlC;AACA,WAAO;AAAA,aAAMW,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCb,qBAArC,CAAN;AAAA,KAAP;AACD,GAHQ,EAGN,CAACL,IAAI,IAAIA,IAAI,CAACW,QAAd,EAAwBV,OAAxB,CAHM,CAAT;;AAKA,MAAI,CAACD,IAAD,IAASC,OAAb,EAAsB;AACpB,WAAO,MAAC,MAAD,OAAP;AACD;;AAED,SACE,MAAC,mBAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,gBAAgB,EAAEG,gBAFpB;AAGE,IAAA,KAAK,EAAEJ,IAAI,CAACW,QAHd;AAIE,IAAA,OAAO,EAAElB,OAJX;AAKE,IAAA,MAAM,EAAEoB;AALV,IADF;AASD,CAvDD;;GAAMxB,mB;UACWT,S,EAIqCI,Q;;;KALhDK,mB;AAyDN,eAAeA,mBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport React, { useCallback, useEffect, FC, Fragment } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport Loader from \"../common/Loader\";\n\nconst SearchPostContainer: FC = () => {\n  const router = useRouter();\n\n  const { keyword, orderBy } = router.query as any;\n\n  const { data, loading, fetchMore, networkStatus } = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      orderBy,\n      first: 10\n    },\n    skip: !keyword,\n    notifyOnNetworkStatusChange: true\n  });\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const handleSort = useCallback(nextOrderBy => {\n    router.push(`/search?keyword=${keyword}&orderBy=${nextOrderBy}`);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [data && data.getPosts, loading]);\n\n  if (!data && loading) {\n    return <Loader />;\n  }\n\n  return (\n    <SearchPostPresenter\n      loading={loading}\n      loadingMorePosts={loadingMorePosts}\n      posts={data.getPosts}\n      orderBy={orderBy}\n      onSort={handleSort}\n    />\n  );\n};\n\nexport default SearchPostContainer;\n"]},"metadata":{},"sourceType":"module"}