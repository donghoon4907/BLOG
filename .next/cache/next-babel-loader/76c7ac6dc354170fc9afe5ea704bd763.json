{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport App, { Container } from \"next/app\";\nimport React from \"react\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { ThemeProvider } from \"styled-components\";\nimport { withApollo } from \"../lib/apollo\";\nimport GlobalStyle from \"../theme/globalStyle\";\nimport theme from \"../theme\";\n\nvar AppComponent = /*#__PURE__*/function (_App) {\n  _inherits(AppComponent, _App);\n\n  var _super = _createSuper(AppComponent);\n\n  function AppComponent() {\n    _classCallCheck(this, AppComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AppComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          apolloClient = _this$props.apolloClient;\n      return __jsx(Container, null, __jsx(ApolloProvider, {\n        client: apolloClient\n      }, __jsx(GlobalStyle, null), __jsx(ThemeProvider, {\n        theme: theme\n      }, __jsx(Component, pageProps))));\n    }\n  }]);\n\n  return AppComponent;\n}(App);\n\nexport default _c = withApollo(AppComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/_app.tsx"],"names":["AppComponent","App","Component","pageProps","apolloClient","theme","withApollo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,GAAA,IAAA,SAAA,QAAA,UAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,cAAA,QAAA,gBAAA;AACA,SAAA,aAAA,QAAA,mBAAA;AACA,SAAA,UAAA,QAAA,eAAA;AACA,OAAA,WAAA,MAAA,sBAAA;AACA,OAAA,KAAA,MAAA,UAAA;;IAEMA,Y;;;;;;;;;;;;;6BACK;AAAA,UAAA,WAAA,GACwC,KADxC,KAAA;AAAA,UACCE,SADD,GAAA,WAAA,CAAA,SAAA;AAAA,UACYC,SADZ,GAAA,WAAA,CAAA,SAAA;AAAA,UACuBC,YADvB,GAAA,WAAA,CAAA,YAAA;AAEP,aACE,KAAA,CAAA,SAAA,EAAA,IAAA,EACE,KAAA,CAAA,cAAA,EAAA;AAAgB,QAAA,MAAM,EAAEA;AAAxB,OAAA,EACE,KAAA,CAAA,WAAA,EADF,IACE,CADF,EAEE,KAAA,CAAA,aAAA,EAAA;AAAe,QAAA,KAAK,EAAEC;AAAtB,OAAA,EACE,KAAA,CAAA,SAAA,EALR,SAKQ,CADF,CAFF,CADF,CADF;AAUD;;;;EAbwBJ,G;;AAgB3B,eAAA,EAAA,GAAeK,UAAU,CAAzB,YAAyB,CAAzB","sourcesContent":["import App, { Container } from \"next/app\";\nimport React from \"react\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { ThemeProvider } from \"styled-components\";\nimport { withApollo } from \"../lib/apollo\";\nimport GlobalStyle from \"../theme/globalStyle\";\nimport theme from \"../theme\";\n\nclass AppComponent extends App<any> {\n  render() {\n    const { Component, pageProps, apolloClient } = this.props;\n    return (\n      <Container>\n        <ApolloProvider client={apolloClient}>\n          <GlobalStyle />\n          <ThemeProvider theme={theme}>\n            <Component {...pageProps} />\n          </ThemeProvider>\n        </ApolloProvider>\n      </Container>\n    );\n  }\n}\n\nexport default withApollo(AppComponent);\n"]},"metadata":{},"sourceType":"module"}