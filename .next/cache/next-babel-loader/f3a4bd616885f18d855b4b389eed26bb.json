{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport PostPresenter from \"./PostPresenter\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport { likeMutation } from \"../../graphql/post/mutation/like\";\nimport { useVssState, useVssDispatch, SHOW_POST_MODAL, SHOW_LOGIN_MODAL } from \"../../context\";\nimport { getAccessToken } from \"../../lib/token\";\n\nconst PostContainer = ({\n  id,\n  title,\n  description,\n  createdAt,\n  user,\n  video,\n  status,\n  likes,\n  room\n}) => {\n  const {\n    id: userId\n  } = useVssState();\n  const dispatch = useVssDispatch();\n  const isMyPost = userId || userId === user.id;\n  const {\n    0: ctrlIsLiked,\n    1: setCtrlIsLiked\n  } = useState(likes.some(v => v.user.id === userId));\n  const {\n    0: ctrlLikeCount,\n    1: setCtrlLikeCount\n  } = useState(likes.length);\n  const [like, {\n    loading: likeLoading\n  }] = useMutation(likeMutation);\n  const [remove, {\n    loading: removeLoading\n  }] = useMutation(removePostMutation); // 포스트 채팅방 접근 이벤트\n\n  const handleRoom = useCallback(() => {\n    const token = getAccessToken();\n\n    if (token) {//Router.push(`/room/${room.id}`);\n    } else {\n      dispatch({\n        type: SHOW_LOGIN_MODAL\n      });\n    }\n  }, []); // 포스트 수정 이벤트\n\n  const handleUpdate = useCallback(() => {\n    dispatch({\n      type: SHOW_POST_MODAL,\n      postId: id,\n      title,\n      description,\n      status,\n      url: video.url\n    });\n  }, []); // 좋아요 / 좋아요 취소 이벤트\n\n  const handleLike = useCallback(async () => {\n    const token = getAccessToken();\n\n    if (token) {\n      setCtrlIsLiked(!ctrlIsLiked);\n      setCtrlLikeCount(ctrlIsLiked ? ctrlLikeCount - 1 : ctrlLikeCount + 1);\n\n      try {\n        await like({\n          variables: {\n            postId: id\n          }\n        });\n      } catch (error) {\n        const {\n          message\n        } = JSON.parse(error.message);\n        alert(message);\n      }\n    } else {\n      dispatch({\n        type: SHOW_LOGIN_MODAL\n      });\n    }\n  }, [ctrlIsLiked, ctrlLikeCount, likeLoading]); // 삭제 이벤트\n\n  const handleDelete = useCallback(async () => {\n    if (removeLoading) {\n      return alert(\"요청중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n    if (tf) {\n      try {\n        const {\n          data: {\n            deletePost\n          }\n        } = await remove({\n          variables: {\n            postId: id\n          }\n        });\n\n        if (deletePost) {\n          alert(\"포스트가 삭제되었습니다.\");\n          window.location.reload();\n        }\n      } catch (error) {\n        const {\n          message\n        } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [removeLoading]);\n  return __jsx(PostPresenter, {\n    title: title,\n    description: description,\n    status: status,\n    createdAt: createdAt,\n    user: user,\n    video: video,\n    isLiked: ctrlIsLiked,\n    likeCount: ctrlLikeCount,\n    isMyPost: isMyPost,\n    onLike: handleLike,\n    onUpdate: handleUpdate,\n    onRoom: handleRoom,\n    onDelete: handleDelete\n  });\n};\n\nexport default PostContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/post/PostContainer.tsx"],"names":["React","useState","useCallback","useMutation","PostPresenter","removePostMutation","likeMutation","useVssState","useVssDispatch","SHOW_POST_MODAL","SHOW_LOGIN_MODAL","getAccessToken","PostContainer","id","title","description","createdAt","user","video","status","likes","room","userId","dispatch","isMyPost","ctrlIsLiked","setCtrlIsLiked","some","v","ctrlLikeCount","setCtrlLikeCount","length","like","loading","likeLoading","remove","removeLoading","handleRoom","token","type","handleUpdate","postId","url","handleLike","variables","error","message","JSON","parse","alert","handleDelete","tf","confirm","data","deletePost","window","location","reload"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, FC } from \"react\";\nimport Router from \"next/router\";\nimport { useMutation } from \"@apollo/client\";\nimport PostPresenter from \"./PostPresenter\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport { likeMutation } from \"../../graphql/post/mutation/like\";\nimport {\n  useVssState,\n  useVssDispatch,\n  SHOW_POST_MODAL,\n  SHOW_LOGIN_MODAL\n} from \"../../context\";\nimport { getAccessToken } from \"../../lib/token\";\n\nexport type PostProps = {\n  id: string;\n  title: string;\n  description: string;\n  video: any;\n  user: any;\n  likes: any;\n  createdAt: string;\n  updatedAt: string;\n  status: string;\n  room: any;\n};\n\nconst PostContainer: FC<PostProps> = ({\n  id,\n  title,\n  description,\n  createdAt,\n  user,\n  video,\n  status,\n  likes,\n  room\n}) => {\n  const { id: userId } = useVssState();\n  const dispatch = useVssDispatch();\n\n  const isMyPost = userId || userId === user.id;\n  const [ctrlIsLiked, setCtrlIsLiked] = useState<boolean>(\n    likes.some((v: any) => v.user.id === userId)\n  );\n  const [ctrlLikeCount, setCtrlLikeCount] = useState<number>(likes.length);\n\n  const [like, { loading: likeLoading }] = useMutation(likeMutation);\n  const [remove, { loading: removeLoading }] = useMutation(removePostMutation);\n\n  // 포스트 채팅방 접근 이벤트\n  const handleRoom = useCallback(() => {\n    const token = getAccessToken();\n    if (token) {\n      //Router.push(`/room/${room.id}`);\n    } else {\n      dispatch({\n        type: SHOW_LOGIN_MODAL\n      });\n    }\n  }, []);\n\n  // 포스트 수정 이벤트\n  const handleUpdate = useCallback(() => {\n    dispatch({\n      type: SHOW_POST_MODAL,\n      postId: id,\n      title,\n      description,\n      status,\n      url: video.url\n    });\n  }, []);\n\n  // 좋아요 / 좋아요 취소 이벤트\n  const handleLike = useCallback(async () => {\n    const token = getAccessToken();\n    if (token) {\n      setCtrlIsLiked(!ctrlIsLiked);\n      setCtrlLikeCount(ctrlIsLiked ? ctrlLikeCount - 1 : ctrlLikeCount + 1);\n\n      try {\n        await like({\n          variables: { postId: id }\n        });\n      } catch (error) {\n        const { message } = JSON.parse(error.message);\n        alert(message);\n      }\n    } else {\n      dispatch({\n        type: SHOW_LOGIN_MODAL\n      });\n    }\n  }, [ctrlIsLiked, ctrlLikeCount, likeLoading]);\n\n  // 삭제 이벤트\n  const handleDelete = useCallback(async () => {\n    if (removeLoading) {\n      return alert(\"요청중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n    if (tf) {\n      try {\n        const {\n          data: { deletePost }\n        } = await remove({\n          variables: { postId: id }\n        });\n\n        if (deletePost) {\n          alert(\"포스트가 삭제되었습니다.\");\n          window.location.reload();\n        }\n      } catch (error) {\n        const { message } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [removeLoading]);\n\n  return (\n    <PostPresenter\n      title={title}\n      description={description}\n      status={status}\n      createdAt={createdAt}\n      user={user}\n      video={video}\n      isLiked={ctrlIsLiked}\n      likeCount={ctrlLikeCount}\n      isMyPost={isMyPost}\n      onLike={handleLike}\n      onUpdate={handleUpdate}\n      onRoom={handleRoom}\n      onDelete={handleDelete}\n    />\n  );\n};\n\nexport default PostContainer;\n"]},"metadata":{},"sourceType":"module"}