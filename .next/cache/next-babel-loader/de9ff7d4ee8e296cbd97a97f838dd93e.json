{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport axios from \"axios\";\nimport { addPostMutation } from \"../../graphql/post/mutation/add\";\nimport { updatePostMutation } from \"../../graphql/post/mutation/update\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport SetPostPresenter from \"./SetPostPresenter\";\nimport { useVssState, useVssDispatch, HIDE_POST_MODAL } from \"../../context\";\n\nconst SetPostContainer = () => {\n  const {\n    activePost\n  } = useVssState;\n  const dispatch = useVssDispatch();\n  const {\n    0: header,\n    1: setHeader\n  } = useState(\"영상 업로드\");\n  const fileEl = useRef(null);\n  const {\n    0: title,\n    1: setTitle\n  } = useState(\"\");\n  const {\n    0: description,\n    1: setDescription\n  } = useState(\"\");\n  const {\n    0: status,\n    1: setStatus\n  } = useState(\"PUBLIC\");\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(0);\n  const {\n    0: file,\n    1: setFile\n  } = useState(\"\");\n  useEffect(() => {\n    if (activePost.title) {\n      setTitle(activePost.title);\n    }\n\n    if (activePost.description) {\n      setDescription(activePost.description);\n    }\n\n    if (activePost.status) {\n      setStatus(activePost.status);\n    }\n\n    if (activePost.id) {\n      setProgress(100);\n    }\n\n    if (activePost.url) {\n      setFile(activePost.url);\n    }\n\n    set;\n  }, [activePost]);\n  const [set, {\n    loading: setPostLoading\n  }] = useMutation(postId ? updatePostMutation : addPostMutation);\n  const [remove, {\n    loading: removePostLoading\n  }] = useMutation(removePostMutation);\n  const handleClickFile = useCallback(() => {\n    const node = fileEl.current;\n\n    if (node) {\n      node.click();\n    }\n  }, []);\n  const handleChangeFile = useCallback(async e => {\n    if (!e.target.value) return; // cancel select file\n\n    const {\n      files\n    } = e.target;\n    const formData = new FormData();\n    formData.append(\"file\", files[0]);\n    const response = await axios.post(`${process.env.BACKEND_API_PATH}/api/upload`, formData, {\n      onUploadProgress: ({\n        lengthComputable,\n        loaded,\n        total\n      }) => {\n        if (lengthComputable) {\n          setProgress(Math.floor(loaded / total * 100));\n        }\n      }\n    });\n\n    if (response.data) {\n      setFile(response.data);\n      setHeader(\"등록\");\n    }\n  }, []);\n  const handleDelete = useCallback(async () => {\n    if (removePostLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n    if (tf) {\n      const {\n        data: {\n          deletePost\n        }\n      } = await remove({\n        variables: {\n          postId\n        }\n      });\n\n      if (deletePost) {\n        alert(\"포스트가 삭제되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [removePostLoading]);\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n\n    if (setPostLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(`입력한 내용으로 ${postId ? \"수정\" : \"등록\"}하시겠어요?`);\n\n    if (tf) {\n      try {\n        const {\n          data: {\n            addPost,\n            updatePost\n          }\n        } = await set({\n          variables: {\n            postId,\n            title: modalTitle.value,\n            description: modalDescription.value,\n            status: modalStatus.value,\n            file\n          }\n        });\n\n        if (addPost || updatePost) {\n          alert(`포스트가 ${postId ? \"수정\" : \"등록\"} 되었습니다.`);\n          location.reload();\n        }\n      } catch (error) {\n        const {\n          message\n        } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [modalTitle.value, modalDescription.value, modalStatus.value, file, setPostLoading]);\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: HIDE_POST_MODAL,\n      payload: false\n    });\n  }, []);\n  return __jsx(SetPostPresenter, {\n    loading: setPostLoading,\n    header: header,\n    title: modalTitle,\n    description: modalDescription,\n    status: modalStatus,\n    progress: progress,\n    file: file,\n    fileEl: fileEl,\n    onClickFile: handleClickFile,\n    onChangeFile: handleChangeFile,\n    onClose: handleClose,\n    onDelete: handleDelete,\n    onSubmit: handleSubmit\n  });\n};\n\nexport default SetPostContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetPostContainer.tsx"],"names":["React","useCallback","useState","useRef","useEffect","useMutation","axios","addPostMutation","updatePostMutation","removePostMutation","SetPostPresenter","useVssState","useVssDispatch","HIDE_POST_MODAL","SetPostContainer","activePost","dispatch","header","setHeader","fileEl","title","setTitle","description","setDescription","status","setStatus","progress","setProgress","file","setFile","id","url","set","loading","setPostLoading","postId","remove","removePostLoading","handleClickFile","node","current","click","handleChangeFile","e","target","value","files","formData","FormData","append","response","post","process","env","BACKEND_API_PATH","onUploadProgress","lengthComputable","loaded","total","Math","floor","data","handleDelete","alert","tf","confirm","deletePost","variables","window","location","reload","handleSubmit","preventDefault","addPost","updatePost","modalTitle","modalDescription","modalStatus","error","message","JSON","parse","handleClose","type","payload"],"mappings":";AAAA,OAAOA,KAAP,IACEC,WADF,EAEEC,QAFF,EAIEC,MAJF,EAMEC,SANF,QAOO,OAPP;AAQA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,kBAAT,QAAmC,oCAAnC;AACA,SAASC,kBAAT,QAAmC,oCAAnC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,eAAtC,QAA6D,eAA7D;;AAEA,MAAMC,gBAAoB,GAAG,MAAM;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAiBJ,WAAvB;AACA,QAAMK,QAAQ,GAAGJ,cAAc,EAA/B;AAEA,QAAM;AAAA,OAACK,MAAD;AAAA,OAASC;AAAT,MAAsBhB,QAAQ,CAAC,QAAD,CAApC;AAEA,QAAMiB,MAAM,GAAGhB,MAAM,CAAmB,IAAnB,CAArB;AAEA,QAAM;AAAA,OAACiB,KAAD;AAAA,OAAQC;AAAR,MAAoBnB,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAM;AAAA,OAACoB,WAAD;AAAA,OAAcC;AAAd,MAAgCrB,QAAQ,CAAS,EAAT,CAA9C;AACA,QAAM;AAAA,OAACsB,MAAD;AAAA,OAASC;AAAT,MAAsBvB,QAAQ,CAAS,QAAT,CAApC;AACA,QAAM;AAAA,OAACwB,QAAD;AAAA,OAAWC;AAAX,MAA0BzB,QAAQ,CAAS,CAAT,CAAxC;AACA,QAAM;AAAA,OAAC0B,IAAD;AAAA,OAAOC;AAAP,MAAkB3B,QAAQ,CAAS,EAAT,CAAhC;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,UAAU,CAACK,KAAf,EAAsB;AACpBC,MAAAA,QAAQ,CAACN,UAAU,CAACK,KAAZ,CAAR;AACD;;AACD,QAAIL,UAAU,CAACO,WAAf,EAA4B;AAC1BC,MAAAA,cAAc,CAACR,UAAU,CAACO,WAAZ,CAAd;AACD;;AACD,QAAIP,UAAU,CAACS,MAAf,EAAuB;AACrBC,MAAAA,SAAS,CAACV,UAAU,CAACS,MAAZ,CAAT;AACD;;AACD,QAAIT,UAAU,CAACe,EAAf,EAAmB;AACjBH,MAAAA,WAAW,CAAC,GAAD,CAAX;AACD;;AACD,QAAIZ,UAAU,CAACgB,GAAf,EAAoB;AAClBF,MAAAA,OAAO,CAACd,UAAU,CAACgB,GAAZ,CAAP;AACD;;AAEDC,IAAAA,GAAG;AACJ,GAlBQ,EAkBN,CAACjB,UAAD,CAlBM,CAAT;AAoBA,QAAM,CAACiB,GAAD,EAAM;AAAEC,IAAAA,OAAO,EAAEC;AAAX,GAAN,IAAqC7B,WAAW,CACpD8B,MAAM,GAAG3B,kBAAH,GAAwBD,eADsB,CAAtD;AAIA,QAAM,CAAC6B,MAAD,EAAS;AAAEH,IAAAA,OAAO,EAAEI;AAAX,GAAT,IAA2ChC,WAAW,CAC1DI,kBAD0D,CAA5D;AAIA,QAAM6B,eAAe,GAAGrC,WAAW,CAAC,MAAM;AACxC,UAAMsC,IAAI,GAAGpB,MAAM,CAACqB,OAApB;;AACA,QAAID,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACE,KAAL;AACD;AACF,GALkC,EAKhC,EALgC,CAAnC;AAOA,QAAMC,gBAAgB,GAAGzC,WAAW,CAAC,MAAM0C,CAAN,IAAW;AAC9C,QAAI,CAACA,CAAC,CAACC,MAAF,CAASC,KAAd,EAAqB,OADyB,CACjB;;AAE7B,UAAM;AAAEC,MAAAA;AAAF,QAAYH,CAAC,CAACC,MAApB;AAEA,UAAMG,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBH,KAAK,CAAC,CAAD,CAA7B;AAEA,UAAMI,QAAQ,GAAG,MAAM5C,KAAK,CAAC6C,IAAN,CACpB,GAAEC,OAAO,CAACC,GAAR,CAAYC,gBAAiB,aADX,EAErBP,QAFqB,EAGrB;AACEQ,MAAAA,gBAAgB,EAAE,CAAC;AAAEC,QAAAA,gBAAF;AAAoBC,QAAAA,MAApB;AAA4BC,QAAAA;AAA5B,OAAD,KAAyC;AACzD,YAAIF,gBAAJ,EAAsB;AACpB7B,UAAAA,WAAW,CAACgC,IAAI,CAACC,KAAL,CAAYH,MAAM,GAAGC,KAAV,GAAmB,GAA9B,CAAD,CAAX;AACD;AACF;AALH,KAHqB,CAAvB;;AAWA,QAAIR,QAAQ,CAACW,IAAb,EAAmB;AACjBhC,MAAAA,OAAO,CAACqB,QAAQ,CAACW,IAAV,CAAP;AACA3C,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,GAvBmC,EAuBjC,EAvBiC,CAApC;AAyBA,QAAM4C,YAAY,GAAG7D,WAAW,CAAC,YAAY;AAC3C,QAAIoC,iBAAJ,EAAuB;AACrB,aAAO0B,KAAK,CAAC,sBAAD,CAAZ;AACD;;AAED,UAAMC,EAAE,GAAGC,OAAO,CAAC,eAAD,CAAlB;;AAEA,QAAID,EAAJ,EAAQ;AACN,YAAM;AACJH,QAAAA,IAAI,EAAE;AAAEK,UAAAA;AAAF;AADF,UAEF,MAAM9B,MAAM,CAAC;AACf+B,QAAAA,SAAS,EAAE;AACThC,UAAAA;AADS;AADI,OAAD,CAFhB;;AAOA,UAAI+B,UAAJ,EAAgB;AACdH,QAAAA,KAAK,CAAC,eAAD,CAAL;AACAK,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;AACF;AACF,GApB+B,EAoB7B,CAACjC,iBAAD,CApB6B,CAAhC;AAsBA,QAAMkC,YAAY,GAAGtE,WAAW,CAC9B,MAAO0C,CAAP,IAAyC;AACvCA,IAAAA,CAAC,CAAC6B,cAAF;;AACA,QAAItC,cAAJ,EAAoB;AAClB,aAAO6B,KAAK,CAAC,sBAAD,CAAZ;AACD;;AAED,UAAMC,EAAE,GAAGC,OAAO,CACf,YAAW9B,MAAM,GAAG,IAAH,GAAU,IAAK,QADjB,CAAlB;;AAIA,QAAI6B,EAAJ,EAAQ;AACN,UAAI;AACF,cAAM;AACJH,UAAAA,IAAI,EAAE;AAAEY,YAAAA,OAAF;AAAWC,YAAAA;AAAX;AADF,YAEF,MAAM1C,GAAG,CAAC;AACZmC,UAAAA,SAAS,EAAE;AACThC,YAAAA,MADS;AAETf,YAAAA,KAAK,EAAEuD,UAAU,CAAC9B,KAFT;AAGTvB,YAAAA,WAAW,EAAEsD,gBAAgB,CAAC/B,KAHrB;AAITrB,YAAAA,MAAM,EAAEqD,WAAW,CAAChC,KAJX;AAKTjB,YAAAA;AALS;AADC,SAAD,CAFb;;AAWA,YAAI6C,OAAO,IAAIC,UAAf,EAA2B;AACzBX,UAAAA,KAAK,CAAE,QAAO5B,MAAM,GAAG,IAAH,GAAU,IAAK,SAA9B,CAAL;AACAkC,UAAAA,QAAQ,CAACC,MAAT;AACD;AACF,OAhBD,CAgBE,OAAOQ,KAAP,EAAc;AACd,cAAM;AAAEC,UAAAA;AAAF,YAAcC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACC,OAAjB,CAApB;AACAhB,QAAAA,KAAK,CAACgB,OAAD,CAAL;AACD;AACF;AACF,GAjC6B,EAkC9B,CACEJ,UAAU,CAAC9B,KADb,EAEE+B,gBAAgB,CAAC/B,KAFnB,EAGEgC,WAAW,CAAChC,KAHd,EAIEjB,IAJF,EAKEM,cALF,CAlC8B,CAAhC;AA2CA,QAAMgD,WAAW,GAAGjF,WAAW,CAAC,MAAM;AACpCe,IAAAA,QAAQ,CAAC;AACPmE,MAAAA,IAAI,EAAEtE,eADC;AAEPuE,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GAL8B,EAK5B,EAL4B,CAA/B;AAOA,SACE,MAAC,gBAAD;AACE,IAAA,OAAO,EAAElD,cADX;AAEE,IAAA,MAAM,EAAEjB,MAFV;AAGE,IAAA,KAAK,EAAE0D,UAHT;AAIE,IAAA,WAAW,EAAEC,gBAJf;AAKE,IAAA,MAAM,EAAEC,WALV;AAME,IAAA,QAAQ,EAAEnD,QANZ;AAOE,IAAA,IAAI,EAAEE,IAPR;AAQE,IAAA,MAAM,EAAET,MARV;AASE,IAAA,WAAW,EAAEmB,eATf;AAUE,IAAA,YAAY,EAAEI,gBAVhB;AAWE,IAAA,OAAO,EAAEwC,WAXX;AAYE,IAAA,QAAQ,EAAEpB,YAZZ;AAaE,IAAA,QAAQ,EAAES;AAbZ,IADF;AAiBD,CAnKD;;AAqKA,eAAezD,gBAAf","sourcesContent":["import React, {\n  useCallback,\n  useState,\n  FC,\n  useRef,\n  FormEvent,\n  useEffect\n} from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport axios from \"axios\";\nimport { addPostMutation } from \"../../graphql/post/mutation/add\";\nimport { updatePostMutation } from \"../../graphql/post/mutation/update\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport SetPostPresenter from \"./SetPostPresenter\";\nimport { useVssState, useVssDispatch, HIDE_POST_MODAL } from \"../../context\";\n\nconst SetPostContainer: FC = () => {\n  const { activePost } = useVssState;\n  const dispatch = useVssDispatch();\n\n  const [header, setHeader] = useState(\"영상 업로드\");\n\n  const fileEl = useRef<HTMLInputElement>(null);\n\n  const [title, setTitle] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [status, setStatus] = useState<string>(\"PUBLIC\");\n  const [progress, setProgress] = useState<number>(0);\n  const [file, setFile] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (activePost.title) {\n      setTitle(activePost.title);\n    }\n    if (activePost.description) {\n      setDescription(activePost.description);\n    }\n    if (activePost.status) {\n      setStatus(activePost.status);\n    }\n    if (activePost.id) {\n      setProgress(100);\n    }\n    if (activePost.url) {\n      setFile(activePost.url);\n    }\n\n    set;\n  }, [activePost]);\n\n  const [set, { loading: setPostLoading }] = useMutation(\n    postId ? updatePostMutation : addPostMutation\n  );\n\n  const [remove, { loading: removePostLoading }] = useMutation(\n    removePostMutation\n  );\n\n  const handleClickFile = useCallback(() => {\n    const node = fileEl.current;\n    if (node) {\n      node.click();\n    }\n  }, []);\n\n  const handleChangeFile = useCallback(async e => {\n    if (!e.target.value) return; // cancel select file\n\n    const { files } = e.target;\n\n    const formData = new FormData();\n    formData.append(\"file\", files[0]);\n\n    const response = await axios.post(\n      `${process.env.BACKEND_API_PATH}/api/upload`,\n      formData,\n      {\n        onUploadProgress: ({ lengthComputable, loaded, total }) => {\n          if (lengthComputable) {\n            setProgress(Math.floor((loaded / total) * 100));\n          }\n        }\n      }\n    );\n    if (response.data) {\n      setFile(response.data);\n      setHeader(\"등록\");\n    }\n  }, []);\n\n  const handleDelete = useCallback(async () => {\n    if (removePostLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n    if (tf) {\n      const {\n        data: { deletePost }\n      } = await remove({\n        variables: {\n          postId\n        }\n      });\n      if (deletePost) {\n        alert(\"포스트가 삭제되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [removePostLoading]);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (setPostLoading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n\n      const tf = confirm(\n        `입력한 내용으로 ${postId ? \"수정\" : \"등록\"}하시겠어요?`\n      );\n\n      if (tf) {\n        try {\n          const {\n            data: { addPost, updatePost }\n          } = await set({\n            variables: {\n              postId,\n              title: modalTitle.value,\n              description: modalDescription.value,\n              status: modalStatus.value,\n              file\n            }\n          });\n          if (addPost || updatePost) {\n            alert(`포스트가 ${postId ? \"수정\" : \"등록\"} 되었습니다.`);\n            location.reload();\n          }\n        } catch (error) {\n          const { message } = JSON.parse(error.message);\n          alert(message);\n        }\n      }\n    },\n    [\n      modalTitle.value,\n      modalDescription.value,\n      modalStatus.value,\n      file,\n      setPostLoading\n    ]\n  );\n\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: HIDE_POST_MODAL,\n      payload: false\n    });\n  }, []);\n\n  return (\n    <SetPostPresenter\n      loading={setPostLoading}\n      header={header}\n      title={modalTitle}\n      description={modalDescription}\n      status={modalStatus}\n      progress={progress}\n      file={file}\n      fileEl={fileEl}\n      onClickFile={handleClickFile}\n      onChangeFile={handleChangeFile}\n      onClose={handleClose}\n      onDelete={handleDelete}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SetPostContainer;\n"]},"metadata":{},"sourceType":"module"}