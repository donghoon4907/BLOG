{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, memo } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport PostContainer from \"../post/PostContainer\";\nimport Loader from \"../common/Loader\";\n\nconst PostList = () => {\n  const {\n    data,\n    loading,\n    fetchMore,\n    networkStatus\n  } = useQuery(postsQuery, {\n    variables: {\n      first: 10\n    },\n    fetchPolicy: \"network-only\",\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const {\n      scrollHeight,\n      clientHeight,\n      scrollTop\n    } = document.documentElement;\n\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [data.getPosts, loading]);\n  return __jsx(React.Fragment, null, loading && loadingMorePosts && __jsx(Loader, null), data.getPosts.map(post => __jsx(PostContainer, _extends({\n    key: post.id\n  }, post))));\n};\n\nexport default memo(PostList);","map":null,"metadata":{},"sourceType":"module"}