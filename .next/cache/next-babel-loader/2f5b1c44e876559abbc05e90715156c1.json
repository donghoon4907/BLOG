{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport Input from \"../common/Input\";\nimport { InputWrapper, Label, TextArea } from \"../common/Form\";\nimport Loader from \"../common/Loader\";\nvar ReadOnlyDescription = styled.div.withConfig({\n  displayName: \"SetNoticePresenter__ReadOnlyDescription\",\n  componentId: \"ln0rkt-0\"\n})([\"\", \";position:absolute;top:0;left:0;width:100%;height:300px;overflow:auto;background:white;padding:15px;\"], function (props) {\n  return props.theme.whiteBox;\n});\n_c = ReadOnlyDescription;\nvar PreviewWrap = styled(ReadOnlyDescription).withConfig({\n  displayName: \"SetNoticePresenter__PreviewWrap\",\n  componentId: \"ln0rkt-1\"\n})([\"z-index:10;& > span{position:absolute;top:5px;right:5px;cursor:pointer;}\"]);\n_c2 = PreviewWrap;\n\nvar SetNoticePresenter = function SetNoticePresenter(_ref) {\n  var loading = _ref.loading,\n      setNoticeLoading = _ref.setNoticeLoading,\n      removeNoticeLoading = _ref.removeNoticeLoading,\n      action = _ref.action,\n      isMaster = _ref.isMaster,\n      title = _ref.title,\n      description = _ref.description,\n      mdDescription = _ref.mdDescription,\n      preview = _ref.preview,\n      onShowEdit = _ref.onShowEdit,\n      onPreview = _ref.onPreview,\n      onRefreshPreview = _ref.onRefreshPreview,\n      onClose = _ref.onClose,\n      onDelete = _ref.onDelete,\n      onSubmit = _ref.onSubmit;\n  return __jsx(Fragment, null, (loading || setNoticeLoading || removeNoticeLoading) && __jsx(Loader, null), __jsx(Modal, {\n    onHide: onClose,\n    show: true,\n    animation: false\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, null, action.code === \"readonly\" || action.code === \"modifiable\" ? title.value : \"\\uACF5\\uC9C0\\uC0AC\\uD56D \".concat(action.modalTitle))), __jsx(Modal.Body, null, __jsx(\"form\", {\n    onSubmit: onSubmit\n  }, __jsx(InputWrapper, null, (action.code === \"add\" || action.code === \"modify\") && __jsx(Fragment, null, __jsx(Label, {\n    htmlFor: \"title\",\n    val: title.value\n  }, \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\"), __jsx(Input, _extends({\n    placeholder: \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\",\n    name: \"title\",\n    required: true\n  }, title)))), __jsx(InputWrapper, null, __jsx(Label, {\n    htmlFor: \"description\",\n    val: description.value\n  }, \"\\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\"), __jsx(TextArea, _extends({\n    placeholder: \"\\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\",\n    name: \"description\",\n    required: true\n  }, description)), (action.code === \"readonly\" || action.code === \"modifiable\") && __jsx(ReadOnlyDescription, {\n    dangerouslySetInnerHTML: {\n      __html: mdDescription\n    },\n    className: \"markdown-body\"\n  }), preview && __jsx(PreviewWrap, null, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: preview\n    },\n    className: \"markdown-body\"\n  }), __jsx(\"span\", {\n    \"aria-hidden\": \"true\",\n    onClick: onRefreshPreview\n  }, \"\\xD7\"))))), __jsx(Modal.Footer, null, (action.code === \"readonly\" || action.code === \"modifiable\") && __jsx(Fragment, null, isMaster && __jsx(Button, {\n    variant: \"danger\",\n    onClick: onDelete\n  }, \"\\uC0AD\\uC81C\"), __jsx(Button, {\n    variant: \"info\",\n    onClick: isMaster ? onShowEdit : onClose\n  }, isMaster ? \"수정\" : \"확인\")), (action.code === \"modify\" || action.code === \"add\") && __jsx(Fragment, null, __jsx(Button, {\n    variant: \"info\",\n    onClick: preview ? onRefreshPreview : onPreview\n  }, preview ? \"미리보기 취소\" : \"미리보기\"), __jsx(Button, {\n    variant: \"primary\",\n    onSubmit: onSubmit\n  }, action.code === \"add\" ? \"등록\" : \"수정\")))));\n};\n\n_c3 = SetNoticePresenter;\nexport default SetNoticePresenter;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ReadOnlyDescription\");\n$RefreshReg$(_c2, \"PreviewWrap\");\n$RefreshReg$(_c3, \"SetNoticePresenter\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetNoticePresenter.tsx"],"names":["React","Fragment","styled","Modal","Button","Input","InputWrapper","Label","TextArea","Loader","ReadOnlyDescription","div","props","theme","whiteBox","PreviewWrap","SetNoticePresenter","loading","setNoticeLoading","removeNoticeLoading","action","isMaster","title","description","mdDescription","preview","onShowEdit","onPreview","onRefreshPreview","onClose","onDelete","onSubmit","code","value","modalTitle","__html"],"mappings":"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","sourcesContent":["import React, { Fragment, FC } from \"react\";\nimport styled from \"styled-components\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport Input from \"../common/Input\";\nimport { InputWrapper, Label, TextArea } from \"../common/Form\";\nimport { UseInputProps } from \"../../hooks\";\nimport Loader from \"../common/Loader\";\n\nconst ReadOnlyDescription = styled.div`\n  ${props => props.theme.whiteBox};\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 300px;\n  overflow: auto;\n  background: white;\n  padding: 15px;\n`;\n\nconst PreviewWrap = styled(ReadOnlyDescription)`\n  z-index: 10;\n\n  & > span {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    cursor: pointer;\n  }\n`;\n\ntype Props = {\n  loading: boolean;\n  setNoticeLoading: boolean;\n  removeNoticeLoading: boolean;\n  action: any;\n  isMaster: boolean;\n  title: UseInputProps;\n  description: UseInputProps;\n  mdDescription: string;\n  preview: string;\n  onShowEdit: any;\n  onPreview: any;\n  onRefreshPreview: any;\n  onClose: any;\n  onDelete: any;\n  onSubmit: any;\n};\n\nconst SetNoticePresenter: FC<Props> = ({\n  loading,\n  setNoticeLoading,\n  removeNoticeLoading,\n  action,\n  isMaster,\n  title,\n  description,\n  mdDescription,\n  preview,\n  onShowEdit,\n  onPreview,\n  onRefreshPreview,\n  onClose,\n  onDelete,\n  onSubmit\n}) => (\n  <Fragment>\n    {(loading || setNoticeLoading || removeNoticeLoading) && <Loader />}\n    <Modal onHide={onClose} show animation={false}>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          {action.code === \"readonly\" || action.code === \"modifiable\"\n            ? title.value\n            : `공지사항 ${action.modalTitle}`}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <form onSubmit={onSubmit}>\n          <InputWrapper>\n            {(action.code === \"add\" || action.code === \"modify\") && (\n              <Fragment>\n                <Label htmlFor=\"title\" val={title.value}>\n                  제목을 입력하세요.\n                </Label>\n                <Input\n                  placeholder=\"제목을 입력하세요.\"\n                  name=\"title\"\n                  required\n                  {...title}\n                />\n              </Fragment>\n            )}\n          </InputWrapper>\n          <InputWrapper>\n            <Label htmlFor=\"description\" val={description.value}>\n              내용을 입력하세요.\n            </Label>\n            <TextArea\n              placeholder=\"내용을 입력하세요.\"\n              name=\"description\"\n              required\n              {...description}\n            />\n            {(action.code === \"readonly\" || action.code === \"modifiable\") && (\n              <ReadOnlyDescription\n                dangerouslySetInnerHTML={{ __html: mdDescription }}\n                className=\"markdown-body\"\n              ></ReadOnlyDescription>\n            )}\n            {preview && (\n              <PreviewWrap>\n                <div\n                  dangerouslySetInnerHTML={{ __html: preview }}\n                  className=\"markdown-body\"\n                ></div>\n                <span aria-hidden=\"true\" onClick={onRefreshPreview}>\n                  ×\n                </span>\n              </PreviewWrap>\n            )}\n          </InputWrapper>\n        </form>\n      </Modal.Body>\n      <Modal.Footer>\n        {(action.code === \"readonly\" || action.code === \"modifiable\") && (\n          <Fragment>\n            {isMaster && (\n              <Button variant=\"danger\" onClick={onDelete}>\n                삭제\n              </Button>\n            )}\n            <Button variant=\"info\" onClick={isMaster ? onShowEdit : onClose}>\n              {isMaster ? \"수정\" : \"확인\"}\n            </Button>\n          </Fragment>\n        )}\n        {(action.code === \"modify\" || action.code === \"add\") && (\n          <Fragment>\n            <Button\n              variant=\"info\"\n              onClick={preview ? onRefreshPreview : onPreview}\n            >\n              {preview ? \"미리보기 취소\" : \"미리보기\"}\n            </Button>\n            <Button variant=\"primary\" onSubmit={onSubmit}>\n              {action.code === \"add\" ? \"등록\" : \"수정\"}\n            </Button>\n          </Fragment>\n        )}\n      </Modal.Footer>\n    </Modal>\n  </Fragment>\n);\n\nexport default SetNoticePresenter;\n"]},"metadata":{},"sourceType":"module"}