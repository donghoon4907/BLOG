{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport Router from \"next/router\";\nimport React, { useCallback, memo } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport styled from \"styled-components\";\nimport { keywordQuery } from \"../../graphql/search/query/keyword\";\nvar Container = styled.div.withConfig({\n  displayName: \"SearchResult__Container\",\n  componentId: \"sc-5fh9lp-0\"\n})([\"\", \";width:100%;position:absolute;display:flex;flex-direction:column;top:37px;left:0;height:auto;overflow:hidden;\"], function (props) {\n  return props.theme.whiteBox;\n});\n_c = Container;\nvar ContentType = styled.div.withConfig({\n  displayName: \"SearchResult__ContentType\",\n  componentId: \"sc-5fh9lp-1\"\n})([\"background:rgba(0,0,0,0.03);font-size:14px;padding:5px;border-bottom:\", \";\"], function (props) {\n  return props.theme.boxBorder;\n});\n_c2 = ContentType;\nvar Item = styled.li.withConfig({\n  displayName: \"SearchResult__Item\",\n  componentId: \"sc-5fh9lp-2\"\n})([\"display:flex;justify-content:flex-start align-items:center;padding:5px;font-size:12px;overflow:hidden;cursor:pointer;\"]);\nvar Title = styled.h3.withConfig({\n  displayName: \"SearchResult__Title\",\n  componentId: \"sc-5fh9lp-3\"\n})([\"width:240px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;\", \"{width:100px;}\"], function (props) {\n  return props.theme.tablet;\n});\n\nvar SearchResult = function SearchResult(_ref) {\n  _s();\n\n  var searchKeyword = _ref.searchKeyword,\n      setSearch = _ref.setSearch,\n      setSearchKeyword = _ref.setSearchKeyword;\n\n  var _useQuery = useQuery(keywordQuery, {\n    variables: {\n      searchKeyword: searchKeyword\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading;\n\n  var handleClickItem = useCallback(function (keyword) {\n    Router.push(\"/search?keyword=\".concat(keyword));\n    setSearch(keyword);\n    setSearchKeyword(\"\");\n  }, []); // if (loading || data.getSearchKeyword.length === 0) {\n  //   return <Fragment />;\n  // }\n\n  return __jsx(Container, null, __jsx(ContentType, null, \"\\uC5F0\\uAD00 \\uAC80\\uC0C9\\uC5B4\"), __jsx(\"ol\", null, __jsx(\"li\", null, \"test\")));\n};\n\n_s(SearchResult, \"uUIPETwFF5zqtQr4EZ5yUaPJrYM=\", false, function () {\n  return [useQuery];\n});\n\n_c3 = SearchResult;\nexport default _c4 = memo(SearchResult);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ContentType\");\n$RefreshReg$(_c3, \"SearchResult\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/common/SearchResult.tsx"],"names":["Router","React","useCallback","memo","useQuery","styled","keywordQuery","Container","div","props","theme","whiteBox","ContentType","boxBorder","Item","li","Title","h3","tablet","SearchResult","searchKeyword","setSearch","setSearchKeyword","variables","notifyOnNetworkStatusChange","data","loading","handleClickItem","keyword","push"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,IACEC,WADF,EAMEC,IANF,QAOO,OAPP;AAQA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,YAAT,QAA6B,oCAA7B;AAEA,IAAMC,SAAS,GAAGF,MAAM,CAACG,GAAV;AAAA;AAAA;AAAA,0HACX,UAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,KAAN,CAAYC,QAAhB;AAAA,CADM,CAAf;KAAMJ,S;AAYN,IAAMK,WAAW,GAAGP,MAAM,CAACG,GAAV;AAAA;AAAA;AAAA,mFAIE,UAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,KAAN,CAAYG,SAAhB;AAAA,CAJP,CAAjB;MAAMD,W;AAON,IAAME,IAAI,GAAGT,MAAM,CAACU,EAAV;AAAA;AAAA;AAAA,6HAAV;AAUA,IAAMC,KAAK,GAAGX,MAAM,CAACY,EAAV;AAAA;AAAA;AAAA,iGAMP,UAAAR,KAAK;AAAA,SAAIA,KAAK,CAACC,KAAN,CAAYQ,MAAhB;AAAA,CANE,CAAX;;AAiBA,IAAMC,YAAuB,GAAG,SAA1BA,YAA0B,OAI1B;AAAA;;AAAA,MAHJC,aAGI,QAHJA,aAGI;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADJC,gBACI,QADJA,gBACI;;AAAA,kBACsBlB,QAAQ,CAACE,YAAD,EAAe;AAC/CiB,IAAAA,SAAS,EAAE;AACTH,MAAAA,aAAa,EAAbA;AADS,KADoC;AAI/CI,IAAAA,2BAA2B,EAAE;AAJkB,GAAf,CAD9B;AAAA,MACIC,IADJ,aACIA,IADJ;AAAA,MACUC,OADV,aACUA,OADV;;AAQJ,MAAMC,eAAe,GAAGzB,WAAW,CAAC,UAAA0B,OAAO,EAAI;AAC7C5B,IAAAA,MAAM,CAAC6B,IAAP,2BAA+BD,OAA/B;AACAP,IAAAA,SAAS,CAACO,OAAD,CAAT;AACAN,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,GAJkC,EAIhC,EAJgC,CAAnC,CARI,CAcJ;AACA;AACA;;AAEA,SACE,MAAC,SAAD,QACE,MAAC,WAAD,0CADF,EAEE,kBACE,yBADF,CAFF,CADF;AAaD,CAnCD;;GAAMH,Y;UAKsBf,Q;;;MALtBe,Y;AAqCN,qBAAehB,IAAI,CAACgB,YAAD,CAAnB","sourcesContent":["import Router from \"next/router\";\nimport React, {\n  useCallback,\n  Fragment,\n  Dispatch,\n  SetStateAction,\n  FC,\n  memo\n} from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport styled from \"styled-components\";\nimport { keywordQuery } from \"../../graphql/search/query/keyword\";\n\nconst Container = styled.div`\n  ${props => props.theme.whiteBox};\n  width: 100%;\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  top: 37px;\n  left: 0;\n  height: auto;\n  overflow: hidden;\n`;\n\nconst ContentType = styled.div`\n  background: rgba(0, 0, 0, 0.03);\n  font-size: 14px;\n  padding: 5px;\n  border-bottom: ${props => props.theme.boxBorder};\n`;\n\nconst Item = styled.li`\n  display: flex;\n  justify-content: flex-start\n  align-items: center;\n  padding: 5px;\n  font-size: 12px;\n  overflow: hidden;\n  cursor: pointer;\n`;\n\nconst Title = styled.h3`\n  width: 240px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  ${props => props.theme.tablet} {\n    width: 100px;\n  }\n`;\n\ntype Props = {\n  searchKeyword: string;\n  setSearch: Dispatch<SetStateAction<string>>;\n  setSearchKeyword: Dispatch<SetStateAction<string>>;\n};\n\nconst SearchResult: FC<Props> = ({\n  searchKeyword,\n  setSearch,\n  setSearchKeyword\n}) => {\n  const { data, loading } = useQuery(keywordQuery, {\n    variables: {\n      searchKeyword\n    },\n    notifyOnNetworkStatusChange: true\n  });\n\n  const handleClickItem = useCallback(keyword => {\n    Router.push(`/search?keyword=${keyword}`);\n    setSearch(keyword);\n    setSearchKeyword(\"\");\n  }, []);\n\n  // if (loading || data.getSearchKeyword.length === 0) {\n  //   return <Fragment />;\n  // }\n\n  return (\n    <Container>\n      <ContentType>연관 검색어</ContentType>\n      <ol>\n        <li>test</li>\n        {/* {data.getSearchKeyword.map(({ id, keyword }) => (\n          <Item key={id} onClick={() => handleClickItem(keyword)}>\n            <Title>{keyword}</Title>\n          </Item>\n        ))} */}\n      </ol>\n    </Container>\n  );\n};\n\nexport default memo(SearchResult);\n"]},"metadata":{},"sourceType":"module"}