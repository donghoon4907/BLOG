{"ast":null,"code":"var _jsxFileName = \"/Users/idonghun/Desktop/vss/frontend/components/auth/SignUpContainer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useRef } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport SignUpPresenter from \"./SignUpPresenter\";\nimport { signUpMutation } from \"../../graphql/user/mutation/signup\";\n\nconst SignUpContainer = ({\n  setAction\n}) => {\n  const {\n    loading,\n    call\n  } = useLazyAxios();\n  const fileEl = useRef(null);\n  const confirmPwdEl = useRef(null);\n  const nickname = useInput(\"\");\n  const email = useInput(\"\");\n  const pwd = useInput(\"\");\n  const {\n    0: confirmPwd,\n    1: setConfirmPwd\n  } = useState(\"\");\n  const {\n    0: preview,\n    1: setPreview\n  } = useState(\"\");\n  const {\n    0: file,\n    1: setFile\n  } = useState(\"\");\n  const [signUp, {\n    loading: signUpLoading\n  }] = useMutation(signUpMutation);\n  const handleChangeConfirmPwd = useCallback(e => {\n    const {\n      value\n    } = e.target;\n    const node = confirmPwdEl.current;\n    setConfirmPwd(value);\n\n    if (pwd.value !== value) {\n      if (node) {\n        node.setCustomValidity(\"비밀번호가 일치하지 않습니다.\");\n      }\n    } else {\n      if (node) {\n        node.setCustomValidity(\"\");\n      }\n    }\n  }, [pwd.value]);\n  const handleChangePreview = useCallback(async e => {\n    const {\n      value,\n      files\n    } = e.target;\n    if (!value) return; // prevent cancel action\n\n    if (loading) return; // prevent same request\n\n    const [file] = files;\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const {\n      data,\n      error\n    } = await call({\n      method: \"post\",\n      url: `${process.env.BACKEND_API_PATH}/api/upload`,\n      data: formData,\n      headers: {\n        \"content-type\": \"multipart/form-data\"\n      }\n    });\n\n    if (data) {\n      const reader = new FileReader();\n\n      reader.onloadend = () => {\n        setPreview(reader.result);\n        setFile(data);\n      };\n\n      reader.readAsDataURL(file);\n    }\n\n    if (error) {\n      alert(\"썸네일 업로드 중 오류가 발생했습니다.\");\n    }\n  }, [loading]);\n  const handleClickUpload = useCallback(() => {\n    const node = fileEl.current;\n\n    if (node) {\n      node.click();\n    }\n  }, []);\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n    console.log(\"test\");\n\n    if (signUpLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"입력한 내용으로 회원가입 하시겠어요?\");\n\n    if (tf) {\n      try {\n        const {\n          data: {\n            addUser\n          }\n        } = await signUp({\n          variables: {\n            email: email.value,\n            pwd: pwd.value,\n            nickname: nickname.value,\n            file: file ? file : process.env.DEFAULT_AVATAR\n          }\n        });\n\n        if (addUser) {\n          setAction(\"login\");\n          alert(\"회원가입이 정상처리되었습니다.\");\n        }\n      } catch (error) {\n        const {\n          message\n        } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [email.value, pwd.value, nickname.value, file, signUpLoading]);\n  return __jsx(SignUpPresenter, {\n    loading: loading,\n    signUpLoading: signUpLoading,\n    nickname: nickname,\n    email: email,\n    pwd: pwd,\n    confirmPwd: confirmPwd,\n    preview: preview,\n    fileEl: fileEl,\n    confirmPwdEl: confirmPwdEl,\n    onChangePreview: handleChangePreview,\n    onChangeConfirmPwd: handleChangeConfirmPwd,\n    onClickUpload: handleClickUpload,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default SignUpContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/auth/SignUpContainer.tsx"],"names":["React","useState","useCallback","useRef","useMutation","useInput","useLazyAxios","SignUpPresenter","signUpMutation","SignUpContainer","setAction","loading","call","fileEl","confirmPwdEl","nickname","email","pwd","confirmPwd","setConfirmPwd","preview","setPreview","file","setFile","signUp","signUpLoading","handleChangeConfirmPwd","e","value","target","node","current","setCustomValidity","handleChangePreview","files","formData","FormData","append","data","error","method","url","process","env","BACKEND_API_PATH","headers","reader","FileReader","onloadend","result","readAsDataURL","alert","handleClickUpload","click","handleSubmit","preventDefault","console","log","tf","confirm","addUser","variables","DEFAULT_AVATAR","message","JSON","parse"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useCallback,\n  useRef,\n  FC,\n  FormEvent,\n  ChangeEvent\n} from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport SignUpPresenter from \"./SignUpPresenter\";\nimport { signUpMutation } from \"../../graphql/user/mutation/signup\";\n\ninterface Props {\n  setAction: any;\n}\n\nconst SignUpContainer: FC<Props> = ({ setAction }) => {\n  const { loading, call } = useLazyAxios();\n  const fileEl = useRef<HTMLInputElement>(null);\n  const confirmPwdEl = useRef<HTMLInputElement>(null);\n\n  const nickname = useInput(\"\");\n  const email = useInput(\"\");\n  const pwd = useInput(\"\");\n  const [confirmPwd, setConfirmPwd] = useState(\"\");\n  const [preview, setPreview] = useState<string>(\"\");\n  const [file, setFile] = useState<string>(\"\");\n\n  const [signUp, { loading: signUpLoading }] = useMutation(signUpMutation);\n\n  const handleChangeConfirmPwd = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      const { value } = e.target;\n      const node = confirmPwdEl.current;\n      setConfirmPwd(value);\n\n      if (pwd.value !== value) {\n        if (node) {\n          node.setCustomValidity(\"비밀번호가 일치하지 않습니다.\");\n        }\n      } else {\n        if (node) {\n          node.setCustomValidity(\"\");\n        }\n      }\n    },\n    [pwd.value]\n  );\n\n  const handleChangePreview = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      const { value, files } = e.target as any;\n      if (!value) return; // prevent cancel action\n      if (loading) return; // prevent same request\n\n      const [file] = files;\n\n      const formData = new FormData();\n      formData.append(\"file\", file);\n\n      const { data, error } = await call({\n        method: \"post\",\n        url: `${process.env.BACKEND_API_PATH}/api/upload`,\n        data: formData,\n        headers: { \"content-type\": \"multipart/form-data\" }\n      });\n\n      if (data) {\n        const reader = new FileReader();\n\n        reader.onloadend = () => {\n          setPreview(reader.result as string);\n          setFile(data);\n        };\n\n        reader.readAsDataURL(file);\n      }\n\n      if (error) {\n        alert(\"썸네일 업로드 중 오류가 발생했습니다.\");\n      }\n    },\n    [loading]\n  );\n\n  const handleClickUpload = useCallback(() => {\n    const node = fileEl.current;\n    if (node) {\n      node.click();\n    }\n  }, []);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      console.log(\"test\");\n      if (signUpLoading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n\n      const tf = confirm(\"입력한 내용으로 회원가입 하시겠어요?\");\n\n      if (tf) {\n        try {\n          const {\n            data: { addUser }\n          } = await signUp({\n            variables: {\n              email: email.value,\n              pwd: pwd.value,\n              nickname: nickname.value,\n              file: file ? file : process.env.DEFAULT_AVATAR\n            }\n          });\n          if (addUser) {\n            setAction(\"login\");\n            alert(\"회원가입이 정상처리되었습니다.\");\n          }\n        } catch (error) {\n          const { message } = JSON.parse(error.message);\n          alert(message);\n        }\n      }\n    },\n    [email.value, pwd.value, nickname.value, file, signUpLoading]\n  );\n\n  return (\n    <SignUpPresenter\n      loading={loading}\n      signUpLoading={signUpLoading}\n      nickname={nickname}\n      email={email}\n      pwd={pwd}\n      confirmPwd={confirmPwd}\n      preview={preview}\n      fileEl={fileEl}\n      confirmPwdEl={confirmPwdEl}\n      onChangePreview={handleChangePreview}\n      onChangeConfirmPwd={handleChangeConfirmPwd}\n      onClickUpload={handleClickUpload}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SignUpContainer;\n"]},"metadata":{},"sourceType":"module"}