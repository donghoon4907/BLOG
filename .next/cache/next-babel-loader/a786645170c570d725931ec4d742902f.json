{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport Router from \"next/router\";\nimport { useMutation } from \"@apollo/client\";\nimport PostPresenter from \"./PostPresenter\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport { likeMutation } from \"../../graphql/post/mutation/like\";\nimport { useVssDispatch, SET_POST_MODAL } from \"../../context\";\n\nvar PostContainer = function PostContainer(_ref) {\n  _s();\n\n  var id = _ref.id,\n      title = _ref.title,\n      description = _ref.description,\n      createdAt = _ref.createdAt,\n      user = _ref.user,\n      video = _ref.video,\n      isLiked = _ref.isLiked,\n      likeCount = _ref.likeCount,\n      isMyPost = _ref.isMyPost,\n      status = _ref.status,\n      room = _ref.room;\n  var dispatch = useVssDispatch();\n\n  var _useState = useState(isLiked),\n      ctrlIsLiked = _useState[0],\n      setCtrlIsLiked = _useState[1];\n\n  var _useState2 = useState(likeCount),\n      ctrlLikeCount = _useState2[0],\n      setCtrlLikeCount = _useState2[1];\n\n  var _useMutation = useMutation(likeMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      like = _useMutation2[0],\n      likeLoading = _useMutation2[1].loading;\n\n  var _useMutation3 = useMutation(removePostMutation),\n      _useMutation4 = _slicedToArray(_useMutation3, 2),\n      remove = _useMutation4[0],\n      removeLoading = _useMutation4[1].loading; // 포스트 채팅방 접근 이벤트\n\n\n  var handleRoom = useCallback(function () {\n    Router.push(\"/room/\".concat(room.id));\n  }, []); // 포스트 수정 이벤트\n\n  var hnadleUpdate = useCallback(function () {\n    dispatch({\n      type: SET_POST_MODAL,\n      payload: true\n    });\n  }, []); // 좋아요 / 좋아요 취소 이벤트\n\n  var handleLike = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _JSON$parse, message;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!likeLoading) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", alert(\"요청중입니다. 잠시만 기다려주세요.\"));\n\n          case 2:\n            setCtrlIsLiked(!ctrlIsLiked);\n            setCtrlLikeCount(ctrlIsLiked ? ctrlLikeCount - 1 : ctrlLikeCount + 1);\n            _context.prev = 4;\n            _context.next = 7;\n            return like({\n              variables: {\n                postId: id\n              }\n            });\n\n          case 7:\n            _context.next = 13;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](4);\n            _JSON$parse = JSON.parse(_context.t0.message), message = _JSON$parse.message;\n            alert(message);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 9]]);\n  })), [ctrlIsLiked, ctrlLikeCount, likeLoading]); // 삭제 이벤트\n\n  var handleDelete = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var tf, _yield$remove, deletePost, _JSON$parse2, message;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!removeLoading) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", alert(\"요청중입니다. 잠시만 기다려주세요.\"));\n\n          case 2:\n            tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n            if (!tf) {\n              _context2.next = 16;\n              break;\n            }\n\n            _context2.prev = 4;\n            _context2.next = 7;\n            return remove({\n              variables: {\n                postId: id\n              }\n            });\n\n          case 7:\n            _yield$remove = _context2.sent;\n            deletePost = _yield$remove.data.deletePost;\n\n            if (deletePost) {\n              alert(\"포스트가 삭제되었습니다.\");\n              window.location.reload();\n            }\n\n            _context2.next = 16;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](4);\n            _JSON$parse2 = JSON.parse(_context2.t0.message), message = _JSON$parse2.message;\n            alert(message);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 12]]);\n  })), [removeLoading]);\n  return __jsx(PostPresenter, {\n    title: title,\n    description: description,\n    status: status,\n    createdAt: createdAt,\n    user: user,\n    video: video,\n    isLiked: ctrlIsLiked,\n    likeCount: ctrlLikeCount,\n    isMyPost: isMyPost,\n    onClickLike: handleLike,\n    onClickRoom: handleRoom,\n    onClickDelete: handleDelete\n  });\n};\n\n_s(PostContainer, \"2Txhwa6zIhQO6+IJmm5dy984LoM=\", false, function () {\n  return [useVssDispatch, useMutation, useMutation];\n});\n\n_c = PostContainer;\nexport default PostContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/post/PostContainer.tsx"],"names":["React","useState","useCallback","Router","useMutation","PostPresenter","removePostMutation","likeMutation","useVssDispatch","SET_POST_MODAL","PostContainer","id","title","description","createdAt","user","video","isLiked","likeCount","isMyPost","status","room","dispatch","ctrlIsLiked","setCtrlIsLiked","ctrlLikeCount","setCtrlLikeCount","like","likeLoading","loading","remove","removeLoading","handleRoom","push","hnadleUpdate","type","payload","handleLike","alert","variables","postId","JSON","parse","message","handleDelete","tf","confirm","deletePost","data","window","location","reload"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, FC } from \"react\";\nimport Router from \"next/router\";\nimport { useMutation } from \"@apollo/client\";\nimport PostPresenter from \"./PostPresenter\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport { likeMutation } from \"../../graphql/post/mutation/like\";\nimport { useVssDispatch, SET_POST_MODAL } from \"../../context\";\n\nexport type PostProps = {\n  id: string;\n  title: string;\n  description: string;\n  video: any;\n  user: any;\n  likes: any;\n  createdAt: string;\n  updatedAt: string;\n  status: string;\n  isLiked: boolean;\n  likeCount: number;\n  isMyPost: boolean;\n  room: any;\n};\n\nconst PostContainer: FC<PostProps> = ({\n  id,\n  title,\n  description,\n  createdAt,\n  user,\n  video,\n  isLiked,\n  likeCount,\n  isMyPost,\n  status,\n  room\n}) => {\n  const dispatch = useVssDispatch();\n  const [ctrlIsLiked, setCtrlIsLiked] = useState(isLiked);\n  const [ctrlLikeCount, setCtrlLikeCount] = useState(likeCount);\n\n  const [like, { loading: likeLoading }] = useMutation(likeMutation);\n  const [remove, { loading: removeLoading }] = useMutation(removePostMutation);\n\n  // 포스트 채팅방 접근 이벤트\n  const handleRoom = useCallback(() => {\n    Router.push(`/room/${room.id}`);\n  }, []);\n\n  // 포스트 수정 이벤트\n  const hnadleUpdate = useCallback(() => {\n    dispatch({\n      type: SET_POST_MODAL,\n      payload: true\n    });\n  }, []);\n\n  // 좋아요 / 좋아요 취소 이벤트\n  const handleLike = useCallback(async () => {\n    if (likeLoading) {\n      return alert(\"요청중입니다. 잠시만 기다려주세요.\");\n    }\n\n    setCtrlIsLiked(!ctrlIsLiked);\n    setCtrlLikeCount(ctrlIsLiked ? ctrlLikeCount - 1 : ctrlLikeCount + 1);\n\n    try {\n      await like({\n        variables: { postId: id }\n      });\n    } catch (error) {\n      const { message } = JSON.parse(error.message);\n      alert(message);\n    }\n  }, [ctrlIsLiked, ctrlLikeCount, likeLoading]);\n\n  // 삭제 이벤트\n  const handleDelete = useCallback(async () => {\n    if (removeLoading) {\n      return alert(\"요청중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n    if (tf) {\n      try {\n        const {\n          data: { deletePost }\n        } = await remove({\n          variables: { postId: id }\n        });\n\n        if (deletePost) {\n          alert(\"포스트가 삭제되었습니다.\");\n          window.location.reload();\n        }\n      } catch (error) {\n        const { message } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [removeLoading]);\n\n  return (\n    <PostPresenter\n      title={title}\n      description={description}\n      status={status}\n      createdAt={createdAt}\n      user={user}\n      video={video}\n      isLiked={ctrlIsLiked}\n      likeCount={ctrlLikeCount}\n      isMyPost={isMyPost}\n      onClickLike={handleLike}\n      onClickRoom={handleRoom}\n      onClickDelete={handleDelete}\n    />\n  );\n};\n\nexport default PostContainer;\n"]},"metadata":{},"sourceType":"module"}