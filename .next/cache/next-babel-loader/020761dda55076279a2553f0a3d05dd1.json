{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport FeedPresenter from \"./FeedPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport { noticesQuery } from \"../../graphql/notice/query\";\nimport { useVssState, useVssDispatch, SHOW_NOTICE_MODAL } from \"../../context\";\n\nconst FeedContainer = () => {\n  const {\n    isMaster\n  } = useVssState();\n  const dispatch = useVssDispatch();\n  const recommandUserEl = useRef(null);\n  const {\n    data: posts,\n    loading,\n    fetchMore,\n    networkStatus\n  } = useQuery(postsQuery, {\n    variables: {\n      first: 10,\n      searchKeyword: \"test\"\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const {\n    data: notices\n  } = useQuery(noticesQuery, {\n    variables: {\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const {\n      scrollHeight,\n      clientHeight,\n      scrollTop\n    } = document.documentElement;\n\n    if (posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const handleAddNotice = useCallback(() => {\n    dispatch({\n      type: SHOW_NOTICE_MODAL,\n      action: \"add\",\n      actionText: \"등록\",\n      title: \"\",\n      description: \"\",\n      noticeId: \"\"\n    });\n  }, []);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [posts && posts.getPosts, loading]);\n  return __jsx(FeedPresenter, {\n    loading: loading,\n    loadingMorePosts: loadingMorePosts,\n    posts: posts.getPosts,\n    notices: notices.getNotices,\n    isMaster: isMaster,\n    onAddNotice: handleAddNotice,\n    recommandUserEl: recommandUserEl\n  });\n};\n\nexport default FeedContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/feed/FeedContainer.tsx"],"names":["React","useCallback","useEffect","useRef","useQuery","NetworkStatus","FeedPresenter","postsQuery","noticesQuery","useVssState","useVssDispatch","SHOW_NOTICE_MODAL","FeedContainer","isMaster","dispatch","recommandUserEl","data","posts","loading","fetchMore","networkStatus","variables","first","searchKeyword","notifyOnNetworkStatusChange","notices","loadingMorePosts","handleScrollFetchMore","scrollHeight","clientHeight","scrollTop","document","documentElement","getPosts","length","skip","handleAddNotice","type","action","actionText","title","description","noticeId","window","addEventListener","removeEventListener","getNotices"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,QAA0D,OAA1D;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,gBAAxC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,iBAAtC,QAA+D,eAA/D;;AAEA,MAAMC,aAAiB,GAAG,MAAM;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAeJ,WAAW,EAAhC;AACA,QAAMK,QAAQ,GAAGJ,cAAc,EAA/B;AAEA,QAAMK,eAAe,GAAGZ,MAAM,CAAC,IAAD,CAA9B;AAEA,QAAM;AAAEa,IAAAA,IAAI,EAAEC,KAAR;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,MAAqDhB,QAAQ,CACjEG,UADiE,EAEjE;AACEc,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,aAAa,EAAE;AAFN,KADb;AAKEC,IAAAA,2BAA2B,EAAE;AAL/B,GAFiE,CAAnE;AAWA,QAAM;AAAER,IAAAA,IAAI,EAAES;AAAR,MAAoBrB,QAAQ,CAACI,YAAD,EAAe;AAC/Ca,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AADE,KADoC;AAI/CE,IAAAA,2BAA2B,EAAE;AAJkB,GAAf,CAAlC;AAOA,QAAME,gBAAgB,GAAGN,aAAa,KAAKf,aAAa,CAACc,SAAzD;;AAEA,QAAMQ,qBAAqB,GAAG,MAAM;AAClC,QAAIT,OAAJ,EAAa;AACb,UAAM;AAAEU,MAAAA,YAAF;AAAgBC,MAAAA,YAAhB;AAA8BC,MAAAA;AAA9B,QAA4CC,QAAQ,CAACC,eAA3D;;AACA,QAAIf,KAAK,CAACgB,QAAV,EAAoB;AAClB,UAAIH,SAAS,GAAGD,YAAZ,KAA6BD,YAAjC,EAA+C;AAC7C,YAAIX,KAAK,CAACgB,QAAN,CAAeC,MAAf,GAAwB,EAAxB,KAA+B,CAAnC,EAAsC;AACpCf,UAAAA,SAAS,CAAC;AACRE,YAAAA,SAAS,EAAE;AACTc,cAAAA,IAAI,EAAElB,KAAK,CAACgB,QAAN,CAAeC;AADZ;AADH,WAAD,CAAT;AAKD;AACF;AACF;AACF,GAdD;;AAgBA,QAAME,eAAe,GAAGnC,WAAW,CAAC,MAAM;AACxCa,IAAAA,QAAQ,CAAC;AACPuB,MAAAA,IAAI,EAAE1B,iBADC;AAEP2B,MAAAA,MAAM,EAAE,KAFD;AAGPC,MAAAA,UAAU,EAAE,IAHL;AAIPC,MAAAA,KAAK,EAAE,EAJA;AAKPC,MAAAA,WAAW,EAAE,EALN;AAMPC,MAAAA,QAAQ,EAAE;AANH,KAAD,CAAR;AAQD,GATkC,EAShC,EATgC,CAAnC;AAWAxC,EAAAA,SAAS,CAAC,MAAM;AACdyC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCjB,qBAAlC;AACA,WAAO,MAAMgB,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqClB,qBAArC,CAAb;AACD,GAHQ,EAGN,CAACV,KAAK,IAAIA,KAAK,CAACgB,QAAhB,EAA0Bf,OAA1B,CAHM,CAAT;AAKA,SACE,MAAC,aAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,gBAAgB,EAAEQ,gBAFpB;AAGE,IAAA,KAAK,EAAET,KAAK,CAACgB,QAHf;AAIE,IAAA,OAAO,EAAER,OAAO,CAACqB,UAJnB;AAKE,IAAA,QAAQ,EAAEjC,QALZ;AAME,IAAA,WAAW,EAAEuB,eANf;AAOE,IAAA,eAAe,EAAErB;AAPnB,IADF;AAWD,CArED;;AAuEA,eAAeH,aAAf","sourcesContent":["import React, { useCallback, useEffect, useRef, FC } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport FeedPresenter from \"./FeedPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport { noticesQuery } from \"../../graphql/notice/query\";\nimport { useVssState, useVssDispatch, SHOW_NOTICE_MODAL } from \"../../context\";\n\nconst FeedContainer: FC = () => {\n  const { isMaster } = useVssState();\n  const dispatch = useVssDispatch();\n\n  const recommandUserEl = useRef(null);\n\n  const { data: posts, loading, fetchMore, networkStatus } = useQuery(\n    postsQuery,\n    {\n      variables: {\n        first: 10,\n        searchKeyword: \"test\"\n      },\n      notifyOnNetworkStatusChange: true\n    }\n  );\n\n  const { data: notices } = useQuery(noticesQuery, {\n    variables: {\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  });\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const handleAddNotice = useCallback(() => {\n    dispatch({\n      type: SHOW_NOTICE_MODAL,\n      action: \"add\",\n      actionText: \"등록\",\n      title: \"\",\n      description: \"\",\n      noticeId: \"\"\n    });\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [posts && posts.getPosts, loading]);\n\n  return (\n    <FeedPresenter\n      loading={loading}\n      loadingMorePosts={loadingMorePosts}\n      posts={posts.getPosts}\n      notices={notices.getNotices}\n      isMaster={isMaster}\n      onAddNotice={handleAddNotice}\n      recommandUserEl={recommandUserEl}\n    />\n  );\n};\n\nexport default FeedContainer;\n"]},"metadata":{},"sourceType":"module"}