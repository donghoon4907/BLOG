{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useRef } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport axios from \"axios\";\nimport { addPostMutation } from \"../../graphql/post/mutation/add\";\nimport { updatePostMutation } from \"../../graphql/post/mutation/update\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport SetPostPresenter from \"./SetPostPresenter\";\nimport { useInput } from \"../../hooks\";\nimport { useVssDispatch, SET_ADDPOST_MODAL } from \"../../context\";\n\nvar SetPostContainer = function SetPostContainer(_ref) {\n  _s();\n\n  var title = _ref.title,\n      description = _ref.description,\n      status = _ref.status,\n      postId = _ref.postId,\n      url = _ref.url;\n  var dispatch = useVssDispatch();\n\n  var _useState = useState(postId ? \"수정\" : \"영상 업로드\"),\n      header = _useState[0],\n      setHeader = _useState[1];\n\n  var fileEl = useRef(null);\n  var modalTitle = useInput(title || \"\");\n  var modalDescription = useInput(description || \"\");\n  var modalStatus = useInput(status || \"PUBLIC\");\n\n  var _useState2 = useState(postId ? 100 : 0),\n      progress = _useState2[0],\n      setProgress = _useState2[1];\n\n  var _useState3 = useState(url ? url : \"\"),\n      file = _useState3[0],\n      setFile = _useState3[1];\n\n  var _useMutation = useMutation(postId ? updatePostMutation : addPostMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      set = _useMutation2[0],\n      setPostLoading = _useMutation2[1].loading;\n\n  var _useMutation3 = useMutation(removePostMutation),\n      _useMutation4 = _slicedToArray(_useMutation3, 2),\n      remove = _useMutation4[0],\n      removePostLoading = _useMutation4[1].loading;\n\n  var handleClickFile = useCallback(function () {\n    var node = fileEl.current;\n\n    if (node) {\n      node.click();\n    }\n  }, []);\n  var handleChangeFile = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var files, formData, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (e.target.value) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              // cancel select file\n              files = e.target.files;\n              formData = new FormData();\n              formData.append(\"file\", files[0]);\n              _context.next = 7;\n              return axios.post(\"\".concat(process.env.BACKEND_API_PATH, \"/api/upload\"), formData, {\n                onUploadProgress: function onUploadProgress(_ref3) {\n                  var lengthComputable = _ref3.lengthComputable,\n                      loaded = _ref3.loaded,\n                      total = _ref3.total;\n\n                  if (lengthComputable) {\n                    setProgress(Math.floor(loaded / total * 100));\n                  }\n                }\n              });\n\n            case 7:\n              response = _context.sent;\n\n              if (response.data) {\n                setFile(response.data);\n                setHeader(\"등록\");\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), []);\n  var handleSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var tf, _yield$set, _yield$set$data, addPost, updatePost, _JSON$parse, message;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              e.preventDefault();\n\n              if (!setPostLoading) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", alert(\"요청 중입니다. 잠시만 기다려주세요.\"));\n\n            case 3:\n              console.log(modalTitle.value);\n              tf = confirm(\"\\uC785\\uB825\\uD55C \\uB0B4\\uC6A9\\uC73C\\uB85C \".concat(postId ? \"수정\" : \"등록\", \"\\uD558\\uC2DC\\uACA0\\uC5B4\\uC694?\"));\n\n              if (!tf) {\n                _context2.next = 20;\n                break;\n              }\n\n              _context2.prev = 6;\n              _context2.next = 9;\n              return set({\n                variables: {\n                  postId: postId,\n                  title: modalTitle.value,\n                  description: modalDescription.value,\n                  status: modalStatus.value,\n                  file: file\n                }\n              });\n\n            case 9:\n              _yield$set = _context2.sent;\n              _yield$set$data = _yield$set.data;\n              addPost = _yield$set$data.addPost;\n              updatePost = _yield$set$data.updatePost;\n\n              if (addPost || updatePost) {\n                alert(\"\\uD3EC\\uC2A4\\uD2B8\\uAC00 \".concat(postId ? \"수정\" : \"등록\", \" \\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"));\n                location.reload();\n              }\n\n              _context2.next = 20;\n              break;\n\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](6);\n              _JSON$parse = JSON.parse(_context2.t0.message), message = _JSON$parse.message;\n              alert(message);\n\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[6, 16]]);\n    }));\n\n    return function (_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [modalTitle.value, modalDescription.value, modalStatus.value, file, setPostLoading]);\n  var handleClose = useCallback(function () {\n    dispatch({\n      type: SET_ADDPOST_MODAL,\n      payload: false\n    });\n  }, []);\n  return __jsx(SetPostPresenter, {\n    loading: setPostLoading,\n    header: header,\n    title: modalTitle,\n    description: modalDescription,\n    status: modalStatus,\n    progress: progress,\n    file: file,\n    fileEl: fileEl,\n    onClickFile: handleClickFile,\n    onChangeFile: handleChangeFile,\n    onClose: handleClose,\n    onSubmit: handleSubmit\n  });\n};\n\n_s(SetPostContainer, \"/k9hMsM4RqwattPZzSWRn1JmKJ4=\", false, function () {\n  return [useVssDispatch, useInput, useInput, useInput, useMutation, useMutation];\n});\n\n_c = SetPostContainer;\nexport default SetPostContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetPostContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetPostContainer.tsx"],"names":["React","useCallback","useState","useRef","useMutation","axios","addPostMutation","updatePostMutation","removePostMutation","SetPostPresenter","useInput","useVssDispatch","SET_ADDPOST_MODAL","SetPostContainer","title","description","status","postId","url","dispatch","header","setHeader","fileEl","modalTitle","modalDescription","modalStatus","progress","setProgress","file","setFile","set","setPostLoading","loading","remove","removePostLoading","handleClickFile","node","current","click","handleChangeFile","e","target","value","files","formData","FormData","append","post","process","env","BACKEND_API_PATH","onUploadProgress","lengthComputable","loaded","total","Math","floor","response","data","handleSubmit","preventDefault","alert","console","log","tf","confirm","variables","addPost","updatePost","location","reload","JSON","parse","message","handleClose","type","payload"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, FC, useRef, FormEvent } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport axios from \"axios\";\nimport { addPostMutation } from \"../../graphql/post/mutation/add\";\nimport { updatePostMutation } from \"../../graphql/post/mutation/update\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport SetPostPresenter from \"./SetPostPresenter\";\nimport { useInput } from \"../../hooks\";\nimport { useVssDispatch, SET_ADDPOST_MODAL } from \"../../context\";\n\ntype Props = {\n  title?: string;\n  description?: string;\n  status?: string;\n  postId?: string;\n  url?: string;\n};\n\nconst SetPostContainer: FC<Props> = ({\n  title,\n  description,\n  status,\n  postId,\n  url\n}) => {\n  const dispatch = useVssDispatch();\n\n  const [header, setHeader] = useState(postId ? \"수정\" : \"영상 업로드\");\n\n  const fileEl = useRef<HTMLInputElement>(null);\n\n  const modalTitle = useInput(title || \"\");\n  const modalDescription = useInput(description || \"\");\n  const modalStatus = useInput(status || \"PUBLIC\");\n  const [progress, setProgress] = useState<number>(postId ? 100 : 0);\n  const [file, setFile] = useState<string>(url ? url : \"\");\n\n  const [set, { loading: setPostLoading }] = useMutation(\n    postId ? updatePostMutation : addPostMutation\n  );\n\n  const [remove, { loading: removePostLoading }] = useMutation(\n    removePostMutation\n  );\n\n  const handleClickFile = useCallback(() => {\n    const node = fileEl.current;\n    if (node) {\n      node.click();\n    }\n  }, []);\n\n  const handleChangeFile = useCallback(async e => {\n    if (!e.target.value) return; // cancel select file\n\n    const { files } = e.target;\n\n    const formData = new FormData();\n    formData.append(\"file\", files[0]);\n\n    const response = await axios.post(\n      `${process.env.BACKEND_API_PATH}/api/upload`,\n      formData,\n      {\n        onUploadProgress: ({ lengthComputable, loaded, total }) => {\n          if (lengthComputable) {\n            setProgress(Math.floor((loaded / total) * 100));\n          }\n        }\n      }\n    );\n    if (response.data) {\n      setFile(response.data);\n      setHeader(\"등록\");\n    }\n  }, []);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (setPostLoading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n\n      console.log(modalTitle.value);\n      const tf = confirm(\n        `입력한 내용으로 ${postId ? \"수정\" : \"등록\"}하시겠어요?`\n      );\n\n      if (tf) {\n        try {\n          const {\n            data: { addPost, updatePost }\n          } = await set({\n            variables: {\n              postId,\n              title: modalTitle.value,\n              description: modalDescription.value,\n              status: modalStatus.value,\n              file\n            }\n          });\n          if (addPost || updatePost) {\n            alert(`포스트가 ${postId ? \"수정\" : \"등록\"} 되었습니다.`);\n            location.reload();\n          }\n        } catch (error) {\n          const { message } = JSON.parse(error.message);\n          alert(message);\n        }\n      }\n    },\n    [\n      modalTitle.value,\n      modalDescription.value,\n      modalStatus.value,\n      file,\n      setPostLoading\n    ]\n  );\n\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_ADDPOST_MODAL,\n      payload: false\n    });\n  }, []);\n\n  return (\n    <SetPostPresenter\n      loading={setPostLoading}\n      header={header}\n      title={modalTitle}\n      description={modalDescription}\n      status={modalStatus}\n      progress={progress}\n      file={file}\n      fileEl={fileEl}\n      onClickFile={handleClickFile}\n      onChangeFile={handleChangeFile}\n      onClose={handleClose}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SetPostContainer;\n"]},"metadata":{},"sourceType":"module"}