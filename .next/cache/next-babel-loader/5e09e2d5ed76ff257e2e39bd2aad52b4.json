{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/idonghun/Desktop/vss/frontend/pages/search/[...keyword].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../../lib/apollo\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport { useVssDispatch, SET_ME } from \"../../context\";\nimport Layout from \"../../components/common/Layout\";\nimport Section from \"../../components/common/Section\";\nimport SearchPost from \"../../components/search/SearchPostContainer\";\nimport SearchBar from \"../../components/search/SearchBar\";\nimport SearchTag from \"../../components/search/SearchTag\";\n\nvar Keyword = function Keyword() {\n  _s();\n\n  var dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    onCompleted: function onCompleted(_ref) {\n      var getMyProfile = _ref.getMyProfile;\n      var id = getMyProfile.id,\n          nickname = getMyProfile.nickname,\n          email = getMyProfile.email,\n          avatar = getMyProfile.avatar,\n          isMaster = getMyProfile.isMaster;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname: nickname,\n        email: email,\n        avatar: avatar,\n        isMaster: isMaster\n      });\n    }\n  });\n  return __jsx(Layout, {\n    title: \"\\uAC80\\uC0C9\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(Section, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(SearchBar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), __jsx(SearchTag, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), __jsx(SearchPost, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(Keyword, \"jV7g94KRg7WDCZmKxPP9DnOJQYM=\", false, function () {\n  return [useVssDispatch, useQuery];\n});\n\n_c = Keyword;\n\nKeyword.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var query, variables, apolloClient;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref2.query;\n            variables = {\n              first: 10\n            };\n            query.keyword.forEach(function (v) {\n              var splitQuery = v.split(\"=\");\n              variables[splitQuery[0]] = splitQuery[1];\n            });\n            apolloClient = initializeApollo();\n            _context.next = 6;\n            return apolloClient.query({\n              query: postsQuery,\n              variables: variables\n            });\n\n          case 6:\n            return _context.abrupt(\"return\", {\n              initialApolloState: apolloClient.cache.extract()\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Keyword;\n\nvar _c;\n\n$RefreshReg$(_c, \"Keyword\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search/[...keyword].tsx"],"names":["React","useQuery","initializeApollo","meQuery","postsQuery","useVssDispatch","SET_ME","Layout","Section","SearchPost","SearchBar","SearchTag","Keyword","dispatch","onCompleted","getMyProfile","id","nickname","email","avatar","isMaster","type","userId","getInitialProps","query","variables","first","keyword","forEach","v","splitQuery","split","apolloClient","initialApolloState","cache","extract"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,eAAvC;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,UAAP,MAAuB,6CAAvB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;;AAEA,IAAMC,OAAiB,GAAG,SAApBA,OAAoB,GAAM;AAAA;;AAC9B,MAAMC,QAAQ,GAAGR,cAAc,EAA/B;AACAJ,EAAAA,QAAQ,CAACE,OAAD,EAAU;AAChBW,IAAAA,WAAW,EAAE,2BAAsB;AAAA,UAAnBC,YAAmB,QAAnBA,YAAmB;AAAA,UACzBC,EADyB,GACiBD,YADjB,CACzBC,EADyB;AAAA,UACrBC,QADqB,GACiBF,YADjB,CACrBE,QADqB;AAAA,UACXC,KADW,GACiBH,YADjB,CACXG,KADW;AAAA,UACJC,MADI,GACiBJ,YADjB,CACJI,MADI;AAAA,UACIC,QADJ,GACiBL,YADjB,CACIK,QADJ;AAEjCP,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAEf,MADC;AAEPgB,QAAAA,MAAM,EAAEN,EAFD;AAGPC,QAAAA,QAAQ,EAARA,QAHO;AAIPC,QAAAA,KAAK,EAALA,KAJO;AAKPC,QAAAA,MAAM,EAANA,MALO;AAMPC,QAAAA,QAAQ,EAARA;AANO,OAAD,CAAR;AAQD;AAXe,GAAV,CAAR;AAaA,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,CADF;AASD,CAxBD;;GAAMR,O;UACaP,c,EACjBJ,Q;;;KAFIW,O;;AA0BNA,OAAO,CAACW,eAAR;AAAA,uEAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,KAAT,SAASA,KAAT;AAClBC,YAAAA,SADkB,GACN;AAChBC,cAAAA,KAAK,EAAE;AADS,aADM;AAKvBF,YAAAA,KAAK,CAACG,OAAP,CAAuBC,OAAvB,CAA+B,UAAAC,CAAC,EAAI;AAClC,kBAAMC,UAAU,GAAGD,CAAC,CAACE,KAAF,CAAQ,GAAR,CAAnB;AACAN,cAAAA,SAAS,CAACK,UAAU,CAAC,CAAD,CAAX,CAAT,GAA2BA,UAAU,CAAC,CAAD,CAArC;AACD,aAHD;AAKME,YAAAA,YAVkB,GAUH9B,gBAAgB,EAVb;AAAA;AAAA,mBAWlB8B,YAAY,CAACR,KAAb,CAAmB;AACvBA,cAAAA,KAAK,EAAEpB,UADgB;AAEvBqB,cAAAA,SAAS,EAATA;AAFuB,aAAnB,CAXkB;;AAAA;AAAA,6CAgBjB;AACLQ,cAAAA,kBAAkB,EAAED,YAAY,CAACE,KAAb,CAAmBC,OAAnB;AADf,aAhBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AAqBA,eAAevB,OAAf","sourcesContent":["import React from \"react\";\nimport { NextPage } from \"next\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../../lib/apollo\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport { useVssDispatch, SET_ME } from \"../../context\";\nimport Layout from \"../../components/common/Layout\";\nimport Section from \"../../components/common/Section\";\nimport SearchPost from \"../../components/search/SearchPostContainer\";\nimport SearchBar from \"../../components/search/SearchBar\";\nimport SearchTag from \"../../components/search/SearchTag\";\n\nconst Keyword: NextPage = () => {\n  const dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    onCompleted: ({ getMyProfile }) => {\n      const { id, nickname, email, avatar, isMaster } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n  return (\n    <Layout title=\"검색\">\n      <Section>\n        <SearchBar />\n        <SearchTag />\n        <SearchPost />\n      </Section>\n    </Layout>\n  );\n};\n\nKeyword.getInitialProps = async ({ query }) => {\n  const variables = {\n    first: 10\n  };\n\n  (query.keyword as any).forEach(v => {\n    const splitQuery = v.split(\"=\");\n    variables[splitQuery[0]] = splitQuery[1];\n  });\n\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: postsQuery,\n    variables\n  });\n\n  return {\n    initialApolloState: apolloClient.cache.extract()\n  };\n};\n\nexport default Keyword;\n"]},"metadata":{},"sourceType":"module"}