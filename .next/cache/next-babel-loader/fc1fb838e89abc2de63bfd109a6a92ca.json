{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\nimport { useVssDispatch, HIDE_LOGIN_MODAL, SET_ME } from \"../../context\";\n\nvar SignInContainer = function SignInContainer() {\n  _s();\n\n  var dispatch = useVssDispatch();\n\n  var _useMutation = useMutation(logInMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      login = _useMutation2[0],\n      loading = _useMutation2[1].loading;\n\n  var email = useInput(\"\");\n  var pwd = useInput(\"\");\n  var handleSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _yield$login, logIn, token, id, nickname, _email, avatar, isMaster, _JSON$parse, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n\n              if (!loading) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", alert(\"요청 중입니다. 잠시만 기다려주세요.\"));\n\n            case 3:\n              _context.prev = 3;\n              _context.next = 6;\n              return login({\n                variables: {\n                  email: email.value,\n                  pwd: pwd.value\n                }\n              });\n\n            case 6:\n              _yield$login = _context.sent;\n              logIn = _yield$login.data.logIn;\n\n              if (logIn) {\n                token = logIn.token, id = logIn.id, nickname = logIn.nickname, _email = logIn.email, avatar = logIn.avatar, isMaster = logIn.isMaster;\n                setAccessToken(token);\n                dispatch({\n                  type: SET_ME,\n                  userId: id,\n                  nickname: nickname,\n                  email: _email,\n                  avatar: avatar,\n                  isMaster: isMaster\n                });\n                dispatch({\n                  type: HIDE_LOGIN_MODAL\n                });\n              }\n\n              _context.next = 15;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](3);\n              _JSON$parse = JSON.parse(_context.t0.message), message = _JSON$parse.message;\n              alert(message);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 11]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [email.value, pwd.value, loading]);\n  return __jsx(SignInPresenter, {\n    loading: loading,\n    email: email,\n    pwd: pwd,\n    onSubmit: handleSubmit\n  });\n};\n\n_s(SignInContainer, \"DlXZzcpHLqmnWuAY/ghuKTV/FMs=\", false, function () {\n  return [useVssDispatch, useMutation, useInput, useInput];\n});\n\n_c = SignInContainer;\nexport default SignInContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignInContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/auth/SignInContainer.tsx"],"names":["React","useCallback","useMutation","useInput","logInMutation","SignInPresenter","setAccessToken","useVssDispatch","HIDE_LOGIN_MODAL","SET_ME","SignInContainer","dispatch","login","loading","email","pwd","handleSubmit","e","preventDefault","alert","variables","value","logIn","data","token","id","nickname","avatar","isMaster","type","userId","JSON","parse","message"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAkD,OAAlD;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,cAAT,EAAyBC,gBAAzB,EAA2CC,MAA3C,QAAyD,eAAzD;;AAEA,IAAMC,eAAmB,GAAG,SAAtBA,eAAsB,GAAM;AAAA;;AAChC,MAAMC,QAAQ,GAAGJ,cAAc,EAA/B;;AADgC,qBAEHL,WAAW,CAACE,aAAD,CAFR;AAAA;AAAA,MAEzBQ,KAFyB;AAAA,MAEhBC,OAFgB,oBAEhBA,OAFgB;;AAIhC,MAAMC,KAAK,GAAGX,QAAQ,CAAC,EAAD,CAAtB;AACA,MAAMY,GAAG,GAAGZ,QAAQ,CAAC,EAAD,CAApB;AAEA,MAAMa,YAAY,GAAGf,WAAW;AAAA,wEAC9B,iBAAOgB,CAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEA,cAAAA,CAAC,CAACC,cAAF;;AADF,mBAEML,OAFN;AAAA;AAAA;AAAA;;AAAA,+CAGWM,KAAK,CAAC,sBAAD,CAHhB;;AAAA;AAAA;AAAA;AAAA,qBAQcP,KAAK,CAAC;AACdQ,gBAAAA,SAAS,EAAE;AAAEN,kBAAAA,KAAK,EAAEA,KAAK,CAACO,KAAf;AAAsBN,kBAAAA,GAAG,EAAEA,GAAG,CAACM;AAA/B;AADG,eAAD,CARnB;;AAAA;AAAA;AAOcC,cAAAA,KAPd,gBAOMC,IAPN,CAOcD,KAPd;;AAWI,kBAAIA,KAAJ,EAAW;AACDE,gBAAAA,KADC,GACgDF,KADhD,CACDE,KADC,EACMC,EADN,GACgDH,KADhD,CACMG,EADN,EACUC,QADV,GACgDJ,KADhD,CACUI,QADV,EACoBZ,MADpB,GACgDQ,KADhD,CACoBR,KADpB,EAC2Ba,MAD3B,GACgDL,KADhD,CAC2BK,MAD3B,EACmCC,QADnC,GACgDN,KADhD,CACmCM,QADnC;AAETtB,gBAAAA,cAAc,CAACkB,KAAD,CAAd;AACAb,gBAAAA,QAAQ,CAAC;AACPkB,kBAAAA,IAAI,EAAEpB,MADC;AAEPqB,kBAAAA,MAAM,EAAEL,EAFD;AAGPC,kBAAAA,QAAQ,EAARA,QAHO;AAIPZ,kBAAAA,KAAK,EAALA,MAJO;AAKPa,kBAAAA,MAAM,EAANA,MALO;AAMPC,kBAAAA,QAAQ,EAARA;AANO,iBAAD,CAAR;AAQAjB,gBAAAA,QAAQ,CAAC;AACPkB,kBAAAA,IAAI,EAAErB;AADC,iBAAD,CAAR;AAGD;;AAzBL;AAAA;;AAAA;AAAA;AAAA;AAAA,4BA2BwBuB,IAAI,CAACC,KAAL,CAAW,YAAMC,OAAjB,CA3BxB,EA2BYA,OA3BZ,eA2BYA,OA3BZ;AA4BId,cAAAA,KAAK,CAACc,OAAD,CAAL;;AA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD8B;;AAAA;AAAA;AAAA;AAAA,OAgC9B,CAACnB,KAAK,CAACO,KAAP,EAAcN,GAAG,CAACM,KAAlB,EAAyBR,OAAzB,CAhC8B,CAAhC;AAmCA,SACE,MAAC,eAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,GAAG,EAAEC,GAHP;AAIE,IAAA,QAAQ,EAAEC;AAJZ,IADF;AAQD,CAlDD;;GAAMN,e;UACaH,c,EACYL,W,EAEfC,Q,EACFA,Q;;;KALRO,e;AAoDN,eAAeA,eAAf","sourcesContent":["import React, { useCallback, FormEvent, FC } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\nimport { useVssDispatch, HIDE_LOGIN_MODAL, SET_ME } from \"../../context\";\n\nconst SignInContainer: FC = () => {\n  const dispatch = useVssDispatch();\n  const [login, { loading }] = useMutation(logInMutation);\n\n  const email = useInput(\"\");\n  const pwd = useInput(\"\");\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (loading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n      try {\n        const {\n          data: { logIn }\n        } = await login({\n          variables: { email: email.value, pwd: pwd.value }\n        });\n        if (logIn) {\n          const { token, id, nickname, email, avatar, isMaster } = logIn;\n          setAccessToken(token);\n          dispatch({\n            type: SET_ME,\n            userId: id,\n            nickname,\n            email,\n            avatar,\n            isMaster\n          });\n          dispatch({\n            type: HIDE_LOGIN_MODAL\n          });\n        }\n      } catch (error) {\n        const { message } = JSON.parse(error.message);\n        alert(message);\n      }\n    },\n    [email.value, pwd.value, loading]\n  );\n\n  return (\n    <SignInPresenter\n      loading={loading}\n      email={email}\n      pwd={pwd}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SignInContainer;\n"]},"metadata":{},"sourceType":"module"}