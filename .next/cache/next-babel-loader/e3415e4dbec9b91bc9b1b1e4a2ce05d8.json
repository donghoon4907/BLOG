{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useRef } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport axios from \"axios\";\nimport { addPostMutation } from \"../../graphql/post/mutation/add\";\nimport { updatePostMutation } from \"../../graphql/post/mutation/update\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport SetPostPresenter from \"./SetPostPresenter\";\nimport { useInput } from \"../../hooks\";\nimport { useVssDispatch, SET_ADDPOST_MODAL } from \"../../context\";\n\nconst SetPostContainer = ({\n  title,\n  description,\n  status,\n  postId,\n  url\n}) => {\n  const dispatch = useVssDispatch();\n  const fileEl = useRef(null);\n  const {\n    0: header,\n    1: setHeader\n  } = useState(postId ? \"영상 업로드\" : \"포스트 수정\");\n  const modalTitle = useInput(title || \"\");\n  const modalDescription = useInput(description || \"\");\n  const modalStatus = useInput(status || \"PUBLIC\");\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(postId ? 0 : 100);\n  const {\n    0: file,\n    1: setFile\n  } = useState(\"\");\n  const [set, {\n    loading: setPostLoading\n  }] = useMutation(postId ? updatePostMutation : addPostMutation);\n  const [remove, {\n    loading: removePostLoading\n  }] = useMutation(removePostMutation);\n  const handleClickFile = useCallback(() => {\n    const node = fileEl.current;\n\n    if (node) {\n      node.click();\n    }\n  }, []);\n  const handleChangeFile = useCallback(async e => {\n    if (!e.target.value) return; // cancel select file\n\n    const {\n      files\n    } = e.target;\n    const formData = new FormData();\n    formData.append(\"file\", files[0]);\n    const response = await axios.post(`${process.env.BACKEND_API_PATH}/api/upload`, formData, {\n      onUploadProgress: ({\n        lengthComputable,\n        loaded,\n        total\n      }) => {\n        if (lengthComputable) {\n          setProgress(Math.floor(loaded / total * 100));\n        }\n      }\n    });\n\n    if (response.data) {\n      setFile(response.data);\n    }\n  }, []);\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n    if (setPostLoading) return;\n    if (!file) return alert(\"영상을 선택하지 않았거나 업로드 진행 중입니다.\");\n    if (progress > 0 && progress < 100) return alert(\"업로드 진행 중입니다.\");\n    const {\n      data: {\n        addPost,\n        updatePost\n      }\n    } = await set({\n      variables: {\n        postId,\n        title,\n        description,\n        status,\n        file\n      }\n    });\n\n    if (addPost || updatePost) {\n      alert(`포스트가 ${postId === \"new\" ? \"등록\" : \"수정\"} 되었습니다.`);\n\n      if (postId === \"new\") {\n        dispatch({\n          type: SET_ADDPOST_MODAL,\n          payload: false\n        });\n      }\n    } else {\n      alert(\"요청 중 오류가 발생했습니다.\");\n    }\n  }, [title, description, status, file, setPostLoading]);\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_ADDPOST_MODAL,\n      payload: false\n    });\n  }, []);\n  return __jsx(SetPostPresenter, {\n    loading: setPostLoading,\n    header: header,\n    title: modalTitle,\n    description: modalDescription,\n    status: modalStatus,\n    progress: progress,\n    fileEl: fileEl,\n    onClickFile: handleClickFile,\n    onChangeFile: handleChangeFile,\n    onClose: handleClose,\n    onSubmit: handleSubmit\n  });\n};\n\nexport default SetPostContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetPostContainer.tsx"],"names":["React","useCallback","useState","useRef","useMutation","axios","addPostMutation","updatePostMutation","removePostMutation","SetPostPresenter","useInput","useVssDispatch","SET_ADDPOST_MODAL","SetPostContainer","title","description","status","postId","url","dispatch","fileEl","header","setHeader","modalTitle","modalDescription","modalStatus","progress","setProgress","file","setFile","set","loading","setPostLoading","remove","removePostLoading","handleClickFile","node","current","click","handleChangeFile","e","target","value","files","formData","FormData","append","response","post","process","env","BACKEND_API_PATH","onUploadProgress","lengthComputable","loaded","total","Math","floor","data","handleSubmit","preventDefault","alert","addPost","updatePost","variables","type","payload","handleClose"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, FC, useRef } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport axios from \"axios\";\nimport { addPostMutation } from \"../../graphql/post/mutation/add\";\nimport { updatePostMutation } from \"../../graphql/post/mutation/update\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport SetPostPresenter from \"./SetPostPresenter\";\nimport { useInput } from \"../../hooks\";\nimport { useVssDispatch, SET_ADDPOST_MODAL } from \"../../context\";\n\ntype Props = {\n  title?: string;\n  description?: string;\n  status?: string;\n  postId?: string;\n  url?: string;\n};\n\nconst SetPostContainer: FC<Props> = ({\n  title,\n  description,\n  status,\n  postId,\n  url\n}) => {\n  const dispatch = useVssDispatch();\n\n  const fileEl = useRef<HTMLInputElement>(null);\n  const [header, setHeader] = useState<string>(\n    postId ? \"영상 업로드\" : \"포스트 수정\"\n  );\n  const modalTitle = useInput(title || \"\");\n  const modalDescription = useInput(description || \"\");\n  const modalStatus = useInput(status || \"PUBLIC\");\n  const [progress, setProgress] = useState<number>(postId ? 0 : 100);\n  const [file, setFile] = useState<string>(\"\");\n\n  const [set, { loading: setPostLoading }] = useMutation(\n    postId ? updatePostMutation : addPostMutation\n  );\n\n  const [remove, { loading: removePostLoading }] = useMutation(\n    removePostMutation\n  );\n\n  const handleClickFile = useCallback(() => {\n    const node = fileEl.current;\n    if (node) {\n      node.click();\n    }\n  }, []);\n\n  const handleChangeFile = useCallback(async e => {\n    if (!e.target.value) return; // cancel select file\n\n    const { files } = e.target;\n\n    const formData = new FormData();\n    formData.append(\"file\", files[0]);\n\n    const response = await axios.post(\n      `${process.env.BACKEND_API_PATH}/api/upload`,\n      formData,\n      {\n        onUploadProgress: ({ lengthComputable, loaded, total }) => {\n          if (lengthComputable) {\n            setProgress(Math.floor((loaded / total) * 100));\n          }\n        }\n      }\n    );\n    if (response.data) {\n      setFile(response.data);\n    }\n  }, []);\n\n  const handleSubmit = useCallback(\n    async e => {\n      e.preventDefault();\n      if (setPostLoading) return;\n      if (!file) return alert(\"영상을 선택하지 않았거나 업로드 진행 중입니다.\");\n      if (progress > 0 && progress < 100) return alert(\"업로드 진행 중입니다.\");\n      const {\n        data: { addPost, updatePost }\n      } = await set({\n        variables: {\n          postId,\n          title,\n          description,\n          status,\n          file\n        }\n      });\n      if (addPost || updatePost) {\n        alert(`포스트가 ${postId === \"new\" ? \"등록\" : \"수정\"} 되었습니다.`);\n        if (postId === \"new\") {\n          dispatch({\n            type: SET_ADDPOST_MODAL,\n            payload: false\n          });\n        }\n      } else {\n        alert(\"요청 중 오류가 발생했습니다.\");\n      }\n    },\n    [title, description, status, file, setPostLoading]\n  );\n\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_ADDPOST_MODAL,\n      payload: false\n    });\n  }, []);\n\n  return (\n    <SetPostPresenter\n      loading={setPostLoading}\n      header={header}\n      title={modalTitle}\n      description={modalDescription}\n      status={modalStatus}\n      progress={progress}\n      fileEl={fileEl}\n      onClickFile={handleClickFile}\n      onChangeFile={handleChangeFile}\n      onClose={handleClose}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SetPostContainer;\n"]},"metadata":{},"sourceType":"module"}