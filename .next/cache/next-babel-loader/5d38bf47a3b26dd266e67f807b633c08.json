{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, memo } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuery } from \"@apollo/client\";\nimport { Carousel } from \"react-bootstrap\";\nimport { noticesQuery } from \"../../graphql/notice/query\";\nimport CarouselContainer from \"../common/Carousel\";\nimport Timestamp from \"../common/Timestamp\";\nimport { useVssState, useVssDispatch, SHOW_NOTICE_MODAL } from \"../../context\";\nconst NoticeWrapper = styled.div.withConfig({\n  displayName: \"NoticeList__NoticeWrapper\",\n  componentId: \"ztp66g-0\"\n})([\"height:50px;display:flex;flex-direction:column;justify-content:center;margin-right:15%;margin-left:15%;padding:5px;text-align:center;cursor:pointer;\"]);\n\nconst NoticeList = () => {\n  const dispatch = useVssDispatch();\n  const {\n    isMaster\n  } = useVssState();\n  const {\n    data\n  } = useQuery(noticesQuery);\n  const handleClick = useCallback((title, description, noticeId) => {\n    dispatch({\n      type: SHOW_NOTICE_MODAL,\n      action: isMaster ? \"modifiable\" : \"readonly\",\n      actionText: \"\",\n      title,\n      description,\n      noticeId\n    });\n  }, [isMaster]);\n\n  const mapToNotices = () => {\n    return getNotices.length > 0 ? getNotices.map(({\n      id,\n      title,\n      description,\n      updatedAt\n    }) => __jsx(Carousel.Item, {\n      key: id\n    }, __jsx(NoticeWrapper, {\n      onClick: () => handleClick(title, description, id)\n    }, __jsx(\"div\", null, title), __jsx(Timestamp, {\n      text: updatedAt\n    })))) : __jsx(NoData, null, \"\\uACF5\\uC9C0\\uC0AC\\uD56D\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\");\n  };\n\n  return __jsx(CarouselContainer, null, mapToNotices());\n};\n\nexport default memo(NoticeList);","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/feed/NoticeList.tsx"],"names":["React","useCallback","memo","styled","useQuery","Carousel","noticesQuery","CarouselContainer","Timestamp","useVssState","useVssDispatch","SHOW_NOTICE_MODAL","NoticeWrapper","div","NoticeList","dispatch","isMaster","data","handleClick","title","description","noticeId","type","action","actionText","mapToNotices","getNotices","length","map","id","updatedAt"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAAiCC,IAAjC,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,QAAwC,gBAAxC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,OAAOC,iBAAP,MAA8B,oBAA9B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,iBAAtC,QAA+D,eAA/D;AAEA,MAAMC,aAAa,GAAGT,MAAM,CAACU,GAAV;AAAA;AAAA;AAAA,4JAAnB;;AAYA,MAAMC,UAAc,GAAG,MAAM;AAC3B,QAAMC,QAAQ,GAAGL,cAAc,EAA/B;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAeP,WAAW,EAAhC;AAEA,QAAM;AAAEQ,IAAAA;AAAF,MAAWb,QAAQ,CAACE,YAAD,CAAzB;AAEA,QAAMY,WAAW,GAAGjB,WAAW,CAC7B,CAACkB,KAAD,EAAQC,WAAR,EAAqBC,QAArB,KAAkC;AAChCN,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEX,iBADC;AAEPY,MAAAA,MAAM,EAAEP,QAAQ,GAAG,YAAH,GAAkB,UAF3B;AAGPQ,MAAAA,UAAU,EAAE,EAHL;AAIPL,MAAAA,KAJO;AAKPC,MAAAA,WALO;AAMPC,MAAAA;AANO,KAAD,CAAR;AAQD,GAV4B,EAW7B,CAACL,QAAD,CAX6B,CAA/B;;AAcA,QAAMS,YAAY,GAAG,MAAM;AACzB,WAAOC,UAAU,CAACC,MAAX,GAAoB,CAApB,GACLD,UAAU,CAACE,GAAX,CAAe,CAAC;AAAEC,MAAAA,EAAF;AAAMV,MAAAA,KAAN;AAAaC,MAAAA,WAAb;AAA0BU,MAAAA;AAA1B,KAAD,KACb,MAAC,QAAD,CAAU,IAAV;AAAe,MAAA,GAAG,EAAED;AAApB,OACE,MAAC,aAAD;AAAe,MAAA,OAAO,EAAE,MAAMX,WAAW,CAACC,KAAD,EAAQC,WAAR,EAAqBS,EAArB;AAAzC,OACE,mBAAMV,KAAN,CADF,EAEE,MAAC,SAAD;AAAW,MAAA,IAAI,EAAEW;AAAjB,MAFF,CADF,CADF,CADK,GAUL,MAAC,MAAD,mEAVF;AAYD,GAbD;;AAcA,SAAO,MAAC,iBAAD,QAAoBL,YAAY,EAAhC,CAAP;AACD,CAnCD;;AAqCA,eAAevB,IAAI,CAACY,UAAD,CAAnB","sourcesContent":["import React, { useCallback, FC, memo } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport { Carousel } from \"react-bootstrap\";\nimport { noticesQuery } from \"../../graphql/notice/query\";\nimport CarouselContainer from \"../common/Carousel\";\nimport Timestamp from \"../common/Timestamp\";\nimport { Notice } from \"../../interfaces\";\nimport { useVssState, useVssDispatch, SHOW_NOTICE_MODAL } from \"../../context\";\n\nconst NoticeWrapper = styled.div`\n  height: 50px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-right: 15%;\n  margin-left: 15%;\n  padding: 5px;\n  text-align: center;\n  cursor: pointer;\n`;\n\nconst NoticeList: FC = () => {\n  const dispatch = useVssDispatch();\n  const { isMaster } = useVssState();\n\n  const { data } = useQuery(noticesQuery);\n\n  const handleClick = useCallback(\n    (title, description, noticeId) => {\n      dispatch({\n        type: SHOW_NOTICE_MODAL,\n        action: isMaster ? \"modifiable\" : \"readonly\",\n        actionText: \"\",\n        title,\n        description,\n        noticeId\n      });\n    },\n    [isMaster]\n  );\n\n  const mapToNotices = () => {\n    return getNotices.length > 0 ? (\n      getNotices.map(({ id, title, description, updatedAt }) => (\n        <Carousel.Item key={id}>\n          <NoticeWrapper onClick={() => handleClick(title, description, id)}>\n            <div>{title}</div>\n            <Timestamp text={updatedAt} />\n          </NoticeWrapper>\n        </Carousel.Item>\n      ))\n    ) : (\n      <NoData>공지사항이 없습니다.</NoData>\n    );\n  };\n  return <CarouselContainer>{mapToNotices()}</CarouselContainer>;\n};\n\nexport default memo(NoticeList);\n"]},"metadata":{},"sourceType":"module"}