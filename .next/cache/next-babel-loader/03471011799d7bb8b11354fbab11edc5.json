{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\n\nvar SetNoticeContainer = function SetNoticeContainer(_ref) {\n  _s();\n\n  var title = _ref.title,\n      description = _ref.description,\n      action = _ref.action,\n      actionText = _ref.actionText,\n      noticeId = _ref.noticeId,\n      isMaster = _ref.isMaster;\n  var dispatch = useVssDispatch();\n\n  var _useLazyAxios = useLazyAxios(),\n      loading = _useLazyAxios.loading,\n      call = _useLazyAxios.call;\n\n  var modalTitle = useInput(title);\n  var modalDescription = useInput(description);\n\n  var _useState = useState(\"\"),\n      mdDescription = _useState[0],\n      setMdDescription = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      preview = _useState2[0],\n      setPreview = _useState2[1];\n\n  var _useState3 = useState({\n    code: action,\n    modalTitle: actionText\n  }),\n      modalAction = _useState3[0],\n      setModalAction = _useState3[1]; // readonly, modifiable, modify, add\n\n\n  var _useMutation = useMutation(noticeId ? updateNoticeMutation : addNoticeMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      set = _useMutation2[0],\n      setNoticeLoading = _useMutation2[1].loading;\n\n  var _useMutation3 = useMutation(removeNoticeMutation),\n      _useMutation4 = _slicedToArray(_useMutation3, 2),\n      remove = _useMutation4[0],\n      removeNoticeLoading = _useMutation4[1].loading;\n\n  var convertTextIntoMd = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n      var _yield$call, data, error, doc;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return call({\n                method: \"post\",\n                url: process.env.MDAPI_PATH,\n                data: {\n                  text: text,\n                  mode: \"gfm\",\n                  context: \"github/gollum\"\n                }\n              });\n\n            case 2:\n              _yield$call = _context.sent;\n              data = _yield$call.data;\n              error = _yield$call.error;\n\n              if (!data) {\n                _context.next = 10;\n                break;\n              }\n\n              doc = new DOMParser().parseFromString(data, \"text/html\");\n              return _context.abrupt(\"return\", doc.body.innerHTML);\n\n            case 10:\n              if (!error) {\n                _context.next = 14;\n                break;\n              }\n\n              return _context.abrupt(\"return\", null);\n\n            case 14:\n              throw new Error(\"please, check useLazyAxios\");\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function convertTextIntoMd(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handlePreView = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var md;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!loading) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            if (modalDescription.value) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", alert(\"내용을 입력하세요.\"));\n\n          case 4:\n            _context2.prev = 4;\n            _context2.next = 7;\n            return convertTextIntoMd(modalDescription.value);\n\n          case 7:\n            md = _context2.sent;\n\n            if (md) {\n              setPreview(md);\n            }\n\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](4);\n            alert(\"미리보기 로드에 실패했습니다.\");\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 11]]);\n  })), [modalDescription.value]);\n  var handleRefreshPreview = useCallback(function () {\n    setPreview(\"\");\n  }, []);\n  var handleClose = useCallback(function () {\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: false\n    });\n  }, []);\n  var handleShowEdit = useCallback(function () {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n  var handleDelete = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var _yield$remove, deleteNotice;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!removeNoticeLoading) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", alert(\"요청 중입니다. 잠시만 기다려주세요.\"));\n\n          case 2:\n            _context3.next = 4;\n            return remove({\n              variables: {\n                noticeId: noticeId\n              }\n            });\n\n          case 4:\n            _yield$remove = _context3.sent;\n            deleteNotice = _yield$remove.data.deleteNotice;\n\n            if (deleteNotice) {\n              alert(\"공지사항이 삭제되었습니다.\");\n              window.location.reload();\n            }\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })), [removeNoticeLoading]);\n  var handleSubmit = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var tf, _yield$set, _yield$set$data, addNotice, updateNotice;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!setNoticeLoading) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", alert(\"요청 중입니다. 잠시만 기다려주세요.\"));\n\n          case 2:\n            tf = confirm(\"\\uC785\\uB825\\uD55C \\uB0B4\\uC6A9\\uC73C\\uB85C \".concat(modalAction.code === \"add\" ? \"등록\" : \"수정\", \"\\uD558\\uC2DC\\uACA0\\uC5B4\\uC694?\"));\n\n            if (!tf) {\n              _context4.next = 11;\n              break;\n            }\n\n            _context4.next = 6;\n            return set({\n              variables: {\n                title: modalTitle.value,\n                description: modalDescription.value,\n                noticeId: noticeId\n              }\n            });\n\n          case 6:\n            _yield$set = _context4.sent;\n            _yield$set$data = _yield$set.data;\n            addNotice = _yield$set$data.addNotice;\n            updateNotice = _yield$set$data.updateNotice;\n\n            if (updateNotice) {\n              alert(\"공지사항이 수정되었습니다.\");\n              window.location.reload();\n            } else if (addNotice) {\n              alert(\"공지사항이 등록되었습니다.\");\n              window.location.reload();\n            }\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  })), [modalAction.code, modalTitle.value, modalDescription.value, setNoticeLoading]);\n  useEffect(function () {\n    function loadDescription(_x2) {\n      return _loadDescription.apply(this, arguments);\n    }\n\n    function _loadDescription() {\n      _loadDescription = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(value) {\n        var md;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return convertTextIntoMd(value);\n\n              case 2:\n                md = _context5.sent;\n\n                if (md) {\n                  setMdDescription(md);\n                }\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n      return _loadDescription.apply(this, arguments);\n    }\n\n    if (description) {\n      loadDescription(description);\n    }\n  }, []);\n  return __jsx(SetNoticePresenter, {\n    loading: loading,\n    removeNoticeLoading: removeNoticeLoading,\n    setNoticeLoading: setNoticeLoading,\n    action: modalAction,\n    isMaster: isMaster,\n    title: modalTitle,\n    description: modalDescription,\n    mdDescription: mdDescription,\n    preview: preview,\n    onShowEdit: handleShowEdit,\n    onPreview: handlePreView,\n    onRefreshPreview: handleRefreshPreview,\n    onClose: handleClose,\n    onDelete: handleDelete,\n    onSubmit: handleSubmit\n  });\n};\n\n_s(SetNoticeContainer, \"oQP9kgYmEVawOubhEB0UqJ0Bwcg=\", false, function () {\n  return [useVssDispatch, useLazyAxios, useInput, useInput, useMutation, useMutation];\n});\n\n_c = SetNoticeContainer;\nexport default SetNoticeContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetNoticeContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetNoticeContainer.tsx"],"names":["React","useCallback","useState","useEffect","useMutation","addNoticeMutation","updateNoticeMutation","removeNoticeMutation","SetNoticePresenter","useInput","useLazyAxios","useVssDispatch","SET_NOTICE_MODAL","SetNoticeContainer","title","description","action","actionText","noticeId","isMaster","dispatch","loading","call","modalTitle","modalDescription","mdDescription","setMdDescription","preview","setPreview","code","modalAction","setModalAction","set","setNoticeLoading","remove","removeNoticeLoading","convertTextIntoMd","text","method","url","process","env","MDAPI_PATH","data","mode","context","error","doc","DOMParser","parseFromString","body","innerHTML","Error","handlePreView","value","alert","md","handleRefreshPreview","handleClose","type","payload","handleShowEdit","handleDelete","variables","deleteNotice","window","location","reload","handleSubmit","tf","confirm","addNotice","updateNotice","loadDescription"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, FC } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\n\ntype Props = {\n  title: string;\n  description: string;\n  action: string;\n  actionText: string;\n  noticeId: string;\n  isMaster: boolean;\n};\n\nconst SetNoticeContainer: FC<Props> = ({\n  title,\n  description,\n  action,\n  actionText,\n  noticeId,\n  isMaster\n}) => {\n  const dispatch = useVssDispatch();\n  const { loading, call } = useLazyAxios();\n  const modalTitle = useInput(title);\n  const modalDescription = useInput(description);\n  const [mdDescription, setMdDescription] = useState(\"\");\n  const [preview, setPreview] = useState(\"\");\n  const [modalAction, setModalAction] = useState({\n    code: action,\n    modalTitle: actionText\n  }); // readonly, modifiable, modify, add\n\n  const [set, { loading: setNoticeLoading }] = useMutation(\n    noticeId ? updateNoticeMutation : addNoticeMutation\n  );\n\n  const [remove, { loading: removeNoticeLoading }] = useMutation(\n    removeNoticeMutation\n  );\n\n  const convertTextIntoMd = async text => {\n    const { data, error } = await call({\n      method: \"post\",\n      url: process.env.MDAPI_PATH,\n      data: {\n        text,\n        mode: \"gfm\",\n        context: \"github/gollum\"\n      }\n    });\n    if (data) {\n      const doc = new DOMParser().parseFromString(data, \"text/html\");\n      return doc.body.innerHTML;\n    } else if (error) {\n      return null;\n    } else {\n      throw new Error(\"please, check useLazyAxios\");\n    }\n  };\n\n  const handlePreView = useCallback(async () => {\n    if (loading) return;\n    if (!modalDescription.value) return alert(\"내용을 입력하세요.\");\n    try {\n      const md = await convertTextIntoMd(modalDescription.value);\n\n      if (md) {\n        setPreview(md);\n      }\n    } catch {\n      alert(\"미리보기 로드에 실패했습니다.\");\n    }\n  }, [modalDescription.value]);\n\n  const handleRefreshPreview = useCallback(() => {\n    setPreview(\"\");\n  }, []);\n\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: false\n    });\n  }, []);\n\n  const handleShowEdit = useCallback(() => {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n\n  const handleDelete = useCallback(async () => {\n    if (removeNoticeLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const {\n      data: { deleteNotice }\n    } = await remove({\n      variables: {\n        noticeId\n      }\n    });\n    if (deleteNotice) {\n      alert(\"공지사항이 삭제되었습니다.\");\n      window.location.reload();\n    }\n  }, [removeNoticeLoading]);\n\n  const handleSubmit = useCallback(async () => {\n    if (setNoticeLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\n      `입력한 내용으로 ${\n        modalAction.code === \"add\" ? \"등록\" : \"수정\"\n      }하시겠어요?`\n    );\n\n    if (tf) {\n      const {\n        data: { addNotice, updateNotice }\n      } = await set({\n        variables: {\n          title: modalTitle.value,\n          description: modalDescription.value,\n          noticeId\n        }\n      });\n      if (updateNotice) {\n        alert(\"공지사항이 수정되었습니다.\");\n        window.location.reload();\n      } else if (addNotice) {\n        alert(\"공지사항이 등록되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [\n    modalAction.code,\n    modalTitle.value,\n    modalDescription.value,\n    setNoticeLoading\n  ]);\n\n  useEffect(() => {\n    async function loadDescription(value) {\n      const md = await convertTextIntoMd(value);\n      if (md) {\n        setMdDescription(md);\n      }\n    }\n    if (description) {\n      loadDescription(description);\n    }\n  }, []);\n\n  return (\n    <SetNoticePresenter\n      loading={loading}\n      removeNoticeLoading={removeNoticeLoading}\n      setNoticeLoading={setNoticeLoading}\n      action={modalAction}\n      isMaster={isMaster}\n      title={modalTitle}\n      description={modalDescription}\n      mdDescription={mdDescription}\n      preview={preview}\n      onShowEdit={handleShowEdit}\n      onPreview={handlePreView}\n      onRefreshPreview={handleRefreshPreview}\n      onClose={handleClose}\n      onDelete={handleDelete}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SetNoticeContainer;\n"]},"metadata":{},"sourceType":"module"}