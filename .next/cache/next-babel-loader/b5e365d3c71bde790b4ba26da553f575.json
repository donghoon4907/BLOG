{"ast":null,"code":"var __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport Loader from \"../common/Loader\";\n\nconst SearchPostContainer = () => {\n  const router = useRouter();\n  const {\n    keyword,\n    orderBy\n  } = router.query;\n  const {\n    data,\n    loading,\n    fetchMore,\n    networkStatus\n  } = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      orderBy,\n      first: 10\n    },\n    skip: !keyword,\n    notifyOnNetworkStatusChange: true\n  });\n  console.log(data);\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const {\n      scrollHeight,\n      clientHeight,\n      scrollTop\n    } = document.documentElement;\n\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const handleSort = useCallback(nextOrderBy => {\n    router.push(`/search?keyword=${keyword}&orderBy=${nextOrderBy}`);\n  }, []);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [data && data.getPosts, loading]);\n\n  if (!data && loading) {\n    return __jsx(Loader, null);\n  }\n\n  return __jsx(SearchPostPresenter, {\n    loading: loading,\n    loadingMorePosts: loadingMorePosts,\n    posts: data.getPosts,\n    orderBy: orderBy,\n    onSort: handleSort\n  });\n};\n\nexport default SearchPostContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/search/SearchPostContainer.tsx"],"names":["useRouter","React","useCallback","useEffect","useQuery","NetworkStatus","SearchPostPresenter","postsQuery","Loader","SearchPostContainer","router","keyword","orderBy","query","data","loading","fetchMore","networkStatus","variables","searchKeyword","decodeURIComponent","first","skip","notifyOnNetworkStatusChange","console","log","loadingMorePosts","handleScrollFetchMore","scrollHeight","clientHeight","scrollTop","document","documentElement","getPosts","length","handleSort","nextOrderBy","push","window","addEventListener","removeEventListener"],"mappings":";AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA4D,OAA5D;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,gBAAxC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;AAEA,MAAMC,mBAAuB,GAAG,MAAM;AACpC,QAAMC,MAAM,GAAGV,SAAS,EAAxB;AAEA,QAAM;AAAEW,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBF,MAAM,CAACG,KAApC;AAEA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,SAAjB;AAA4BC,IAAAA;AAA5B,MAA8Cb,QAAQ,CAACG,UAAD,EAAa;AACvEW,IAAAA,SAAS,EAAE;AACTC,MAAAA,aAAa,EAAEC,kBAAkB,CAACT,OAAD,CADxB;AAETC,MAAAA,OAFS;AAGTS,MAAAA,KAAK,EAAE;AAHE,KAD4D;AAMvEC,IAAAA,IAAI,EAAE,CAACX,OANgE;AAOvEY,IAAAA,2BAA2B,EAAE;AAP0C,GAAb,CAA5D;AASAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AAEA,QAAMY,gBAAgB,GAAGT,aAAa,KAAKZ,aAAa,CAACW,SAAzD;;AAEA,QAAMW,qBAAqB,GAAG,MAAM;AAClC,QAAIZ,OAAJ,EAAa;AACb,UAAM;AAAEa,MAAAA,YAAF;AAAgBC,MAAAA,YAAhB;AAA8BC,MAAAA;AAA9B,QAA4CC,QAAQ,CAACC,eAA3D;;AACA,QAAIlB,IAAI,CAACmB,QAAT,EAAmB;AACjB,UAAIH,SAAS,GAAGD,YAAZ,KAA6BD,YAAjC,EAA+C;AAC7C,YAAId,IAAI,CAACmB,QAAL,CAAcC,MAAd,GAAuB,EAAvB,KAA8B,CAAlC,EAAqC;AACnClB,UAAAA,SAAS,CAAC;AACRE,YAAAA,SAAS,EAAE;AACTI,cAAAA,IAAI,EAAER,IAAI,CAACmB,QAAL,CAAcC;AADX;AADH,WAAD,CAAT;AAKD;AACF;AACF;AACF,GAdD;;AAgBA,QAAMC,UAAU,GAAGjC,WAAW,CAACkC,WAAW,IAAI;AAC5C1B,IAAAA,MAAM,CAAC2B,IAAP,CAAa,mBAAkB1B,OAAQ,YAAWyB,WAAY,EAA9D;AACD,GAF6B,EAE3B,EAF2B,CAA9B;AAIAjC,EAAAA,SAAS,CAAC,MAAM;AACdmC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCZ,qBAAlC;AACA,WAAO,MAAMW,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCb,qBAArC,CAAb;AACD,GAHQ,EAGN,CAACb,IAAI,IAAIA,IAAI,CAACmB,QAAd,EAAwBlB,OAAxB,CAHM,CAAT;;AAKA,MAAI,CAACD,IAAD,IAASC,OAAb,EAAsB;AACpB,WAAO,MAAC,MAAD,OAAP;AACD;;AAED,SACE,MAAC,mBAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,gBAAgB,EAAEW,gBAFpB;AAGE,IAAA,KAAK,EAAEZ,IAAI,CAACmB,QAHd;AAIE,IAAA,OAAO,EAAErB,OAJX;AAKE,IAAA,MAAM,EAAEuB;AALV,IADF;AASD,CAxDD;;AA0DA,eAAe1B,mBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport React, { useCallback, useEffect, FC, Fragment } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport Loader from \"../common/Loader\";\n\nconst SearchPostContainer: FC = () => {\n  const router = useRouter();\n\n  const { keyword, orderBy } = router.query as any;\n\n  const { data, loading, fetchMore, networkStatus } = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      orderBy,\n      first: 10\n    },\n    skip: !keyword,\n    notifyOnNetworkStatusChange: true\n  });\n  console.log(data);\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const handleSort = useCallback(nextOrderBy => {\n    router.push(`/search?keyword=${keyword}&orderBy=${nextOrderBy}`);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [data && data.getPosts, loading]);\n\n  if (!data && loading) {\n    return <Loader />;\n  }\n\n  return (\n    <SearchPostPresenter\n      loading={loading}\n      loadingMorePosts={loadingMorePosts}\n      posts={data.getPosts}\n      orderBy={orderBy}\n      onSort={handleSort}\n    />\n  );\n};\n\nexport default SearchPostContainer;\n"]},"metadata":{},"sourceType":"module"}