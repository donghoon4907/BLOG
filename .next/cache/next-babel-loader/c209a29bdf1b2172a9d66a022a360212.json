{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport Layout from \"../components/common/Layout\"; // import SearchPost from \"../components/search/SearchPostContainer\";\n\nconst Search = () => {\n  return __jsx(Layout, null, __jsx(\"h1\", null, \"test\"));\n}; // export async function getStaticPaths() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch(\"https://.../posts\");\n//   const posts = await res.json();\n//   // Get the paths we want to pre-render based on posts\n//   const paths = posts.map(post => ({\n//     params: { id: post.id }\n//   }));\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false };\n// }\n\n\nexport const getInitialProps = context => {\n  console.log(context);\n};\nexport const getStaticProps = async context => {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: searchQuery,\n    variables: {\n      first: 10\n    }\n  });\n  console.log(context);\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    },\n    revalidate: 1\n  };\n};\nexport default Search;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search.tsx"],"names":["React","initializeApollo","searchQuery","Layout","Search","getInitialProps","context","console","log","getStaticProps","apolloClient","query","variables","first","props","initialApolloState","cache","extract","revalidate"],"mappings":";AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAEA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAOC,MAAP,MAAmB,6BAAnB,C,CACA;;AAEA,MAAMC,MAAU,GAAG,MAAM;AACvB,SACE,MAAC,MAAD,QACE,yBADF,CADF;AAKD,CAND,C,CAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,eAAe,GAAGC,OAAO,IAAI;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACD,CAFM;AAIP,OAAO,MAAMG,cAA8B,GAAG,MAAMH,OAAN,IAAiB;AAC7D,QAAMI,YAAY,GAAGT,gBAAgB,EAArC;AACA,QAAMS,YAAY,CAACC,KAAb,CAAmB;AACvBA,IAAAA,KAAK,EAAET,WADgB;AAEvBU,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AADE;AAFY,GAAnB,CAAN;AAMAN,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAEA,SAAO;AACLQ,IAAAA,KAAK,EAAE;AACLC,MAAAA,kBAAkB,EAAEL,YAAY,CAACM,KAAb,CAAmBC,OAAnB;AADf,KADF;AAILC,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD,CAhBM;AAkBP,eAAed,MAAf","sourcesContent":["import React, { FC } from \"react\";\nimport { GetStaticProps } from \"next\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport Layout from \"../components/common/Layout\";\n// import SearchPost from \"../components/search/SearchPostContainer\";\n\nconst Search: FC = () => {\n  return (\n    <Layout>\n      <h1>test</h1>\n    </Layout>\n  );\n};\n\n// export async function getStaticPaths() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch(\"https://.../posts\");\n//   const posts = await res.json();\n\n//   // Get the paths we want to pre-render based on posts\n//   const paths = posts.map(post => ({\n//     params: { id: post.id }\n//   }));\n\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false };\n// }\n\nexport const getInitialProps = context => {\n  console.log(context);\n};\n\nexport const getStaticProps: GetStaticProps = async context => {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: searchQuery,\n    variables: {\n      first: 10\n    }\n  });\n  console.log(context);\n\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    },\n    revalidate: 1\n  };\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}