{"ast":null,"code":"var _jsxFileName = \"/Users/idonghun/Desktop/vss/frontend/pages/search.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nimport Layout from \"../components/common/Layout\";\nimport Section from \"../components/common/Section\";\nimport SearchUser from \"../components/search/SearchUserContainer\";\nimport SearchPost from \"../components/search/SearchPostContainer\";\n\nconst Search = () => {\n  const dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    ssr: false,\n    onCompleted: ({\n      getMyProfile\n    }) => {\n      const {\n        id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n  return __jsx(Layout, {\n    title: \"\\uAC80\\uC0C9\\uACB0\\uACFC\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(Section, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(SearchUser, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), __jsx(SearchPost, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport const getStaticProps = async () => {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: searchQuery,\n    variables: {\n      first: 10\n    }\n  });\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    }\n  };\n};\nexport default Search;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search.tsx"],"names":["React","useQuery","initializeApollo","searchQuery","meQuery","useVssDispatch","SET_ME","Layout","Section","SearchUser","SearchPost","Search","dispatch","ssr","onCompleted","getMyProfile","id","nickname","email","avatar","isMaster","type","userId","getStaticProps","apolloClient","query","variables","first","props","initialApolloState","cache","extract"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,YAAvC;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AACA,OAAOC,UAAP,MAAuB,0CAAvB;;AAEA,MAAMC,MAAgB,GAAG,MAAM;AAC7B,QAAMC,QAAQ,GAAGP,cAAc,EAA/B;AACAJ,EAAAA,QAAQ,CAACG,OAAD,EAAU;AAChBS,IAAAA,GAAG,EAAE,KADW;AAEhBC,IAAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAsB;AACjC,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA,QAAN;AAAgBC,QAAAA,KAAhB;AAAuBC,QAAAA,MAAvB;AAA+BC,QAAAA;AAA/B,UAA4CL,YAAlD;AACAH,MAAAA,QAAQ,CAAC;AACPS,QAAAA,IAAI,EAAEf,MADC;AAEPgB,QAAAA,MAAM,EAAEN,EAFD;AAGPC,QAAAA,QAHO;AAIPC,QAAAA,KAJO;AAKPC,QAAAA,MALO;AAMPC,QAAAA;AANO,OAAD,CAAR;AAQD;AAZe,GAAV,CAAR;AAcA,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,0BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF;AAQD,CAxBD;;AA0BA,OAAO,MAAMG,cAA8B,GAAG,YAAY;AACxD,QAAMC,YAAY,GAAGtB,gBAAgB,EAArC;AACA,QAAMsB,YAAY,CAACC,KAAb,CAAmB;AACvBA,IAAAA,KAAK,EAAEtB,WADgB;AAEvBuB,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AADE;AAFY,GAAnB,CAAN;AAOA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLC,MAAAA,kBAAkB,EAAEL,YAAY,CAACM,KAAb,CAAmBC,OAAnB;AADf;AADF,GAAP;AAKD,CAdM;AAgBP,eAAepB,MAAf","sourcesContent":["import React from \"react\";\nimport { NextPage, GetStaticProps } from \"next\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nimport Layout from \"../components/common/Layout\";\nimport Section from \"../components/common/Section\";\nimport SearchUser from \"../components/search/SearchUserContainer\";\nimport SearchPost from \"../components/search/SearchPostContainer\";\n\nconst Search: NextPage = () => {\n  const dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    ssr: false,\n    onCompleted: ({ getMyProfile }) => {\n      const { id, nickname, email, avatar, isMaster } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n  return (\n    <Layout title=\"검색결과\">\n      <Section>\n        <SearchUser />\n        <SearchPost />\n      </Section>\n    </Layout>\n  );\n};\n\nexport const getStaticProps: GetStaticProps = async () => {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: searchQuery,\n    variables: {\n      first: 10\n    }\n  });\n\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    }\n  };\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}