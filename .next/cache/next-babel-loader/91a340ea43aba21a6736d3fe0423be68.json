{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\nimport { useVssDispatch, SET_LOGIN_MODAL, SET_ME } from \"../../context\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\n\nvar SignInContainer = function SignInContainer() {\n  _s();\n\n  var dispatch = useVssDispatch();\n\n  var _useMutation = useMutation(logInMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      login = _useMutation2[0],\n      loading = _useMutation2[1].loading;\n\n  var _useLazyQuery = useLazyQuery(meQuery, {\n    onCompleted: function onCompleted(_ref) {\n      var getMyProfile = _ref.getMyProfile;\n      var id = getMyProfile.id,\n          nickname = getMyProfile.nickname,\n          email = getMyProfile.email,\n          avatar = getMyProfile.avatar,\n          isMaster = getMyProfile.isMaster;\n      console.log(isMaster);\n      dispatch({\n        type: SET_ME,\n        id: id,\n        nickname: nickname,\n        email: email,\n        avatar: avatar,\n        isMaster: isMaster\n      });\n    }\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n      me = _useLazyQuery2[0];\n\n  var email = useInput(\"\");\n  var pwd = useInput(\"\");\n  var handleSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _yield$login, logIn, _JSON$parse, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n\n              if (!loading) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", alert(\"요청 중입니다. 잠시만 기다려주세요.\"));\n\n            case 3:\n              _context.prev = 3;\n              _context.next = 6;\n              return login({\n                variables: {\n                  email: email.value,\n                  pwd: pwd.value\n                }\n              });\n\n            case 6:\n              _yield$login = _context.sent;\n              logIn = _yield$login.data.logIn;\n\n              if (logIn) {\n                setAccessToken(logIn);\n                dispatch({\n                  type: SET_LOGIN_MODAL,\n                  payload: false\n                });\n                me();\n              }\n\n              _context.next = 15;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](3);\n              _JSON$parse = JSON.parse(_context.t0.message), message = _JSON$parse.message;\n              alert(message);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 11]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [email.value, pwd.value, loading]);\n  return __jsx(SignInPresenter, {\n    loading: loading,\n    email: email,\n    pwd: pwd,\n    onSubmit: handleSubmit\n  });\n};\n\n_s(SignInContainer, \"vu9PM36vVfhSLj2xW6s53qToCJA=\", false, function () {\n  return [useVssDispatch, useMutation, useLazyQuery, useInput, useInput];\n});\n\n_c = SignInContainer;\nexport default SignInContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignInContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/auth/SignInContainer.tsx"],"names":["React","useCallback","useMutation","useLazyQuery","useInput","logInMutation","SignInPresenter","setAccessToken","useVssDispatch","SET_LOGIN_MODAL","SET_ME","meQuery","SignInContainer","dispatch","login","loading","onCompleted","getMyProfile","id","nickname","email","avatar","isMaster","console","log","type","me","pwd","handleSubmit","e","preventDefault","alert","variables","value","logIn","data","payload","JSON","parse","message"],"mappings":"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","sourcesContent":["import React, { useCallback, FormEvent, FC } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\nimport { useVssDispatch, SET_LOGIN_MODAL, SET_ME } from \"../../context\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\n\nconst SignInContainer: FC = () => {\n  const dispatch = useVssDispatch();\n  const [login, { loading }] = useMutation(logInMutation);\n  const [me] = useLazyQuery(meQuery, {\n    onCompleted: ({ getMyProfile }) => {\n      const { id, nickname, email, avatar, isMaster } = getMyProfile;\n      console.log(isMaster);\n      dispatch({\n        type: SET_ME,\n        id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n\n  const email = useInput(\"\");\n  const pwd = useInput(\"\");\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (loading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n      try {\n        const {\n          data: { logIn }\n        } = await login({\n          variables: { email: email.value, pwd: pwd.value }\n        });\n        if (logIn) {\n          setAccessToken(logIn);\n          dispatch({\n            type: SET_LOGIN_MODAL,\n            payload: false\n          });\n          me();\n        }\n      } catch (error) {\n        const { message } = JSON.parse(error.message);\n        alert(message);\n      }\n    },\n    [email.value, pwd.value, loading]\n  );\n\n  return (\n    <SignInPresenter\n      loading={loading}\n      email={email}\n      pwd={pwd}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SignInContainer;\n"]},"metadata":{},"sourceType":"module"}