{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nimport { Modal, Button, ProgressBar } from \"react-bootstrap\";\nimport Input from \"../common/Input\";\nimport { InputWrapper, Label, TextArea, Select } from \"../common/Form\";\nimport Loader from \"../common/Loader\";\nimport { Upload } from \"../icon\";\nconst UploadWrapper = styled.div.withConfig({\n  displayName: \"SetPostPresenter__UploadWrapper\",\n  componentId: \"sc-17w3pe5-0\"\n})([\"\", \";background:\", \";width:100%;height:300px;cursor:pointer;padding:10px;display:flex;justify-content:center;align-items:center;\"], props => props.theme.whiteBox, props => props.theme.bgColor);\nconst GuideLine = styled.div.withConfig({\n  displayName: \"SetPostPresenter__GuideLine\",\n  componentId: \"sc-17w3pe5-1\"\n})([\"flex:1;display:flex;flex-direction:column;text-align:center;padding:10px;& > div{flex:1;padding:10px;}\"]);\n\nconst SetNoticePresenter = ({\n  loading,\n  header,\n  title,\n  description,\n  status,\n  progress,\n  file,\n  fileEl,\n  onClickFile,\n  onChangeFile,\n  onClose,\n  onDelete,\n  onSubmit\n}) => __jsx(Fragment, null, loading && __jsx(Loader, null), __jsx(Modal, {\n  onHide: onClose,\n  animation: false,\n  show: true\n}, __jsx(Modal.Header, {\n  closeButton: true\n}, __jsx(Modal.Title, null, `포스트 ${header}`)), __jsx(\"form\", {\n  onSubmit: onSubmit\n}, __jsx(Modal.Body, null, !file ? __jsx(UploadWrapper, {\n  onClick: onClickFile\n}, __jsx(GuideLine, null, progress > 0 && __jsx(\"div\", null, __jsx(ProgressBar, {\n  now: progress,\n  label: `${progress}%`,\n  style: {\n    width: \"100%\"\n  }\n})), progress === 0 && __jsx(React.Fragment, null, __jsx(\"div\", null, __jsx(Upload, null)), __jsx(\"div\", null, \"\\uC601\\uC0C1\\uC744 \\uC5C5\\uB85C\\uB4DC\\uD558\\uB824\\uBA74 \\uD074\\uB9AD\\uD558\\uC138\\uC694.\"), __jsx(\"div\", null, __jsx(Button, {\n  variant: \"primary\"\n}, \"\\uD30C\\uC77C\\uC120\\uD0DD\")))), __jsx(\"input\", {\n  type: \"file\",\n  onChange: onChangeFile,\n  ref: fileEl,\n  hidden: true,\n  accept: \"video/*\"\n})) : __jsx(React.Fragment, null, __jsx(InputWrapper, null, __jsx(Label, {\n  htmlFor: \"title\",\n  val: title.value\n}, \"\\uC81C\\uBAA9\"), __jsx(Input, _extends({\n  name: \"title\",\n  placeholder: \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\",\n  required: true,\n  autoComplete: \"off\"\n}, title))), __jsx(InputWrapper, null, __jsx(Label, {\n  htmlFor: \"description\",\n  val: description.value\n}, \"\\uB0B4\\uC6A9\"), __jsx(TextArea, _extends({\n  required: true,\n  name: \"description\",\n  placeholder: \"\\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\",\n  autoComplete: \"off\"\n}, description))), __jsx(InputWrapper, null, __jsx(Label, {\n  htmlFor: \"status\",\n  val: status.value\n}, \"\\uACF5\\uAC1C\\uC124\\uC815\"), __jsx(Select, _extends({\n  required: true,\n  name: \"status\"\n}, status), __jsx(\"option\", {\n  value: \"PUBLIC\"\n}, \"\\uACF5\\uAC1C\"), __jsx(\"option\", {\n  value: \"PRIVATE\"\n}, \"\\uBE44\\uACF5\\uAC1C\"))))), __jsx(Modal.Footer, null, __jsx(Button, {\n  variant: \"info\",\n  onClick: onClose\n}, \"\\uCDE8\\uC18C\"), header === \"수정\" && __jsx(Button, {\n  variant: \"danger\",\n  onClick: onDelete\n}, \"\\uC0AD\\uC81C\"), file && __jsx(Button, {\n  variant: \"primary\",\n  type: \"submit\"\n}, header)))));\n\nexport default SetNoticePresenter;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetPostPresenter.tsx"],"names":["React","Fragment","styled","Modal","Button","ProgressBar","Input","InputWrapper","Label","TextArea","Select","Loader","Upload","UploadWrapper","div","props","theme","whiteBox","bgColor","GuideLine","SetNoticePresenter","loading","header","title","description","status","progress","file","fileEl","onClickFile","onChangeFile","onClose","onDelete","onSubmit","width","value"],"mappings":"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","sourcesContent":["import React, { Fragment, FC } from \"react\";\nimport styled from \"styled-components\";\nimport { Modal, Button, ProgressBar } from \"react-bootstrap\";\nimport Input from \"../common/Input\";\nimport { InputWrapper, Label, TextArea, Select } from \"../common/Form\";\nimport { UseInputProps } from \"../../hooks\";\nimport Loader from \"../common/Loader\";\nimport { Upload } from \"../icon\";\n\nconst UploadWrapper = styled.div`\n  ${props => props.theme.whiteBox};\n  background: ${props => props.theme.bgColor};\n  width: 100%;\n  height: 300px;\n  cursor: pointer;\n  padding: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst GuideLine = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n\n  text-align: center;\n  padding: 10px;\n\n  & > div {\n    flex: 1;\n    padding: 10px;\n  }\n`;\n\ntype Props = {\n  loading: boolean;\n  header: string;\n  title: UseInputProps;\n  description: UseInputProps;\n  status: UseInputProps;\n  progress: number;\n  file: string;\n  fileEl: any;\n  onClickFile: any;\n  onChangeFile: any;\n  onClose: any;\n  onDelete: any;\n  onSubmit: any;\n};\n\nconst SetNoticePresenter: FC<Props> = ({\n  loading,\n  header,\n  title,\n  description,\n  status,\n  progress,\n  file,\n  fileEl,\n  onClickFile,\n  onChangeFile,\n  onClose,\n  onDelete,\n  onSubmit\n}) => (\n  <Fragment>\n    {loading && <Loader />}\n    <Modal onHide={onClose} animation={false} show>\n      <Modal.Header closeButton>\n        <Modal.Title>{`포스트 ${header}`}</Modal.Title>\n      </Modal.Header>\n      <form onSubmit={onSubmit}>\n        <Modal.Body>\n          {!file ? (\n            <UploadWrapper onClick={onClickFile}>\n              <GuideLine>\n                {progress > 0 && (\n                  <div>\n                    <ProgressBar\n                      now={progress}\n                      label={`${progress}%`}\n                      style={{ width: \"100%\" }}\n                    />\n                  </div>\n                )}\n                {progress === 0 && (\n                  <>\n                    <div>\n                      <Upload />\n                    </div>\n                    <div>영상을 업로드하려면 클릭하세요.</div>\n                    <div>\n                      <Button variant=\"primary\">파일선택</Button>\n                    </div>\n                  </>\n                )}\n              </GuideLine>\n\n              <input\n                type=\"file\"\n                onChange={onChangeFile}\n                ref={fileEl}\n                hidden\n                accept=\"video/*\"\n              />\n            </UploadWrapper>\n          ) : (\n            <>\n              <InputWrapper>\n                <Label htmlFor=\"title\" val={title.value}>\n                  제목\n                </Label>\n                <Input\n                  name=\"title\"\n                  placeholder=\"제목을 입력하세요.\"\n                  required\n                  autoComplete=\"off\"\n                  {...title}\n                />\n              </InputWrapper>\n              <InputWrapper>\n                <Label htmlFor=\"description\" val={description.value}>\n                  내용\n                </Label>\n                <TextArea\n                  required\n                  name=\"description\"\n                  placeholder=\"내용을 입력하세요.\"\n                  autoComplete=\"off\"\n                  {...description}\n                />\n              </InputWrapper>\n              <InputWrapper>\n                <Label htmlFor=\"status\" val={status.value}>\n                  공개설정\n                </Label>\n                <Select required name=\"status\" {...status}>\n                  <option value=\"PUBLIC\">공개</option>\n                  <option value=\"PRIVATE\">비공개</option>\n                </Select>\n              </InputWrapper>\n            </>\n          )}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"info\" onClick={onClose}>\n            취소\n          </Button>\n          {header === \"수정\" && (\n            <Button variant=\"danger\" onClick={onDelete}>\n              삭제\n            </Button>\n          )}\n          {file && (\n            <Button variant=\"primary\" type=\"submit\">\n              {header}\n            </Button>\n          )}\n        </Modal.Footer>\n      </form>\n    </Modal>\n  </Fragment>\n);\n\nexport default SetNoticePresenter;\n"]},"metadata":{},"sourceType":"module"}