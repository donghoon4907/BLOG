{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport FeedPresenter from \"./FeedPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport { noticesQuery } from \"../../graphql/notice/query\";\nimport { useVssState, useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\nimport Loader from \"../common/Loader\";\n\nvar FeedContainer = function FeedContainer() {\n  var _useVssState = useVssState(),\n      isMaster = _useVssState.isMaster,\n      isShowNoticeModal = _useVssState.isShowNoticeModal,\n      isShowAddPostModal = _useVssState.isShowAddPostModal;\n\n  var dispatch = useVssDispatch();\n  var recommandUserEl = useRef(null);\n\n  var _useState = useState({\n    action: \"wait\",\n    actionText: \"비활성화\",\n    title: \"\",\n    description: \"\",\n    noticeId: \"\"\n  }),\n      notice = _useState[0],\n      setNotice = _useState[1];\n\n  var _useQuery = useQuery(postsQuery, {\n    variables: {\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      posts = _useQuery.data,\n      loadPostLoading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore;\n\n  var _useQuery2 = useQuery(noticesQuery, {\n    variables: {\n      first: 10\n    },\n    fetchPolicy: \"network-only\"\n  }),\n      notices = _useQuery2.data,\n      loadNoticeLoading = _useQuery2.loading;\n\n  var handleScrollFetchMore = function handleScrollFetchMore() {\n    if (loadPostLoading) return;\n    var _document$documentEle = document.documentElement,\n        scrollHeight = _document$documentEle.scrollHeight,\n        clientHeight = _document$documentEle.clientHeight,\n        scrollTop = _document$documentEle.scrollTop;\n\n    if (posts && posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            },\n            updateQuery: function updateQuery(prev, _ref) {\n              var fetchMoreResult = _ref.fetchMoreResult;\n              if (!fetchMoreResult) return prev;\n\n              if (fetchMoreResult.getPosts.length === 0) {\n                window.removeEventListener(\"scroll\", handleScrollFetchMore);\n              }\n\n              return Object.assign({}, prev, {\n                getPosts: [].concat(_toConsumableArray(prev.getPosts), _toConsumableArray(fetchMoreResult.getPosts))\n              });\n            }\n          });\n        }\n      }\n    }\n  };\n\n  var handleAddNotice = useCallback(function () {\n    setNotice({\n      action: \"add\",\n      actionText: \"등록\",\n      title: \"\",\n      description: \"\",\n      noticeId: \"\"\n    });\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: true\n    });\n  }, []);\n  var handleShowNotice = useCallback(function (title, description, noticeId) {\n    setNotice({\n      action: isMaster ? \"modifiable\" : \"readonly\",\n      actionText: \"\",\n      title: title,\n      description: description,\n      noticeId: noticeId\n    });\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: true\n    });\n  }, [isMaster]);\n  useEffect(function () {\n    if (!isShowNoticeModal) {\n      setNotice({\n        action: \"wait\",\n        actionText: \"비활성화\",\n        title: \"\",\n        description: \"\",\n        noticeId: \"\"\n      });\n    }\n  }, [isShowNoticeModal]);\n  useEffect(function () {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return function () {\n      return window.removeEventListener(\"scroll\", handleScrollFetchMore);\n    };\n  }, [posts && posts.getPosts, loadPostLoading]);\n\n  if (loadPostLoading && !posts || loadNoticeLoading && !notices) {\n    return __jsx(Loader, null);\n  }\n\n  return __jsx(FeedPresenter, {\n    loading: loadPostLoading,\n    posts: posts,\n    notices: notices,\n    isMaster: isMaster,\n    notice: notice,\n    isShowNoticeModal: isShowNoticeModal,\n    isShowAddPostModal: isShowAddPostModal,\n    onShowNotice: handleShowNotice,\n    onAddNotice: handleAddNotice,\n    recommandUserEl: recommandUserEl\n  });\n};\n\nexport default FeedContainer;","map":null,"metadata":{},"sourceType":"module"}