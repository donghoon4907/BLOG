{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssState, useVssDispatch, HIDE_NOTICE_MODAL } from \"../../context\";\n\nvar SetNoticeContainer = function SetNoticeContainer() {\n  var dispatch = useVssDispatch();\n\n  var _useVssState = useVssState(),\n      activeNotice = _useVssState.activeNotice,\n      isMaster = _useVssState.isMaster;\n\n  var _useLazyAxios = useLazyAxios(),\n      loading = _useLazyAxios.loading,\n      call = _useLazyAxios.call;\n\n  var modalTitle = useInput(activeNotice.title);\n  var modalDescription = useInput(activeNotice.description);\n\n  var _useState = useState(\"\"),\n      mdDescription = _useState[0],\n      setMdDescription = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      preview = _useState2[0],\n      setPreview = _useState2[1];\n\n  var _useState3 = useState({\n    code: activeNotice.action,\n    modalTitle: activeNotice.actionText\n  }),\n      modalAction = _useState3[0],\n      setModalAction = _useState3[1]; // readonly, modifiable, modify, add\n\n\n  var _useMutation = useMutation(activeNotice.noticeId ? updateNoticeMutation : addNoticeMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      set = _useMutation2[0],\n      setNoticeLoading = _useMutation2[1].loading;\n\n  var _useMutation3 = useMutation(removeNoticeMutation),\n      _useMutation4 = _slicedToArray(_useMutation3, 2),\n      remove = _useMutation4[0],\n      removeNoticeLoading = _useMutation4[1].loading;\n\n  var convertTextIntoMd = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n      var _yield$call, data, error, doc;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return call({\n                method: \"post\",\n                url: process.env.MDAPI_PATH,\n                data: {\n                  text: text,\n                  mode: \"gfm\",\n                  context: \"github/gollum\"\n                }\n              });\n\n            case 2:\n              _yield$call = _context.sent;\n              data = _yield$call.data;\n              error = _yield$call.error;\n\n              if (!data) {\n                _context.next = 10;\n                break;\n              }\n\n              doc = new DOMParser().parseFromString(data, \"text/html\");\n              return _context.abrupt(\"return\", doc.body.innerHTML);\n\n            case 10:\n              if (!error) {\n                _context.next = 14;\n                break;\n              }\n\n              return _context.abrupt(\"return\", null);\n\n            case 14:\n              throw new Error(\"please, check useLazyAxios\");\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function convertTextIntoMd(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handlePreView = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var md;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!loading) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            if (modalDescription.value) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", alert(\"내용을 입력하세요.\"));\n\n          case 4:\n            _context2.prev = 4;\n            _context2.next = 7;\n            return convertTextIntoMd(modalDescription.value);\n\n          case 7:\n            md = _context2.sent;\n\n            if (md) {\n              setPreview(md);\n            }\n\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](4);\n            alert(\"미리보기 로드에 실패했습니다.\");\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 11]]);\n  })), [modalDescription.value]);\n  var handleRefreshPreview = useCallback(function () {\n    setPreview(\"\");\n  }, []);\n  var handleClose = useCallback(function () {\n    dispatch({\n      type: HIDE_NOTICE_MODAL\n    });\n  }, []);\n  var handleShowEdit = useCallback(function () {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n  var handleDelete = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var tf, _yield$remove, deleteNotice;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!removeNoticeLoading) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", alert(\"요청 중입니다. 잠시만 기다려주세요.\"));\n\n          case 2:\n            tf = confirm(\"공지사항을 삭제하시겠어요?\");\n\n            if (!tf) {\n              _context3.next = 9;\n              break;\n            }\n\n            _context3.next = 6;\n            return remove({\n              variables: {\n                noticeId: activeNotice.noticeId\n              }\n            });\n\n          case 6:\n            _yield$remove = _context3.sent;\n            deleteNotice = _yield$remove.data.deleteNotice;\n\n            if (deleteNotice) {\n              alert(\"공지사항이 삭제되었습니다.\");\n              dispatch({\n                type: HIDE_NOTICE_MODAL\n              });\n            }\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })), [removeNoticeLoading]);\n  var handleSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(e) {\n      var tf, _yield$set, _yield$set$data, addNotice, updateNotice, _JSON$parse, message;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              e.preventDefault();\n\n              if (!setNoticeLoading) {\n                _context4.next = 3;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", alert(\"요청 중입니다. 잠시만 기다려주세요.\"));\n\n            case 3:\n              tf = confirm(\"\\uC785\\uB825\\uD55C \\uB0B4\\uC6A9\\uC73C\\uB85C \".concat(modalAction.code === \"add\" ? \"등록\" : \"수정\", \"\\uD558\\uC2DC\\uACA0\\uC5B4\\uC694?\"));\n\n              if (!tf) {\n                _context4.next = 19;\n                break;\n              }\n\n              _context4.prev = 5;\n              _context4.next = 8;\n              return set({\n                variables: {\n                  title: modalTitle.value,\n                  description: modalDescription.value,\n                  noticeId: activeNotice.noticeId\n                }\n              });\n\n            case 8:\n              _yield$set = _context4.sent;\n              _yield$set$data = _yield$set.data;\n              addNotice = _yield$set$data.addNotice;\n              updateNotice = _yield$set$data.updateNotice;\n\n              if (updateNotice) {\n                alert(\"공지사항이 수정되었습니다.\");\n                dispatch({\n                  type: HIDE_NOTICE_MODAL\n                });\n              } else if (addNotice) {\n                alert(\"공지사항이 등록되었습니다.\");\n                dispatch({\n                  type: HIDE_NOTICE_MODAL\n                });\n              }\n\n              _context4.next = 19;\n              break;\n\n            case 15:\n              _context4.prev = 15;\n              _context4.t0 = _context4[\"catch\"](5);\n              _JSON$parse = JSON.parse(_context4.t0.message), message = _JSON$parse.message;\n              alert(message);\n\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[5, 15]]);\n    }));\n\n    return function (_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [modalAction.code, modalTitle.value, modalDescription.value, setNoticeLoading]);\n  useEffect(function () {\n    function loadDescription(_x3) {\n      return _loadDescription.apply(this, arguments);\n    }\n\n    function _loadDescription() {\n      _loadDescription = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(value) {\n        var md;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return convertTextIntoMd(value);\n\n              case 2:\n                md = _context5.sent;\n\n                if (md) {\n                  setMdDescription(md);\n                }\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n      return _loadDescription.apply(this, arguments);\n    }\n\n    if (activeNotice.description) {\n      loadDescription(activeNotice.description);\n    }\n  }, [activeNotice.description]);\n  return __jsx(SetNoticePresenter, {\n    loading: loading,\n    removeNoticeLoading: removeNoticeLoading,\n    setNoticeLoading: setNoticeLoading,\n    action: modalAction,\n    isMaster: isMaster,\n    title: modalTitle,\n    description: modalDescription,\n    mdDescription: mdDescription,\n    preview: preview,\n    onShowEdit: handleShowEdit,\n    onPreview: handlePreView,\n    onRefreshPreview: handleRefreshPreview,\n    onClose: handleClose,\n    onDelete: handleDelete,\n    onSubmit: handleSubmit\n  });\n};\n\nexport default SetNoticeContainer;","map":null,"metadata":{},"sourceType":"module"}