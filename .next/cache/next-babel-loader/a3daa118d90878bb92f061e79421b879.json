{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport { useMutation, useApolloClient } from \"react-apollo-hooks\";\nimport { ADD_NOTICE, UPDATE_NOTICE, DELETE_NOTICE } from \"../../query/notice\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nexport default (props => {\n  const client = useApolloClient();\n  const {\n    loading,\n    call\n  } = useLazyAxios();\n  const title = useInput(props.title);\n  const description = useInput(props.description);\n  const {\n    0: mdDescription,\n    1: setMdDescription\n  } = useState(\"\");\n  const {\n    0: preview,\n    1: setPreview\n  } = useState(\"\");\n  const {\n    0: action,\n    1: setAction\n  } = useState({\n    code: props.action,\n    modalTitle: props.actionText\n  }); // readonly, modifiable, modify, add\n\n  const [addNoticeMutation, {\n    loading: addNoticeLoading\n  }] = useMutation(ADD_NOTICE);\n  const [updateNoticeMutation, {\n    loading: updateNoticeLoading\n  }] = useMutation(UPDATE_NOTICE);\n  const [deleteNoticeMutation, {\n    loading: deleteNoticeLoading\n  }] = useMutation(DELETE_NOTICE);\n\n  const convertTextIntoMd = async text => {\n    if (!text) return alert(\"내용을 입력하세요.\");\n    const {\n      data,\n      error\n    } = await call({\n      method: \"post\",\n      url: process.env.MDAPI_PATH,\n      data: {\n        text,\n        mode: \"gfm\",\n        context: \"github/gollum\"\n      }\n    });\n\n    if (data) {\n      const doc = new DOMParser().parseFromString(data, \"text/html\");\n      return doc.body.innerHTML;\n    } else if (error) {\n      return null;\n    }\n  };\n\n  const handlePreView = useCallback(async () => {\n    if (loading) return;\n    const md = await convertTextIntoMd(description.value);\n\n    if (md) {\n      setPreview(md);\n    } else {\n      alert(\"미리보기 로드에 실패했습니다.\");\n    }\n  }, [description.value]);\n  const handleRefreshPreview = useCallback(() => {\n    setPreview(\"\");\n  }, []);\n  const handleClose = useCallback(() => {\n    client.writeData({\n      data: {\n        isShowNoticeModal: false\n      }\n    });\n  }, []);\n  const handleShowEdit = useCallback(() => {\n    setAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n  const handleDelete = useCallback(async () => {\n    if (deleteNoticeLoading) return alert(\"요청 중입니다.\");\n    const {\n      data: {\n        deleteNotice\n      }\n    } = await deleteNoticeMutation({\n      variables: {\n        noticeId: props.noticeId\n      }\n    });\n\n    if (deleteNotice) {\n      alert(\"공지사항이 삭제되었습니다.\");\n      window.location.reload();\n    }\n  }, []);\n  const handleSubmit = useCallback(async () => {\n    if (!title.value) {\n      return alert(\"제목을 입력하세요.\");\n    }\n\n    if (!description.value) {\n      return alert(\"내용을 입력하세요.\");\n    }\n\n    if (action.code === \"add\") {\n      if (addNoticeLoading) return alert(\"요청 중입니다.\");\n      const {\n        data: {\n          addNotice\n        }\n      } = await addNoticeMutation({\n        variables: {\n          title: title.value,\n          description: description.value\n        }\n      });\n\n      if (addNotice) {\n        alert(\"공지사항이 등록되었습니다.\");\n        window.location.reload();\n      }\n    } else if (action.code === \"modify\") {\n      if (updateNoticeLoading) return alert(\"요청 중입니다.\");\n      const {\n        data: {\n          updateNotice\n        }\n      } = await updateNoticeMutation({\n        variables: {\n          title: title.value,\n          description: description.value,\n          noticeId: props.noticeId\n        }\n      });\n\n      if (updateNotice) {\n        alert(\"공지사항이 수정되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [action.code, title.value, description.value, addNoticeLoading, updateNoticeLoading]);\n  useEffect(() => {\n    async function update(value) {\n      const md = await convertTextIntoMd(value);\n\n      if (md) {\n        setMdDescription(md);\n      }\n    }\n\n    if (props.description) {\n      update(props.description);\n    }\n  }, []);\n  return __jsx(SetNoticePresenter, {\n    action: action,\n    isMaster: props.isMaster,\n    title: title,\n    description: description,\n    mdDescription: mdDescription,\n    preview: preview,\n    onShowEdit: handleShowEdit,\n    onPreview: handlePreView,\n    onRefreshPreview: handleRefreshPreview,\n    onClose: handleClose,\n    onDelete: handleDelete,\n    onSubmit: handleSubmit\n  });\n});","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetNoticeContainer.js"],"names":["React","useCallback","useState","useEffect","useMutation","useApolloClient","ADD_NOTICE","UPDATE_NOTICE","DELETE_NOTICE","SetNoticePresenter","useInput","useLazyAxios","props","client","loading","call","title","description","mdDescription","setMdDescription","preview","setPreview","action","setAction","code","modalTitle","actionText","addNoticeMutation","addNoticeLoading","updateNoticeMutation","updateNoticeLoading","deleteNoticeMutation","deleteNoticeLoading","convertTextIntoMd","text","alert","data","error","method","url","process","env","MDAPI_PATH","mode","context","doc","DOMParser","parseFromString","body","innerHTML","handlePreView","md","value","handleRefreshPreview","handleClose","writeData","isShowNoticeModal","handleShowEdit","handleDelete","deleteNotice","variables","noticeId","window","location","reload","handleSubmit","addNotice","updateNotice","update","isMaster"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect } from \"react\";\nimport { useMutation, useApolloClient } from \"react-apollo-hooks\";\n\nimport { ADD_NOTICE, UPDATE_NOTICE, DELETE_NOTICE } from \"../../query/notice\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\n\nexport default props => {\n  const client = useApolloClient();\n  const { loading, call } = useLazyAxios();\n  const title = useInput(props.title);\n  const description = useInput(props.description);\n  const [mdDescription, setMdDescription] = useState(\"\");\n  const [preview, setPreview] = useState(\"\");\n  const [action, setAction] = useState({\n    code: props.action,\n    modalTitle: props.actionText\n  }); // readonly, modifiable, modify, add\n\n  const [addNoticeMutation, { loading: addNoticeLoading }] = useMutation(\n    ADD_NOTICE\n  );\n\n  const [updateNoticeMutation, { loading: updateNoticeLoading }] = useMutation(\n    UPDATE_NOTICE\n  );\n\n  const [deleteNoticeMutation, { loading: deleteNoticeLoading }] = useMutation(\n    DELETE_NOTICE\n  );\n\n  const convertTextIntoMd = async text => {\n    if (!text) return alert(\"내용을 입력하세요.\");\n\n    const { data, error } = await call({\n      method: \"post\",\n      url: process.env.MDAPI_PATH,\n      data: {\n        text,\n        mode: \"gfm\",\n        context: \"github/gollum\"\n      }\n    });\n    if (data) {\n      const doc = new DOMParser().parseFromString(data, \"text/html\");\n      return doc.body.innerHTML;\n    } else if (error) {\n      return null;\n    }\n  };\n\n  const handlePreView = useCallback(async () => {\n    if (loading) return;\n    const md = await convertTextIntoMd(description.value);\n\n    if (md) {\n      setPreview(md);\n    } else {\n      alert(\"미리보기 로드에 실패했습니다.\");\n    }\n  }, [description.value]);\n\n  const handleRefreshPreview = useCallback(() => {\n    setPreview(\"\");\n  }, []);\n\n  const handleClose = useCallback(() => {\n    client.writeData({\n      data: {\n        isShowNoticeModal: false\n      }\n    });\n  }, []);\n\n  const handleShowEdit = useCallback(() => {\n    setAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n\n  const handleDelete = useCallback(async () => {\n    if (deleteNoticeLoading) return alert(\"요청 중입니다.\");\n\n    const {\n      data: { deleteNotice }\n    } = await deleteNoticeMutation({\n      variables: {\n        noticeId: props.noticeId\n      }\n    });\n    if (deleteNotice) {\n      alert(\"공지사항이 삭제되었습니다.\");\n      window.location.reload();\n    }\n  }, []);\n\n  const handleSubmit = useCallback(async () => {\n    if (!title.value) {\n      return alert(\"제목을 입력하세요.\");\n    }\n\n    if (!description.value) {\n      return alert(\"내용을 입력하세요.\");\n    }\n\n    if (action.code === \"add\") {\n      if (addNoticeLoading) return alert(\"요청 중입니다.\");\n\n      const {\n        data: { addNotice }\n      } = await addNoticeMutation({\n        variables: {\n          title: title.value,\n          description: description.value\n        }\n      });\n      if (addNotice) {\n        alert(\"공지사항이 등록되었습니다.\");\n        window.location.reload();\n      }\n    } else if (action.code === \"modify\") {\n      if (updateNoticeLoading) return alert(\"요청 중입니다.\");\n\n      const {\n        data: { updateNotice }\n      } = await updateNoticeMutation({\n        variables: {\n          title: title.value,\n          description: description.value,\n          noticeId: props.noticeId\n        }\n      });\n      if (updateNotice) {\n        alert(\"공지사항이 수정되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [\n    action.code,\n    title.value,\n    description.value,\n    addNoticeLoading,\n    updateNoticeLoading\n  ]);\n\n  useEffect(() => {\n    async function update(value) {\n      const md = await convertTextIntoMd(value);\n      if (md) {\n        setMdDescription(md);\n      }\n    }\n    if (props.description) {\n      update(props.description);\n    }\n  }, []);\n\n  return (\n    <SetNoticePresenter\n      action={action}\n      isMaster={props.isMaster}\n      title={title}\n      description={description}\n      mdDescription={mdDescription}\n      preview={preview}\n      onShowEdit={handleShowEdit}\n      onPreview={handlePreView}\n      onRefreshPreview={handleRefreshPreview}\n      onClose={handleClose}\n      onDelete={handleDelete}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}