{"ast":null,"code":"var __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport React, { Fragment } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { usersQuery, recommandUsersQuery } from \"../../graphql/user/query\";\nimport SearchUserPresenter from \"./SearchUserPresenter\";\n\nconst SearchUserContainer = () => {\n  const router = useRouter();\n  const keyword = decodeURIComponent(router.query.keyword);\n  const {\n    data: users,\n    loading: usersLoading\n  } = useQuery(usersQuery, {\n    variables: {\n      keyword,\n      first: 10\n    },\n    ssr: false\n  });\n  const {\n    data: recommandUsers,\n    loading: recommandUsersLoading\n  } = useQuery(recommandUsersQuery, {\n    ssr: false\n  });\n\n  if (!users && usersLoading || !recommandUsers && recommandUsersLoading) {\n    return __jsx(Fragment, null);\n  }\n\n  return __jsx(SearchUserPresenter, {\n    users: users.getUsers,\n    recommandUsers: recommandUsers.getRecommandUsers,\n    keyword: keyword\n  });\n};\n\nexport default SearchUserContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/search/SearchUserContainer.tsx"],"names":["useRouter","React","Fragment","useQuery","usersQuery","recommandUsersQuery","SearchUserPresenter","SearchUserContainer","router","keyword","decodeURIComponent","query","data","users","loading","usersLoading","variables","first","ssr","recommandUsers","recommandUsersLoading","getUsers","getRecommandUsers"],"mappings":";AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,UAAT,EAAqBC,mBAArB,QAAgD,0BAAhD;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;AAEA,MAAMC,mBAAuB,GAAG,MAAM;AACpC,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAMS,OAAO,GAAGC,kBAAkB,CAACF,MAAM,CAACG,KAAP,CAAaF,OAAd,CAAlC;AAEA,QAAM;AAAEG,IAAAA,IAAI,EAAEC,KAAR;AAAeC,IAAAA,OAAO,EAAEC;AAAxB,MAAyCZ,QAAQ,CAACC,UAAD,EAAa;AAClEY,IAAAA,SAAS,EAAE;AACTP,MAAAA,OADS;AAETQ,MAAAA,KAAK,EAAE;AAFE,KADuD;AAKlEC,IAAAA,GAAG,EAAE;AAL6D,GAAb,CAAvD;AAQA,QAAM;AAAEN,IAAAA,IAAI,EAAEO,cAAR;AAAwBL,IAAAA,OAAO,EAAEM;AAAjC,MAA2DjB,QAAQ,CACvEE,mBADuE,EAEvE;AACEa,IAAAA,GAAG,EAAE;AADP,GAFuE,CAAzE;;AAOA,MAAK,CAACL,KAAD,IAAUE,YAAX,IAA6B,CAACI,cAAD,IAAmBC,qBAApD,EAA4E;AAC1E,WAAO,MAAC,QAAD,OAAP;AACD;;AAED,SACE,MAAC,mBAAD;AACE,IAAA,KAAK,EAAEP,KAAK,CAACQ,QADf;AAEE,IAAA,cAAc,EAAEF,cAAc,CAACG,iBAFjC;AAGE,IAAA,OAAO,EAAEb;AAHX,IADF;AAOD,CA9BD;;AAgCA,eAAeF,mBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport React, { FC, Fragment } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { usersQuery, recommandUsersQuery } from \"../../graphql/user/query\";\nimport SearchUserPresenter from \"./SearchUserPresenter\";\n\nconst SearchUserContainer: FC = () => {\n  const router = useRouter();\n  const keyword = decodeURIComponent(router.query.keyword as string);\n\n  const { data: users, loading: usersLoading } = useQuery(usersQuery, {\n    variables: {\n      keyword,\n      first: 10\n    },\n    ssr: false\n  });\n\n  const { data: recommandUsers, loading: recommandUsersLoading } = useQuery(\n    recommandUsersQuery,\n    {\n      ssr: false\n    }\n  );\n\n  if ((!users && usersLoading) || (!recommandUsers && recommandUsersLoading)) {\n    return <Fragment />;\n  }\n\n  return (\n    <SearchUserPresenter\n      users={users.getUsers}\n      recommandUsers={recommandUsers.getRecommandUsers}\n      keyword={keyword}\n    />\n  );\n};\n\nexport default SearchUserContainer;\n"]},"metadata":{},"sourceType":"module"}