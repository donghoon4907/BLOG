{"ast":null,"code":"var _jsxFileName = \"/Users/idonghun/Desktop/vss/frontend/components/modal/SetNoticeContainer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssState, useVssDispatch, HIDE_NOTICE_MODAL } from \"../../context\";\n\nconst SetNoticeContainer = () => {\n  const dispatch = useVssDispatch();\n  const {\n    activeNotice,\n    isMaster\n  } = useVssState();\n  const {\n    loading,\n    call\n  } = useLazyAxios();\n  const modalTitle = useInput(activeNotice.title);\n  const modalDescription = useInput(activeNotice.description);\n  const {\n    0: mdDescription,\n    1: setMdDescription\n  } = useState(\"\");\n  const {\n    0: preview,\n    1: setPreview\n  } = useState(\"\");\n  const {\n    0: modalAction,\n    1: setModalAction\n  } = useState({\n    code: activeNotice.action,\n    modalTitle: activeNotice.actionText\n  }); // readonly, modifiable, modify, add\n\n  const [set, {\n    loading: setNoticeLoading\n  }] = useMutation(activeNotice.noticeId ? updateNoticeMutation : addNoticeMutation);\n  const [remove, {\n    loading: removeNoticeLoading\n  }] = useMutation(removeNoticeMutation);\n\n  const convertTextIntoMd = async text => {\n    const {\n      data,\n      error\n    } = await call({\n      method: \"post\",\n      url: process.env.MDAPI_PATH,\n      data: {\n        text,\n        mode: \"gfm\",\n        context: \"github/gollum\"\n      }\n    });\n\n    if (data) {\n      const doc = new DOMParser().parseFromString(data, \"text/html\");\n      return doc.body.innerHTML;\n    } else if (error) {\n      return null;\n    } else {\n      throw new Error(\"please, check useLazyAxios\");\n    }\n  };\n\n  const handlePreView = useCallback(async () => {\n    if (loading) return;\n\n    if (!modalDescription.value) {\n      return alert(\"내용을 입력하세요.\");\n    }\n\n    try {\n      const md = await convertTextIntoMd(modalDescription.value);\n\n      if (md) {\n        setPreview(md);\n      }\n    } catch {\n      alert(\"미리보기 로드에 실패했습니다.\");\n    }\n  }, [modalDescription.value]);\n  const handleRefreshPreview = useCallback(() => {\n    setPreview(\"\");\n  }, []);\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: HIDE_NOTICE_MODAL\n    });\n  }, []);\n  const handleShowEdit = useCallback(() => {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n  const handleDelete = useCallback(async () => {\n    if (removeNoticeLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"공지사항을 삭제하시겠어요?\");\n\n    if (tf) {\n      const {\n        data: {\n          deleteNotice\n        }\n      } = await remove({\n        variables: {\n          noticeId: activeNotice.noticeId\n        }\n      });\n\n      if (deleteNotice) {\n        alert(\"공지사항이 삭제되었습니다.\");\n      }\n    }\n  }, [removeNoticeLoading]);\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n\n    if (setNoticeLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(`입력한 내용으로 ${modalAction.code === \"add\" ? \"등록\" : \"수정\"}하시겠어요?`);\n\n    if (tf) {\n      try {\n        const {\n          data: {\n            addNotice,\n            updateNotice\n          }\n        } = await set({\n          variables: {\n            title: modalTitle.value,\n            description: modalDescription.value,\n            noticeId: activeNotice.noticeId\n          }\n        });\n\n        if (updateNotice) {\n          alert(\"공지사항이 수정되었습니다.\");\n        } else if (addNotice) {\n          alert(\"공지사항이 등록되었습니다.\");\n        }\n      } catch (error) {\n        const {\n          message\n        } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [modalAction.code, modalTitle.value, modalDescription.value, setNoticeLoading]);\n  useEffect(() => {\n    async function loadDescription(value) {\n      const md = await convertTextIntoMd(value);\n\n      if (md) {\n        setMdDescription(md);\n      }\n    }\n\n    if (activeNotice.description) {\n      loadDescription(activeNotice.description);\n    }\n  }, [activeNotice.description]);\n  return __jsx(SetNoticePresenter, {\n    loading: loading,\n    removeNoticeLoading: removeNoticeLoading,\n    setNoticeLoading: setNoticeLoading,\n    action: modalAction,\n    isMaster: isMaster,\n    title: modalTitle,\n    description: modalDescription,\n    mdDescription: mdDescription,\n    preview: preview,\n    onShowEdit: handleShowEdit,\n    onPreview: handlePreView,\n    onRefreshPreview: handleRefreshPreview,\n    onClose: handleClose,\n    onDelete: handleDelete,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default SetNoticeContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetNoticeContainer.tsx"],"names":["React","useCallback","useState","useEffect","useMutation","addNoticeMutation","updateNoticeMutation","removeNoticeMutation","SetNoticePresenter","useInput","useLazyAxios","useVssState","useVssDispatch","HIDE_NOTICE_MODAL","SetNoticeContainer","dispatch","activeNotice","isMaster","loading","call","modalTitle","title","modalDescription","description","mdDescription","setMdDescription","preview","setPreview","modalAction","setModalAction","code","action","actionText","set","setNoticeLoading","noticeId","remove","removeNoticeLoading","convertTextIntoMd","text","data","error","method","url","process","env","MDAPI_PATH","mode","context","doc","DOMParser","parseFromString","body","innerHTML","Error","handlePreView","value","alert","md","handleRefreshPreview","handleClose","type","handleShowEdit","handleDelete","tf","confirm","deleteNotice","variables","handleSubmit","e","preventDefault","addNotice","updateNotice","message","JSON","parse","loadDescription"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,SAAvC,QAAuE,OAAvE;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AACA,SAASC,oBAAT,QAAqC,sCAArC;AACA,SAASC,oBAAT,QAAqC,sCAArC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,aAAvC;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,iBAAtC,QAA+D,eAA/D;;AAEA,MAAMC,kBAAsB,GAAG,MAAM;AACnC,QAAMC,QAAQ,GAAGH,cAAc,EAA/B;AACA,QAAM;AAAEI,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA6BN,WAAW,EAA9C;AACA,QAAM;AAAEO,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBT,YAAY,EAAtC;AACA,QAAMU,UAAU,GAAGX,QAAQ,CAACO,YAAY,CAACK,KAAd,CAA3B;AACA,QAAMC,gBAAgB,GAAGb,QAAQ,CAACO,YAAY,CAACO,WAAd,CAAjC;AACA,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCvB,QAAQ,CAAS,EAAT,CAAlD;AACA,QAAM;AAAA,OAACwB,OAAD;AAAA,OAAUC;AAAV,MAAwBzB,QAAQ,CAAS,EAAT,CAAtC;AACA,QAAM;AAAA,OAAC0B,WAAD;AAAA,OAAcC;AAAd,MAAgC3B,QAAQ,CAAM;AAClD4B,IAAAA,IAAI,EAAEd,YAAY,CAACe,MAD+B;AAElDX,IAAAA,UAAU,EAAEJ,YAAY,CAACgB;AAFyB,GAAN,CAA9C,CARmC,CAW/B;;AAEJ,QAAM,CAACC,GAAD,EAAM;AAAEf,IAAAA,OAAO,EAAEgB;AAAX,GAAN,IAAuC9B,WAAW,CACtDY,YAAY,CAACmB,QAAb,GAAwB7B,oBAAxB,GAA+CD,iBADO,CAAxD;AAIA,QAAM,CAAC+B,MAAD,EAAS;AAAElB,IAAAA,OAAO,EAAEmB;AAAX,GAAT,IAA6CjC,WAAW,CAC5DG,oBAD4D,CAA9D;;AAIA,QAAM+B,iBAAiB,GAAG,MAAOC,IAAP,IAAwB;AAChD,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkB,MAAMtB,IAAI,CAAC;AACjCuB,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,UAFgB;AAGjCN,MAAAA,IAAI,EAAE;AACJD,QAAAA,IADI;AAEJQ,QAAAA,IAAI,EAAE,KAFF;AAGJC,QAAAA,OAAO,EAAE;AAHL;AAH2B,KAAD,CAAlC;;AASA,QAAIR,IAAJ,EAAU;AACR,YAAMS,GAAG,GAAG,IAAIC,SAAJ,GAAgBC,eAAhB,CAAgCX,IAAhC,EAAsC,WAAtC,CAAZ;AACA,aAAOS,GAAG,CAACG,IAAJ,CAASC,SAAhB;AACD,KAHD,MAGO,IAAIZ,KAAJ,EAAW;AAChB,aAAO,IAAP;AACD,KAFM,MAEA;AACL,YAAM,IAAIa,KAAJ,CAAU,4BAAV,CAAN;AACD;AACF,GAlBD;;AAoBA,QAAMC,aAAa,GAAGtD,WAAW,CAAC,YAAY;AAC5C,QAAIiB,OAAJ,EAAa;;AACb,QAAI,CAACI,gBAAgB,CAACkC,KAAtB,EAA6B;AAC3B,aAAOC,KAAK,CAAC,YAAD,CAAZ;AACD;;AACD,QAAI;AACF,YAAMC,EAAE,GAAG,MAAMpB,iBAAiB,CAAChB,gBAAgB,CAACkC,KAAlB,CAAlC;;AAEA,UAAIE,EAAJ,EAAQ;AACN/B,QAAAA,UAAU,CAAC+B,EAAD,CAAV;AACD;AACF,KAND,CAME,MAAM;AACND,MAAAA,KAAK,CAAC,kBAAD,CAAL;AACD;AACF,GAdgC,EAc9B,CAACnC,gBAAgB,CAACkC,KAAlB,CAd8B,CAAjC;AAgBA,QAAMG,oBAAoB,GAAG1D,WAAW,CAAC,MAAM;AAC7C0B,IAAAA,UAAU,CAAC,EAAD,CAAV;AACD,GAFuC,EAErC,EAFqC,CAAxC;AAIA,QAAMiC,WAAW,GAAG3D,WAAW,CAAC,MAAM;AACpCc,IAAAA,QAAQ,CAAC;AACP8C,MAAAA,IAAI,EAAEhD;AADC,KAAD,CAAR;AAGD,GAJ8B,EAI5B,EAJ4B,CAA/B;AAMA,QAAMiD,cAAc,GAAG7D,WAAW,CAAC,MAAM;AACvC4B,IAAAA,cAAc,CAAC;AACbC,MAAAA,IAAI,EAAE,QADO;AAEbV,MAAAA,UAAU,EAAE;AAFC,KAAD,CAAd;AAID,GALiC,EAK/B,EAL+B,CAAlC;AAOA,QAAM2C,YAAY,GAAG9D,WAAW,CAAC,YAAY;AAC3C,QAAIoC,mBAAJ,EAAyB;AACvB,aAAOoB,KAAK,CAAC,sBAAD,CAAZ;AACD;;AAED,UAAMO,EAAE,GAAGC,OAAO,CAAC,gBAAD,CAAlB;;AAEA,QAAID,EAAJ,EAAQ;AACN,YAAM;AACJxB,QAAAA,IAAI,EAAE;AAAE0B,UAAAA;AAAF;AADF,UAEF,MAAM9B,MAAM,CAAC;AACf+B,QAAAA,SAAS,EAAE;AACThC,UAAAA,QAAQ,EAAEnB,YAAY,CAACmB;AADd;AADI,OAAD,CAFhB;;AAOA,UAAI+B,YAAJ,EAAkB;AAChBT,QAAAA,KAAK,CAAC,gBAAD,CAAL;AACD;AACF;AACF,GAnB+B,EAmB7B,CAACpB,mBAAD,CAnB6B,CAAhC;AAqBA,QAAM+B,YAAY,GAAGnE,WAAW,CAC9B,MAAOoE,CAAP,IAAyC;AACvCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIpC,gBAAJ,EAAsB;AACpB,aAAOuB,KAAK,CAAC,sBAAD,CAAZ;AACD;;AAED,UAAMO,EAAE,GAAGC,OAAO,CACf,YACCrC,WAAW,CAACE,IAAZ,KAAqB,KAArB,GAA6B,IAA7B,GAAoC,IACrC,QAHe,CAAlB;;AAMA,QAAIkC,EAAJ,EAAQ;AACN,UAAI;AACF,cAAM;AACJxB,UAAAA,IAAI,EAAE;AAAE+B,YAAAA,SAAF;AAAaC,YAAAA;AAAb;AADF,YAEF,MAAMvC,GAAG,CAAC;AACZkC,UAAAA,SAAS,EAAE;AACT9C,YAAAA,KAAK,EAAED,UAAU,CAACoC,KADT;AAETjC,YAAAA,WAAW,EAAED,gBAAgB,CAACkC,KAFrB;AAGTrB,YAAAA,QAAQ,EAAEnB,YAAY,CAACmB;AAHd;AADC,SAAD,CAFb;;AASA,YAAIqC,YAAJ,EAAkB;AAChBf,UAAAA,KAAK,CAAC,gBAAD,CAAL;AACD,SAFD,MAEO,IAAIc,SAAJ,EAAe;AACpBd,UAAAA,KAAK,CAAC,gBAAD,CAAL;AACD;AACF,OAfD,CAeE,OAAOhB,KAAP,EAAc;AACd,cAAM;AAAEgC,UAAAA;AAAF,YAAcC,IAAI,CAACC,KAAL,CAAWlC,KAAK,CAACgC,OAAjB,CAApB;AACAhB,QAAAA,KAAK,CAACgB,OAAD,CAAL;AACD;AACF;AACF,GAlC6B,EAmC9B,CACE7C,WAAW,CAACE,IADd,EAEEV,UAAU,CAACoC,KAFb,EAGElC,gBAAgB,CAACkC,KAHnB,EAIEtB,gBAJF,CAnC8B,CAAhC;AA2CA/B,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeyE,eAAf,CAA+BpB,KAA/B,EAA8C;AAC5C,YAAME,EAAE,GAAG,MAAMpB,iBAAiB,CAACkB,KAAD,CAAlC;;AACA,UAAIE,EAAJ,EAAQ;AACNjC,QAAAA,gBAAgB,CAACiC,EAAD,CAAhB;AACD;AACF;;AACD,QAAI1C,YAAY,CAACO,WAAjB,EAA8B;AAC5BqD,MAAAA,eAAe,CAAC5D,YAAY,CAACO,WAAd,CAAf;AACD;AACF,GAVQ,EAUN,CAACP,YAAY,CAACO,WAAd,CAVM,CAAT;AAYA,SACE,MAAC,kBAAD;AACE,IAAA,OAAO,EAAEL,OADX;AAEE,IAAA,mBAAmB,EAAEmB,mBAFvB;AAGE,IAAA,gBAAgB,EAAEH,gBAHpB;AAIE,IAAA,MAAM,EAAEN,WAJV;AAKE,IAAA,QAAQ,EAAEX,QALZ;AAME,IAAA,KAAK,EAAEG,UANT;AAOE,IAAA,WAAW,EAAEE,gBAPf;AAQE,IAAA,aAAa,EAAEE,aARjB;AASE,IAAA,OAAO,EAAEE,OATX;AAUE,IAAA,UAAU,EAAEoC,cAVd;AAWE,IAAA,SAAS,EAAEP,aAXb;AAYE,IAAA,gBAAgB,EAAEI,oBAZpB;AAaE,IAAA,OAAO,EAAEC,WAbX;AAcE,IAAA,QAAQ,EAAEG,YAdZ;AAeE,IAAA,QAAQ,EAAEK,YAfZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAmBD,CAzKD;;AA2KA,eAAetD,kBAAf","sourcesContent":["import React, { useCallback, useState, useEffect, FC, FormEvent } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssState, useVssDispatch, HIDE_NOTICE_MODAL } from \"../../context\";\n\nconst SetNoticeContainer: FC = () => {\n  const dispatch = useVssDispatch();\n  const { activeNotice, isMaster } = useVssState();\n  const { loading, call } = useLazyAxios();\n  const modalTitle = useInput(activeNotice.title);\n  const modalDescription = useInput(activeNotice.description);\n  const [mdDescription, setMdDescription] = useState<string>(\"\");\n  const [preview, setPreview] = useState<string>(\"\");\n  const [modalAction, setModalAction] = useState<any>({\n    code: activeNotice.action,\n    modalTitle: activeNotice.actionText\n  }); // readonly, modifiable, modify, add\n\n  const [set, { loading: setNoticeLoading }] = useMutation(\n    activeNotice.noticeId ? updateNoticeMutation : addNoticeMutation\n  );\n\n  const [remove, { loading: removeNoticeLoading }] = useMutation(\n    removeNoticeMutation\n  );\n\n  const convertTextIntoMd = async (text: string) => {\n    const { data, error } = await call({\n      method: \"post\",\n      url: process.env.MDAPI_PATH,\n      data: {\n        text,\n        mode: \"gfm\",\n        context: \"github/gollum\"\n      }\n    });\n    if (data) {\n      const doc = new DOMParser().parseFromString(data, \"text/html\");\n      return doc.body.innerHTML;\n    } else if (error) {\n      return null;\n    } else {\n      throw new Error(\"please, check useLazyAxios\");\n    }\n  };\n\n  const handlePreView = useCallback(async () => {\n    if (loading) return;\n    if (!modalDescription.value) {\n      return alert(\"내용을 입력하세요.\");\n    }\n    try {\n      const md = await convertTextIntoMd(modalDescription.value);\n\n      if (md) {\n        setPreview(md);\n      }\n    } catch {\n      alert(\"미리보기 로드에 실패했습니다.\");\n    }\n  }, [modalDescription.value]);\n\n  const handleRefreshPreview = useCallback(() => {\n    setPreview(\"\");\n  }, []);\n\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: HIDE_NOTICE_MODAL\n    });\n  }, []);\n\n  const handleShowEdit = useCallback(() => {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n\n  const handleDelete = useCallback(async () => {\n    if (removeNoticeLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"공지사항을 삭제하시겠어요?\");\n\n    if (tf) {\n      const {\n        data: { deleteNotice }\n      } = await remove({\n        variables: {\n          noticeId: activeNotice.noticeId\n        }\n      });\n      if (deleteNotice) {\n        alert(\"공지사항이 삭제되었습니다.\");\n      }\n    }\n  }, [removeNoticeLoading]);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (setNoticeLoading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n\n      const tf = confirm(\n        `입력한 내용으로 ${\n          modalAction.code === \"add\" ? \"등록\" : \"수정\"\n        }하시겠어요?`\n      );\n\n      if (tf) {\n        try {\n          const {\n            data: { addNotice, updateNotice }\n          } = await set({\n            variables: {\n              title: modalTitle.value,\n              description: modalDescription.value,\n              noticeId: activeNotice.noticeId\n            }\n          });\n          if (updateNotice) {\n            alert(\"공지사항이 수정되었습니다.\");\n          } else if (addNotice) {\n            alert(\"공지사항이 등록되었습니다.\");\n          }\n        } catch (error) {\n          const { message } = JSON.parse(error.message);\n          alert(message);\n        }\n      }\n    },\n    [\n      modalAction.code,\n      modalTitle.value,\n      modalDescription.value,\n      setNoticeLoading\n    ]\n  );\n\n  useEffect(() => {\n    async function loadDescription(value: string) {\n      const md = await convertTextIntoMd(value);\n      if (md) {\n        setMdDescription(md);\n      }\n    }\n    if (activeNotice.description) {\n      loadDescription(activeNotice.description);\n    }\n  }, [activeNotice.description]);\n\n  return (\n    <SetNoticePresenter\n      loading={loading}\n      removeNoticeLoading={removeNoticeLoading}\n      setNoticeLoading={setNoticeLoading}\n      action={modalAction}\n      isMaster={isMaster}\n      title={modalTitle}\n      description={modalDescription}\n      mdDescription={mdDescription}\n      preview={preview}\n      onShowEdit={handleShowEdit}\n      onPreview={handlePreView}\n      onRefreshPreview={handleRefreshPreview}\n      onClose={handleClose}\n      onDelete={handleDelete}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SetNoticeContainer;\n"]},"metadata":{},"sourceType":"module"}