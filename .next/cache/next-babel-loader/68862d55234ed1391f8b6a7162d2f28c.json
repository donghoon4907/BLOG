{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport redirect from \"./redirect\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nexport default /*#__PURE__*/(function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var result, _yield$context$apollo, getMyProfile, _JSON$parse, message, status;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            result = {};\n            _context.prev = 1;\n            _context.next = 4;\n            return context.apolloClient.query({\n              query: meQuery\n            });\n\n          case 4:\n            _yield$context$apollo = _context.sent;\n            getMyProfile = _yield$context$apollo.getMyProfile;\n\n            if (getMyProfile) {\n              result[\"data\"] = getMyProfile;\n            }\n\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n\n            try {\n              _JSON$parse = JSON.parse(_context.t0.message), message = _JSON$parse.message, status = _JSON$parse.status;\n\n              if (status === 401) {\n                alert(\"세션이 만료되었습니다. 로그인 화면으로 이동합니다.\");\n                redirect(context.ctx, \"/login\");\n              } else {\n                result[\"error\"] = message;\n              }\n            } catch (_unused) {\n              result[\"error\"] = _context.t0.message;\n            }\n\n          case 12:\n            _context.prev = 12;\n            return _context.abrupt(\"return\", result);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9, 12, 15]]);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n})();\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/lib/isAuthenticated.ts"],"names":["result","getMyProfile","query","meQuery","message","status","JSON","alert","redirect","context"],"mappings":";;AAAA,OAAA,QAAA,MAAA,YAAA;AACA,SAAA,OAAA,QAAA,0BAAA;AAOA,eAAA,aAAA,CAAA,YAAA;AAAA,MAAA,IAAA,GAAA,iBAAA,EAAA,aAAA,mBAAA,CAAA,IAAA,CAAe,SAAA,OAAA,CAAA,OAAA,EAAA;AAAA,QAAA,MAAA,EAAA,qBAAA,EAAA,YAAA,EAAA,WAAA,EAAA,OAAA,EAAA,MAAA;;AAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,SAAA,QAAA,CAAA,QAAA,EAAA;AAAA,aAAA,CAAA,EAAA;AAAA,gBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,eAAA,CAAA;AACPA,YAAAA,MADO,GAAA,EACPA;AADO,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,mBAGoB,OAAO,CAAP,YAAA,CAAA,KAAA,CAA2B;AACxDE,cAAAA,KAAK,EAAEC;AADiD,aAA3B,CAHpB;;AAAA,eAAA,CAAA;AAAA,YAAA,qBAAA,GAAA,QAAA,CAAA,IAAA;AAGHF,YAAAA,YAHG,GAAA,qBAAA,CAAA,YAGHA;;AAGR,gBAAA,YAAA,EAAkB;AAChBD,cAAAA,MAAM,CAANA,MAAM,CAANA,GAAAA,YAAAA;AACD;;AARU,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA;;AAAA,eAAA,CAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,CAAA;AAAA,YAAA,QAAA,CAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA;;AAUX,gBAAI;AAAA,cAAA,WAAA,GAC0BM,IAAI,CAAJA,KAAAA,CAAW,QAAA,CAAA,EAAA,CADrC,OAC0BA,CAD1B,EACMF,OADN,GAAA,WAAA,CAAA,OAAA,EACeC,MADf,GAAA,WAAA,CAAA,MAAA;;AAEF,kBAAIA,MAAM,KAAV,GAAA,EAAoB;AAClBE,gBAAAA,KAAK,CAALA,8BAAK,CAALA;AACAC,gBAAAA,QAAQ,CAACC,OAAO,CAAR,GAAA,EAARD,QAAQ,CAARA;AAFF,eAAA,MAGO;AACLR,gBAAAA,MAAM,CAANA,OAAM,CAANA,GAAAA,OAAAA;AACD;AAPH,aAAA,CAQE,OAAA,OAAA,EAAM;AACNA,cAAAA,MAAM,CAANA,OAAM,CAANA,GAAkB,QAAA,CAAA,EAAA,CAAlBA,OAAAA;AACD;;AApBU,eAAA,EAAA;AAAA,YAAA,QAAA,CAAA,IAAA,GAAA,EAAA;AAAA,mBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA;;AAAA,eAAA,EAAA;AAAA,eAAA,KAAA;AAAA,mBAAA,QAAA,CAAA,IAAA,EAAA;AAAA;AAAA;AAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA;AAAf,GAAA,CAAA,CAAA;;AAAA,SAAA,UAAA,EAAA,EAAA;AAAA,WAAA,IAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AAAA,GAAA;AAAA,CAAA,GAAA","sourcesContent":["import redirect from \"./redirect\";\nimport { meQuery } from \"../graphql/auth/query/me\";\n\ntype Props = {\n  data?: object;\n  error?: string;\n};\n\nexport default async (context: any): Promise<Props> => {\n  const result = {};\n  try {\n    const { getMyProfile } = await context.apolloClient.query({\n      query: meQuery\n    });\n    if (getMyProfile) {\n      result[\"data\"] = getMyProfile;\n    }\n  } catch (error) {\n    try {\n      const { message, status } = JSON.parse(error.message);\n      if (status === 401) {\n        alert(\"세션이 만료되었습니다. 로그인 화면으로 이동합니다.\");\n        redirect(context.ctx, \"/login\");\n      } else {\n        result[\"error\"] = message;\n      }\n    } catch {\n      result[\"error\"] = error.message;\n    }\n  } finally {\n    return result;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}