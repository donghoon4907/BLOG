{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\"; // import { user } from \"../graphql/page/query/search\";\n\nimport { usersQuery } from \"../graphql/user/query\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nimport Layout from \"../components/common/Layout\";\nimport Section from \"../components/common/Section\";\nimport isBrowser from \"../lib/isBrowser\";\n\nvar Search = function Search(test) {\n  _s();\n\n  console.log(test);\n  var dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    skip: !isBrowser,\n    onCompleted: function onCompleted(_ref) {\n      var getMyProfile = _ref.getMyProfile;\n      var id = getMyProfile.id,\n          nickname = getMyProfile.nickname,\n          email = getMyProfile.email,\n          avatar = getMyProfile.avatar,\n          isMaster = getMyProfile.isMaster;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname: nickname,\n        email: email,\n        avatar: avatar,\n        isMaster: isMaster\n      });\n    }\n  });\n  return __jsx(Layout, {\n    title: \"\\uAC80\\uC0C9\\uACB0\\uACFC\"\n  }, __jsx(Section, null));\n};\n\n_s(Search, \"jV7g94KRg7WDCZmKxPP9DnOJQYM=\", false, function () {\n  return [useVssDispatch, useQuery];\n});\n\n_c = Search;\n\nSearch.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var keyword, apolloClient;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            keyword = context.query.keyword;\n            apolloClient = initializeApollo();\n            _context.next = 4;\n            return apolloClient.query({\n              query: usersQuery,\n              variables: {\n                first: 3,\n                keyword: keyword\n              }\n            });\n\n          case 4:\n            return _context.abrupt(\"return\", {\n              props: {\n                initialApolloState: apolloClient.cache.extract()\n              }\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search.tsx"],"names":["React","useQuery","initializeApollo","usersQuery","meQuery","useVssDispatch","SET_ME","Layout","Section","isBrowser","Search","test","console","log","dispatch","skip","onCompleted","getMyProfile","id","nickname","email","avatar","isMaster","type","userId","getInitialProps","context","keyword","query","apolloClient","variables","first","props","initialApolloState","cache","extract"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,eAAjC,C,CACA;;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,YAAvC;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AAGA,OAAOC,SAAP,MAAsB,kBAAtB;;AAEA,IAAMC,MAAgB,GAAG,SAAnBA,MAAmB,CAAAC,IAAI,EAAI;AAAA;;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,MAAMG,QAAQ,GAAGT,cAAc,EAA/B;AACAJ,EAAAA,QAAQ,CAACG,OAAD,EAAU;AAChBW,IAAAA,IAAI,EAAE,CAACN,SADS;AAEhBO,IAAAA,WAAW,EAAE,2BAAsB;AAAA,UAAnBC,YAAmB,QAAnBA,YAAmB;AAAA,UACzBC,EADyB,GACiBD,YADjB,CACzBC,EADyB;AAAA,UACrBC,QADqB,GACiBF,YADjB,CACrBE,QADqB;AAAA,UACXC,KADW,GACiBH,YADjB,CACXG,KADW;AAAA,UACJC,MADI,GACiBJ,YADjB,CACJI,MADI;AAAA,UACIC,QADJ,GACiBL,YADjB,CACIK,QADJ;AAEjCR,MAAAA,QAAQ,CAAC;AACPS,QAAAA,IAAI,EAAEjB,MADC;AAEPkB,QAAAA,MAAM,EAAEN,EAFD;AAGPC,QAAAA,QAAQ,EAARA,QAHO;AAIPC,QAAAA,KAAK,EAALA,KAJO;AAKPC,QAAAA,MAAM,EAANA,MALO;AAMPC,QAAAA,QAAQ,EAARA;AANO,OAAD,CAAR;AAQD;AAZe,GAAV,CAAR;AAcA,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC;AAAd,KACE,MAAC,OAAD,OADF,CADF;AAQD,CAzBD;;GAAMZ,M;UAEaL,c,EACjBJ,Q;;;KAHIS,M;;AA2BNA,MAAM,CAACe,eAAP;AAAA,uEAAyB,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,YAAAA,OADe,GACHD,OAAO,CAACE,KADL,CACfD,OADe;AAEjBE,YAAAA,YAFiB,GAEF3B,gBAAgB,EAFd;AAAA;AAAA,mBAGjB2B,YAAY,CAACD,KAAb,CAAmB;AACvBA,cAAAA,KAAK,EAAEzB,UADgB;AAEvB2B,cAAAA,SAAS,EAAE;AACTC,gBAAAA,KAAK,EAAE,CADE;AAETJ,gBAAAA,OAAO,EAAPA;AAFS;AAFY,aAAnB,CAHiB;;AAAA;AAAA,6CAUhB;AACLK,cAAAA,KAAK,EAAE;AACLC,gBAAAA,kBAAkB,EAAEJ,YAAY,CAACK,KAAb,CAAmBC,OAAnB;AADf;AADF,aAVgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA;;AAiBA,eAAezB,MAAf","sourcesContent":["import React from \"react\";\nimport { NextPage } from \"next\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\n// import { user } from \"../graphql/page/query/search\";\nimport { usersQuery } from \"../graphql/user/query\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nimport Layout from \"../components/common/Layout\";\nimport Section from \"../components/common/Section\";\nimport SearchUser from \"../components/search/SearchUserContainer\";\nimport SearchPost from \"../components/search/SearchPostContainer\";\nimport isBrowser from \"../lib/isBrowser\";\n\nconst Search: NextPage = test => {\n  console.log(test);\n  const dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    skip: !isBrowser,\n    onCompleted: ({ getMyProfile }) => {\n      const { id, nickname, email, avatar, isMaster } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n  return (\n    <Layout title=\"검색결과\">\n      <Section>\n        {/* <SearchUser /> */}\n        {/* <SearchPost /> */}\n      </Section>\n    </Layout>\n  );\n};\n\nSearch.getInitialProps = async context => {\n  const { keyword } = context.query;\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: usersQuery,\n    variables: {\n      first: 3,\n      keyword\n    }\n  });\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    }\n  };\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}