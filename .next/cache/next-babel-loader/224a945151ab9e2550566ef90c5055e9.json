{"ast":null,"code":"var _jsxFileName = \"/Users/idonghun/Desktop/vss/frontend/components/search/SearchPostContainer.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from \"next/router\";\nimport React, { useEffect } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\n\nconst SearchPostContainer = () => {\n  const router = useRouter();\n  const variables = {\n    first: 10\n  };\n  router.query.keyword.forEach(v => {\n    const splitQuery = v.split(\"=\");\n    variables[splitQuery[0]] = splitQuery[1];\n  });\n  const {\n    data,\n    loading,\n    fetchMore,\n    networkStatus\n  } = useQuery(postsQuery, {\n    variables,\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const {\n      scrollHeight,\n      clientHeight,\n      scrollTop\n    } = document.documentElement;\n\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: _objectSpread(_objectSpread({}, variables), {}, {\n              skip: data.getPosts.length\n            })\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [data.getPosts, loading]);\n  return __jsx(SearchPostPresenter, {\n    loading: loading,\n    loadingMorePosts: loadingMorePosts,\n    posts: data.getPosts,\n    keyword: variables[\"searchKeyword\"] || \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default SearchPostContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/search/SearchPostContainer.tsx"],"names":["useRouter","React","useEffect","useQuery","NetworkStatus","SearchPostPresenter","postsQuery","SearchPostContainer","router","variables","first","query","keyword","forEach","v","splitQuery","split","data","loading","fetchMore","networkStatus","notifyOnNetworkStatusChange","loadingMorePosts","handleScrollFetchMore","scrollHeight","clientHeight","scrollTop","document","documentElement","getPosts","length","skip","window","addEventListener","removeEventListener"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAqC,OAArC;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,gBAAxC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,MAAMC,mBAAuB,GAAG,MAAM;AACpC,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AAEA,QAAMS,SAAS,GAAG;AAChBC,IAAAA,KAAK,EAAE;AADS,GAAlB;AAICF,EAAAA,MAAM,CAACG,KAAP,CAAaC,OAAd,CAA8BC,OAA9B,CAAsCC,CAAC,IAAI;AACzC,UAAMC,UAAU,GAAGD,CAAC,CAACE,KAAF,CAAQ,GAAR,CAAnB;AACAP,IAAAA,SAAS,CAACM,UAAU,CAAC,CAAD,CAAX,CAAT,GAA2BA,UAAU,CAAC,CAAD,CAArC;AACD,GAHD;AAKA,QAAM;AAAEE,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,SAAjB;AAA4BC,IAAAA;AAA5B,MAA8CjB,QAAQ,CAACG,UAAD,EAAa;AACvEG,IAAAA,SADuE;AAEvEY,IAAAA,2BAA2B,EAAE;AAF0C,GAAb,CAA5D;AAKA,QAAMC,gBAAgB,GAAGF,aAAa,KAAKhB,aAAa,CAACe,SAAzD;;AAEA,QAAMI,qBAAqB,GAAG,MAAM;AAClC,QAAIL,OAAJ,EAAa;AACb,UAAM;AAAEM,MAAAA,YAAF;AAAgBC,MAAAA,YAAhB;AAA8BC,MAAAA;AAA9B,QAA4CC,QAAQ,CAACC,eAA3D;;AACA,QAAIX,IAAI,CAACY,QAAT,EAAmB;AACjB,UAAIH,SAAS,GAAGD,YAAZ,KAA6BD,YAAjC,EAA+C;AAC7C,YAAIP,IAAI,CAACY,QAAL,CAAcC,MAAd,GAAuB,EAAvB,KAA8B,CAAlC,EAAqC;AACnCX,UAAAA,SAAS,CAAC;AACRV,YAAAA,SAAS,kCACJA,SADI;AAEPsB,cAAAA,IAAI,EAAEd,IAAI,CAACY,QAAL,CAAcC;AAFb;AADD,WAAD,CAAT;AAMD;AACF;AACF;AACF,GAfD;;AAiBA5B,EAAAA,SAAS,CAAC,MAAM;AACd8B,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCV,qBAAlC;AACA,WAAO,MAAMS,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCX,qBAArC,CAAb;AACD,GAHQ,EAGN,CAACN,IAAI,CAACY,QAAN,EAAgBX,OAAhB,CAHM,CAAT;AAKA,SACE,MAAC,mBAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,gBAAgB,EAAEI,gBAFpB;AAGE,IAAA,KAAK,EAAEL,IAAI,CAACY,QAHd;AAIE,IAAA,OAAO,EAAEpB,SAAS,CAAC,eAAD,CAAT,IAA8B,EAJzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAjDD;;AAmDA,eAAeF,mBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport React, { useEffect, FC } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\n\nconst SearchPostContainer: FC = () => {\n  const router = useRouter();\n\n  const variables = {\n    first: 10\n  };\n\n  (router.query.keyword as any).forEach(v => {\n    const splitQuery = v.split(\"=\");\n    variables[splitQuery[0]] = splitQuery[1];\n  });\n\n  const { data, loading, fetchMore, networkStatus } = useQuery(postsQuery, {\n    variables,\n    notifyOnNetworkStatusChange: true\n  });\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              ...variables,\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [data.getPosts, loading]);\n\n  return (\n    <SearchPostPresenter\n      loading={loading}\n      loadingMorePosts={loadingMorePosts}\n      posts={data.getPosts}\n      keyword={variables[\"searchKeyword\"] || \"\"}\n    />\n  );\n};\n\nexport default SearchPostContainer;\n"]},"metadata":{},"sourceType":"module"}