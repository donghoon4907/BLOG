{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport Layout from \"../components/common/Layout\";\nimport isAuthenticated from \"../lib/isAuthenticated\";\n\nconst Search = () => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    isAuthenticated();\n    setLoading(false);\n  }, []);\n\n  if (loading) {\n    return __jsx(Fragment, null);\n  }\n\n  return __jsx(Layout, null, \"TEST\");\n};\n\nSearch.getInitialProps = async context => {\n  console.log(context.query);\n  console.log(context.apolloClient);\n};\n\nexport default Search;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search.tsx"],"names":["React","useEffect","useState","Fragment","Layout","isAuthenticated","Search","loading","setLoading","getInitialProps","context","console","log","query","apolloClient"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,QAArC,QAAqD,OAArD;AAEA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,eAAP,MAA4B,wBAA5B;;AAEA,MAAMC,MAAgB,GAAG,MAAM;AAC7B,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBN,QAAQ,CAAC,IAAD,CAAtC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,eAAe;AACfG,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,MAAID,OAAJ,EAAa;AACX,WAAO,MAAC,QAAD,OAAP;AACD;;AAED,SAAO,MAAC,MAAD,eAAP;AACD,CAZD;;AAaAD,MAAM,CAACG,eAAP,GAAyB,MAAOC,OAAP,IAAwB;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,KAApB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACI,YAApB;AACD,CAHD;;AAKA,eAAeR,MAAf","sourcesContent":["import React, { useEffect, useState, Fragment } from \"react\";\nimport { NextPage } from \"next\";\nimport Layout from \"../components/common/Layout\";\nimport isAuthenticated from \"../lib/isAuthenticated\";\n\nconst Search: NextPage = () => {\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    isAuthenticated();\n    setLoading(false);\n  }, []);\n\n  if (loading) {\n    return <Fragment />;\n  }\n\n  return <Layout>TEST</Layout>;\n};\nSearch.getInitialProps = async (context: any) => {\n  console.log(context.query);\n  console.log(context.apolloClient);\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}