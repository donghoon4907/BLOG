{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/idonghun/Desktop/vss/frontend/components/search/SearchPostContainer.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport React, { useEffect } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\n\nvar SearchPostContainer = function SearchPostContainer() {\n  _s();\n\n  var router = useRouter();\n  var keyword, orderBy;\n\n  if (router.query.keyword) {\n    keyword = router.query.keyword[0] || \"\";\n    orderBy = router.query.keyword[1] || \"\";\n  }\n\n  var _useQuery = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      orderBy: orderBy,\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var handleScrollFetchMore = function handleScrollFetchMore() {\n    if (loading) return;\n    var _document$documentEle = document.documentElement,\n        scrollHeight = _document$documentEle.scrollHeight,\n        clientHeight = _document$documentEle.clientHeight,\n        scrollTop = _document$documentEle.scrollTop;\n\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length,\n              searchKeyword: decodeURIComponent(keyword),\n              orderBy: orderBy\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return function () {\n      return window.removeEventListener(\"scroll\", handleScrollFetchMore);\n    };\n  }, [data.getPosts, loading, keyword, orderBy]);\n  return __jsx(SearchPostPresenter, {\n    loading: loading,\n    loadingMorePosts: loadingMorePosts,\n    posts: data.getPosts,\n    keyword: keyword,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  });\n};\n\n_s(SearchPostContainer, \"gjXMs0Ixe893HsCM6GWXpDsLtDA=\", false, function () {\n  return [useRouter, useQuery];\n});\n\n_c = SearchPostContainer;\nexport default SearchPostContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchPostContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/search/SearchPostContainer.tsx"],"names":["useRouter","React","useEffect","useQuery","NetworkStatus","SearchPostPresenter","postsQuery","SearchPostContainer","router","keyword","orderBy","query","variables","searchKeyword","decodeURIComponent","first","notifyOnNetworkStatusChange","data","loading","fetchMore","networkStatus","loadingMorePosts","handleScrollFetchMore","document","documentElement","scrollHeight","clientHeight","scrollTop","getPosts","length","skip","window","addEventListener","removeEventListener"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAqC,OAArC;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,gBAAxC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,IAAMC,mBAAuB,GAAG,SAA1BA,mBAA0B,GAAM;AAAA;;AACpC,MAAMC,MAAM,GAAGR,SAAS,EAAxB;AAEA,MAAIS,OAAJ,EAAaC,OAAb;;AACA,MAAIF,MAAM,CAACG,KAAP,CAAaF,OAAjB,EAA0B;AACxBA,IAAAA,OAAO,GAAGD,MAAM,CAACG,KAAP,CAAaF,OAAb,CAAqB,CAArB,KAA2B,EAArC;AACAC,IAAAA,OAAO,GAAGF,MAAM,CAACG,KAAP,CAAaF,OAAb,CAAqB,CAArB,KAA2B,EAArC;AACD;;AAPmC,kBASgBN,QAAQ,CAACG,UAAD,EAAa;AACvEM,IAAAA,SAAS,EAAE;AACTC,MAAAA,aAAa,EAAEC,kBAAkB,CAACL,OAAD,CADxB;AAETC,MAAAA,OAAO,EAAPA,OAFS;AAGTK,MAAAA,KAAK,EAAE;AAHE,KAD4D;AAMvEC,IAAAA,2BAA2B,EAAE;AAN0C,GAAb,CATxB;AAAA,MAS5BC,IAT4B,aAS5BA,IAT4B;AAAA,MAStBC,OATsB,aAStBA,OATsB;AAAA,MASbC,SATa,aASbA,SATa;AAAA,MASFC,aATE,aASFA,aATE;;AAkBpC,MAAMC,gBAAgB,GAAGD,aAAa,KAAKhB,aAAa,CAACe,SAAzD;;AAEA,MAAMG,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAClC,QAAIJ,OAAJ,EAAa;AADqB,gCAEgBK,QAAQ,CAACC,eAFzB;AAAA,QAE1BC,YAF0B,yBAE1BA,YAF0B;AAAA,QAEZC,YAFY,yBAEZA,YAFY;AAAA,QAEEC,SAFF,yBAEEA,SAFF;;AAGlC,QAAIV,IAAI,CAACW,QAAT,EAAmB;AACjB,UAAID,SAAS,GAAGD,YAAZ,KAA6BD,YAAjC,EAA+C;AAC7C,YAAIR,IAAI,CAACW,QAAL,CAAcC,MAAd,GAAuB,EAAvB,KAA8B,CAAlC,EAAqC;AACnCV,UAAAA,SAAS,CAAC;AACRP,YAAAA,SAAS,EAAE;AACTkB,cAAAA,IAAI,EAAEb,IAAI,CAACW,QAAL,CAAcC,MADX;AAEThB,cAAAA,aAAa,EAAEC,kBAAkB,CAACL,OAAD,CAFxB;AAGTC,cAAAA,OAAO,EAAPA;AAHS;AADH,WAAD,CAAT;AAOD;AACF;AACF;AACF,GAhBD;;AAkBAR,EAAAA,SAAS,CAAC,YAAM;AACd6B,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCV,qBAAlC;AACA,WAAO;AAAA,aAAMS,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCX,qBAArC,CAAN;AAAA,KAAP;AACD,GAHQ,EAGN,CAACL,IAAI,CAACW,QAAN,EAAgBV,OAAhB,EAAyBT,OAAzB,EAAkCC,OAAlC,CAHM,CAAT;AAKA,SACE,MAAC,mBAAD;AACE,IAAA,OAAO,EAAEQ,OADX;AAEE,IAAA,gBAAgB,EAAEG,gBAFpB;AAGE,IAAA,KAAK,EAAEJ,IAAI,CAACW,QAHd;AAIE,IAAA,OAAO,EAAEnB,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAnDD;;GAAMF,mB;UACWP,S,EAQqCG,Q;;;KAThDI,mB;AAqDN,eAAeA,mBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport React, { useEffect, FC } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\n\nconst SearchPostContainer: FC = () => {\n  const router = useRouter();\n\n  let keyword, orderBy;\n  if (router.query.keyword) {\n    keyword = router.query.keyword[0] || \"\";\n    orderBy = router.query.keyword[1] || \"\";\n  }\n\n  const { data, loading, fetchMore, networkStatus } = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      orderBy,\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  });\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length,\n              searchKeyword: decodeURIComponent(keyword),\n              orderBy\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [data.getPosts, loading, keyword, orderBy]);\n\n  return (\n    <SearchPostPresenter\n      loading={loading}\n      loadingMorePosts={loadingMorePosts}\n      posts={data.getPosts}\n      keyword={keyword}\n    />\n  );\n};\n\nexport default SearchPostContainer;\n"]},"metadata":{},"sourceType":"module"}