{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Layout from \"../components/common/Layout\";\n\n// import SearchPost from \"../components/search/SearchPostContainer\";\nvar Search = function Search(props) {\n  var _ref,\n      query = _ref.query; //   const { data: posts, loading, fetchMore, networkStatus } = useQuery(\n  //     postsQuery,\n  //     {\n  //       variables: {\n  //         first: 10,\n  //         keyword: query.keyword\n  //       },\n  //       notifyOnNetworkStatusChange: true\n  //     }\n  //   );\n\n\n  return __jsx(Layout, null, __jsx(\"h1\", null, \"test\"));\n}; // Search.getInitialProps = async ctx => {\n//   const { keyword } = ctx.query;\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: searchQuery,\n//     variables: {\n//       first: 10,\n//       keyword\n//     }\n//   });\n//   return {\n//     query: {\n//       keyword\n//     },\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     },\n//     revalidate: 1\n//   };\n// };\n\n\n_c = Search;\n// export const getStaticProps: GetStaticProps = async context => {\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: searchQuery,\n//     variables: {\n//       first: 10\n//     }\n//   });\n//   console.log(context);\n//   return {\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     },\n//     revalidate: 1\n//   };\n// };\nexport var __N_SSP = true;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search.tsx"],"names":["React","Layout","Search","props","query"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAKA,OAAOC,MAAP,MAAmB,6BAAnB;;AAEA;AAEA,IAAMC,MAAgB,GAAG,SAAnBA,MAAmB,CAAAC,KAAK,EAAI;AAAA;AAAA,MACxBC,KADwB,QACxBA,KADwB,EAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SACE,MAAC,MAAD,QACE,yBADF,CADF;AAKD,CAjBD,C,CAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAvCMF,M;AA+DN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,MAAf","sourcesContent":["import React from \"react\";\nimport { NextPage, GetServerSideProps } from \"next\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport Layout from \"../components/common/Layout\";\nimport { postsQuery } from \"../graphql/post/query\";\n// import SearchPost from \"../components/search/SearchPostContainer\";\n\nconst Search: NextPage = props => {\n  const { query };\n  //   const { data: posts, loading, fetchMore, networkStatus } = useQuery(\n  //     postsQuery,\n  //     {\n  //       variables: {\n  //         first: 10,\n  //         keyword: query.keyword\n  //       },\n  //       notifyOnNetworkStatusChange: true\n  //     }\n  //   );\n  return (\n    <Layout>\n      <h1>test</h1>\n    </Layout>\n  );\n};\n\n// Search.getInitialProps = async ctx => {\n//   const { keyword } = ctx.query;\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: searchQuery,\n//     variables: {\n//       first: 10,\n//       keyword\n//     }\n//   });\n\n//   return {\n//     query: {\n//       keyword\n//     },\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     },\n//     revalidate: 1\n//   };\n// };\n\nexport const getServerSideProps: GetServerSideProps = async ({ query }) => {\n  const { keyword } = query;\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: searchQuery,\n    variables: {\n      first: 10,\n      keyword\n    }\n  });\n\n  return {\n    query: {\n      keyword\n    },\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    },\n    revalidate: 1\n  };\n};\n\n// export const getStaticProps: GetStaticProps = async context => {\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: searchQuery,\n//     variables: {\n//       first: 10\n//     }\n//   });\n//   console.log(context);\n\n//   return {\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     },\n//     revalidate: 1\n//   };\n// };\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}