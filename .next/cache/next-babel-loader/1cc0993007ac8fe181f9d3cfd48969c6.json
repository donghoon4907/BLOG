{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback } from \"react\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\nimport { useVssDispatch, SET_LOGIN_MODAL, SET_ME } from \"../../context\";\n\nvar SignInContainer = function SignInContainer() {\n  _s();\n\n  var dispatch = useVssDispatch();\n\n  var _useLazyQuery = useLazyQuery(meQuery, {\n    onCompleted: function onCompleted(_ref) {\n      var getMyProfile = _ref.getMyProfile;\n      dispatch({\n        type: SET_ME,\n        id: getMyProfile.id,\n        nickname: getMyProfile.nickname,\n        email: getMyProfile.email,\n        avatar: getMyProfile.avatar,\n        isMaster: getMyProfile.isMaster\n      });\n      handleClose();\n    }\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n      me = _useLazyQuery2[0];\n\n  var _useMutation = useMutation(logInMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      login = _useMutation2[0],\n      loading = _useMutation2[1].loading;\n\n  var email = useInput(\"\");\n  var pwd = useInput(\"\");\n  var handleClose = useCallback(function () {\n    dispatch({\n      type: SET_LOGIN_MODAL,\n      payload: false\n    });\n  }, []);\n  var handleSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var _yield$login, logIn, _JSON$parse, message;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n\n              if (!loading) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", alert(\"요청 중입니다. 잠시만 기다려주세요.\"));\n\n            case 3:\n              _context.prev = 3;\n              _context.next = 6;\n              return login({\n                variables: {\n                  email: email.value,\n                  pwd: pwd.value\n                }\n              });\n\n            case 6:\n              _yield$login = _context.sent;\n              logIn = _yield$login.data.logIn;\n\n              if (logIn) {\n                setAccessToken(logIn);\n                me();\n              }\n\n              _context.next = 15;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](3);\n              _JSON$parse = JSON.parse(_context.t0.message), message = _JSON$parse.message;\n              alert(message);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 11]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [email.value, pwd.value, loading]);\n  return __jsx(SignInPresenter, {\n    loading: loading,\n    email: email,\n    pwd: pwd,\n    onClose: handleClose,\n    onSubmit: handleSubmit\n  });\n};\n\n_s(SignInContainer, \"DABtJ4z+OPgqJgGkbe1B785o/MY=\", false, function () {\n  return [useVssDispatch, useLazyQuery, useMutation, useInput, useInput];\n});\n\n_c = SignInContainer;\nexport default SignInContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignInContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SignInContainer.tsx"],"names":["React","useCallback","useLazyQuery","useMutation","useInput","logInMutation","meQuery","SignInPresenter","setAccessToken","useVssDispatch","SET_LOGIN_MODAL","SET_ME","SignInContainer","dispatch","onCompleted","getMyProfile","type","id","nickname","email","avatar","isMaster","handleClose","me","login","loading","pwd","payload","handleSubmit","e","preventDefault","alert","variables","value","logIn","data","JSON","parse","message"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAkD,OAAlD;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,MAA1C,QAAwD,eAAxD;;AAEA,IAAMC,eAAmB,GAAG,SAAtBA,eAAsB,GAAM;AAAA;;AAChC,MAAMC,QAAQ,GAAGJ,cAAc,EAA/B;;AADgC,sBAEnBP,YAAY,CAACI,OAAD,EAAU;AACjCQ,IAAAA,WAAW,EAAE,2BAAsB;AAAA,UAAnBC,YAAmB,QAAnBA,YAAmB;AACjCF,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,MADC;AAEPM,QAAAA,EAAE,EAAEF,YAAY,CAACE,EAFV;AAGPC,QAAAA,QAAQ,EAAEH,YAAY,CAACG,QAHhB;AAIPC,QAAAA,KAAK,EAAEJ,YAAY,CAACI,KAJb;AAKPC,QAAAA,MAAM,EAAEL,YAAY,CAACK,MALd;AAMPC,QAAAA,QAAQ,EAAEN,YAAY,CAACM;AANhB,OAAD,CAAR;AAQAC,MAAAA,WAAW;AACZ;AAXgC,GAAV,CAFO;AAAA;AAAA,MAEzBC,EAFyB;;AAAA,qBAeHpB,WAAW,CAACE,aAAD,CAfR;AAAA;AAAA,MAezBmB,KAfyB;AAAA,MAehBC,OAfgB,oBAehBA,OAfgB;;AAgBhC,MAAMN,KAAK,GAAGf,QAAQ,CAAC,EAAD,CAAtB;AACA,MAAMsB,GAAG,GAAGtB,QAAQ,CAAC,EAAD,CAApB;AAEA,MAAMkB,WAAW,GAAGrB,WAAW,CAAC,YAAM;AACpCY,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEN,eADC;AAEPiB,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GAL8B,EAK5B,EAL4B,CAA/B;AAOA,MAAMC,YAAY,GAAG3B,WAAW;AAAA,yEAC9B,iBAAO4B,CAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEA,cAAAA,CAAC,CAACC,cAAF;;AADF,mBAEML,OAFN;AAAA;AAAA;AAAA;;AAAA,+CAGWM,KAAK,CAAC,sBAAD,CAHhB;;AAAA;AAAA;AAAA;AAAA,qBAQcP,KAAK,CAAC;AACdQ,gBAAAA,SAAS,EAAE;AAAEb,kBAAAA,KAAK,EAAEA,KAAK,CAACc,KAAf;AAAsBP,kBAAAA,GAAG,EAAEA,GAAG,CAACO;AAA/B;AADG,eAAD,CARnB;;AAAA;AAAA;AAOcC,cAAAA,KAPd,gBAOMC,IAPN,CAOcD,KAPd;;AAWI,kBAAIA,KAAJ,EAAW;AACT1B,gBAAAA,cAAc,CAAC0B,KAAD,CAAd;AACAX,gBAAAA,EAAE;AACH;;AAdL;AAAA;;AAAA;AAAA;AAAA;AAAA,4BAgBwBa,IAAI,CAACC,KAAL,CAAW,YAAMC,OAAjB,CAhBxB,EAgBYA,OAhBZ,eAgBYA,OAhBZ;AAiBIP,cAAAA,KAAK,CAACO,OAAD,CAAL;;AAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD8B;;AAAA;AAAA;AAAA;AAAA,OAqB9B,CAACnB,KAAK,CAACc,KAAP,EAAcP,GAAG,CAACO,KAAlB,EAAyBR,OAAzB,CArB8B,CAAhC;AAwBA,SACE,MAAC,eAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,KAAK,EAAEN,KAFT;AAGE,IAAA,GAAG,EAAEO,GAHP;AAIE,IAAA,OAAO,EAAEJ,WAJX;AAKE,IAAA,QAAQ,EAAEM;AALZ,IADF;AASD,CA3DD;;GAAMhB,e;UACaH,c,EACJP,Y,EAagBC,W,EACfC,Q,EACFA,Q;;;KAjBRQ,e;AA6DN,eAAeA,eAAf","sourcesContent":["import React, { useCallback, FormEvent, FC } from \"react\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\nimport { useVssDispatch, SET_LOGIN_MODAL, SET_ME } from \"../../context\";\n\nconst SignInContainer: FC = () => {\n  const dispatch = useVssDispatch();\n  const [me] = useLazyQuery(meQuery, {\n    onCompleted: ({ getMyProfile }) => {\n      dispatch({\n        type: SET_ME,\n        id: getMyProfile.id,\n        nickname: getMyProfile.nickname,\n        email: getMyProfile.email,\n        avatar: getMyProfile.avatar,\n        isMaster: getMyProfile.isMaster\n      });\n      handleClose();\n    }\n  });\n  const [login, { loading }] = useMutation(logInMutation);\n  const email = useInput(\"\");\n  const pwd = useInput(\"\");\n\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_LOGIN_MODAL,\n      payload: false\n    });\n  }, []);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (loading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n      try {\n        const {\n          data: { logIn }\n        } = await login({\n          variables: { email: email.value, pwd: pwd.value }\n        });\n        if (logIn) {\n          setAccessToken(logIn);\n          me();\n        }\n      } catch (error) {\n        const { message } = JSON.parse(error.message);\n        alert(message);\n      }\n    },\n    [email.value, pwd.value, loading]\n  );\n\n  return (\n    <SignInPresenter\n      loading={loading}\n      email={email}\n      pwd={pwd}\n      onClose={handleClose}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SignInContainer;\n"]},"metadata":{},"sourceType":"module"}