{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport PostPresenter from \"./PostPresenter\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport { likeMutation } from \"../../graphql/post/mutation/like\";\nimport { useVssState, useVssDispatch, SHOW_POST_MODAL, SET_LOGIN_MODAL } from \"../../context\";\nimport { getAccessToken } from \"../../lib/token\";\n\nvar PostContainer = function PostContainer(_ref) {\n  _s();\n\n  var id = _ref.id,\n      title = _ref.title,\n      description = _ref.description,\n      createdAt = _ref.createdAt,\n      user = _ref.user,\n      video = _ref.video,\n      status = _ref.status,\n      likes = _ref.likes,\n      room = _ref.room;\n\n  var _useVssState = useVssState(),\n      userId = _useVssState.id;\n\n  var dispatch = useVssDispatch();\n  var isMyPost = userId || userId === user.id;\n\n  var _useState = useState(likes.some(function (v) {\n    return v.user.id === userId;\n  })),\n      ctrlIsLiked = _useState[0],\n      setCtrlIsLiked = _useState[1];\n\n  var _useState2 = useState(likes.length),\n      ctrlLikeCount = _useState2[0],\n      setCtrlLikeCount = _useState2[1];\n\n  var _useMutation = useMutation(likeMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      like = _useMutation2[0],\n      likeLoading = _useMutation2[1].loading;\n\n  var _useMutation3 = useMutation(removePostMutation),\n      _useMutation4 = _slicedToArray(_useMutation3, 2),\n      remove = _useMutation4[0],\n      removeLoading = _useMutation4[1].loading; // 포스트 채팅방 접근 이벤트\n\n\n  var handleRoom = useCallback(function () {\n    var token = getAccessToken();\n\n    if (token) {//Router.push(`/room/${room.id}`);\n    } else {\n      dispatch({\n        type: SET_LOGIN_MODAL,\n        payload: true\n      });\n    }\n  }, []); // 포스트 수정 이벤트\n\n  var handleUpdate = useCallback(function () {\n    dispatch({\n      type: SHOW_POST_MODAL,\n      isShow: true,\n      id: id,\n      title: title,\n      description: description,\n      status: status,\n      url: video.url\n    });\n  }, []); // 좋아요 / 좋아요 취소 이벤트\n\n  var handleLike = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var token, _JSON$parse, message;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            token = getAccessToken();\n\n            if (!token) {\n              _context.next = 17;\n              break;\n            }\n\n            if (!likeLoading) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", alert(\"요청중입니다. 잠시만 기다려주세요.\"));\n\n          case 4:\n            setCtrlIsLiked(!ctrlIsLiked);\n            setCtrlLikeCount(ctrlIsLiked ? ctrlLikeCount - 1 : ctrlLikeCount + 1);\n            _context.prev = 6;\n            _context.next = 9;\n            return like({\n              variables: {\n                postId: id\n              }\n            });\n\n          case 9:\n            _context.next = 15;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](6);\n            _JSON$parse = JSON.parse(_context.t0.message), message = _JSON$parse.message;\n            alert(message);\n\n          case 15:\n            _context.next = 18;\n            break;\n\n          case 17:\n            dispatch({\n              type: SET_LOGIN_MODAL,\n              payload: true\n            });\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 11]]);\n  })), [ctrlIsLiked, ctrlLikeCount, likeLoading]); // 삭제 이벤트\n\n  var handleDelete = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var tf, _yield$remove, deletePost, _JSON$parse2, message;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!removeLoading) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", alert(\"요청중입니다. 잠시만 기다려주세요.\"));\n\n          case 2:\n            tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n            if (!tf) {\n              _context2.next = 16;\n              break;\n            }\n\n            _context2.prev = 4;\n            _context2.next = 7;\n            return remove({\n              variables: {\n                postId: id\n              }\n            });\n\n          case 7:\n            _yield$remove = _context2.sent;\n            deletePost = _yield$remove.data.deletePost;\n\n            if (deletePost) {\n              alert(\"포스트가 삭제되었습니다.\");\n              window.location.reload();\n            }\n\n            _context2.next = 16;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](4);\n            _JSON$parse2 = JSON.parse(_context2.t0.message), message = _JSON$parse2.message;\n            alert(message);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 12]]);\n  })), [removeLoading]);\n  return __jsx(PostPresenter, {\n    title: title,\n    description: description,\n    status: status,\n    createdAt: createdAt,\n    user: user,\n    video: video,\n    isLiked: ctrlIsLiked,\n    likeCount: ctrlLikeCount,\n    isMyPost: isMyPost,\n    onLike: handleLike,\n    onUpdate: handleUpdate,\n    onRoom: handleRoom,\n    onDelete: handleDelete\n  });\n};\n\n_s(PostContainer, \"Eb70CpciGa0CgHzUqOBPSwLaPoM=\", false, function () {\n  return [useVssState, useVssDispatch, useMutation, useMutation];\n});\n\n_c = PostContainer;\nexport default PostContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/post/PostContainer.tsx"],"names":["React","useState","useCallback","useMutation","PostPresenter","removePostMutation","likeMutation","useVssState","useVssDispatch","SHOW_POST_MODAL","SET_LOGIN_MODAL","getAccessToken","PostContainer","id","title","description","createdAt","user","video","status","likes","room","userId","dispatch","isMyPost","some","v","ctrlIsLiked","setCtrlIsLiked","length","ctrlLikeCount","setCtrlLikeCount","like","likeLoading","loading","remove","removeLoading","handleRoom","token","type","payload","handleUpdate","isShow","url","handleLike","alert","variables","postId","JSON","parse","message","handleDelete","tf","confirm","deletePost","data","window","location","reload"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, FC } from \"react\";\nimport Router from \"next/router\";\nimport { useMutation } from \"@apollo/client\";\nimport PostPresenter from \"./PostPresenter\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport { likeMutation } from \"../../graphql/post/mutation/like\";\nimport {\n  useVssState,\n  useVssDispatch,\n  SHOW_POST_MODAL,\n  SET_LOGIN_MODAL\n} from \"../../context\";\nimport { getAccessToken } from \"../../lib/token\";\n\nexport type PostProps = {\n  id: string;\n  title: string;\n  description: string;\n  video: any;\n  user: any;\n  likes: any;\n  createdAt: string;\n  updatedAt: string;\n  status: string;\n  room: any;\n};\n\nconst PostContainer: FC<PostProps> = ({\n  id,\n  title,\n  description,\n  createdAt,\n  user,\n  video,\n  status,\n  likes,\n  room\n}) => {\n  const { id: userId } = useVssState();\n  const dispatch = useVssDispatch();\n\n  const isMyPost = userId || userId === user.id;\n  const [ctrlIsLiked, setCtrlIsLiked] = useState<boolean>(\n    likes.some((v: any) => v.user.id === userId)\n  );\n  const [ctrlLikeCount, setCtrlLikeCount] = useState<number>(likes.length);\n\n  const [like, { loading: likeLoading }] = useMutation(likeMutation);\n  const [remove, { loading: removeLoading }] = useMutation(removePostMutation);\n\n  // 포스트 채팅방 접근 이벤트\n  const handleRoom = useCallback(() => {\n    const token = getAccessToken();\n    if (token) {\n      //Router.push(`/room/${room.id}`);\n    } else {\n      dispatch({\n        type: SET_LOGIN_MODAL,\n        payload: true\n      });\n    }\n  }, []);\n\n  // 포스트 수정 이벤트\n  const handleUpdate = useCallback(() => {\n    dispatch({\n      type: SHOW_POST_MODAL,\n      isShow: true,\n      id,\n      title,\n      description,\n      status,\n      url: video.url\n    });\n  }, []);\n\n  // 좋아요 / 좋아요 취소 이벤트\n  const handleLike = useCallback(async () => {\n    const token = getAccessToken();\n    if (token) {\n      if (likeLoading) {\n        return alert(\"요청중입니다. 잠시만 기다려주세요.\");\n      }\n      setCtrlIsLiked(!ctrlIsLiked);\n      setCtrlLikeCount(ctrlIsLiked ? ctrlLikeCount - 1 : ctrlLikeCount + 1);\n\n      try {\n        await like({\n          variables: { postId: id }\n        });\n      } catch (error) {\n        const { message } = JSON.parse(error.message);\n        alert(message);\n      }\n    } else {\n      dispatch({\n        type: SET_LOGIN_MODAL,\n        payload: true\n      });\n    }\n  }, [ctrlIsLiked, ctrlLikeCount, likeLoading]);\n\n  // 삭제 이벤트\n  const handleDelete = useCallback(async () => {\n    if (removeLoading) {\n      return alert(\"요청중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n    if (tf) {\n      try {\n        const {\n          data: { deletePost }\n        } = await remove({\n          variables: { postId: id }\n        });\n\n        if (deletePost) {\n          alert(\"포스트가 삭제되었습니다.\");\n          window.location.reload();\n        }\n      } catch (error) {\n        const { message } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [removeLoading]);\n\n  return (\n    <PostPresenter\n      title={title}\n      description={description}\n      status={status}\n      createdAt={createdAt}\n      user={user}\n      video={video}\n      isLiked={ctrlIsLiked}\n      likeCount={ctrlLikeCount}\n      isMyPost={isMyPost}\n      onLike={handleLike}\n      onUpdate={handleUpdate}\n      onRoom={handleRoom}\n      onDelete={handleDelete}\n    />\n  );\n};\n\nexport default PostContainer;\n"]},"metadata":{},"sourceType":"module"}