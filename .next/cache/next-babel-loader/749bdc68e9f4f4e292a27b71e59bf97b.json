{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport Layout from \"../components/common/Layout\";\n\n// import SearchPost from \"../components/search/SearchPostContainer\";\nconst Search = () => {\n  //   const { query };\n  //   const { data: posts, loading, fetchMore, networkStatus } = useQuery(\n  //     postsQuery,\n  //     {\n  //       variables: {\n  //         first: 10,\n  //         keyword: query.keyword\n  //       },\n  //       notifyOnNetworkStatusChange: true\n  //     }\n  //   );\n  return __jsx(Layout, null, __jsx(\"h1\", null, \"test\"));\n}; // Search.getInitialProps = async ctx => {\n//   const { keyword } = ctx.query;\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: searchQuery,\n//     variables: {\n//       first: 10,\n//       keyword\n//     }\n//   });\n//   return {\n//     query: {\n//       keyword\n//     },\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     },\n//     revalidate: 1\n//   };\n// };\n\n\nexport const getServerSideProps = async ({\n  query\n}) => {\n  console.log(query);\n  const {\n    keyword\n  } = query;\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: searchQuery,\n    variables: {\n      first: 10,\n      keyword\n    }\n  });\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    }\n  };\n};\nexport default Search;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search.tsx"],"names":["React","initializeApollo","searchQuery","Layout","Search","getServerSideProps","query","console","log","keyword","apolloClient","variables","first","props","initialApolloState","cache","extract"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;AAEA;AAEA,MAAMC,MAAgB,GAAG,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACE,MAAC,MAAD,QACE,yBADF,CADF;AAKD,CAjBD,C,CAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,kBAAsC,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AACzEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAcH,KAApB;AACA,QAAMI,YAAY,GAAGT,gBAAgB,EAArC;AACA,QAAMS,YAAY,CAACJ,KAAb,CAAmB;AACvBA,IAAAA,KAAK,EAAEJ,WADgB;AAEvBS,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE,EADE;AAETH,MAAAA;AAFS;AAFY,GAAnB,CAAN;AAQA,SAAO;AACLI,IAAAA,KAAK,EAAE;AACLC,MAAAA,kBAAkB,EAAEJ,YAAY,CAACK,KAAb,CAAmBC,OAAnB;AADf;AADF,GAAP;AAKD,CAjBM;AAmBP,eAAeZ,MAAf","sourcesContent":["import React from \"react\";\nimport { NextPage, GetServerSideProps } from \"next\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport Layout from \"../components/common/Layout\";\nimport { postsQuery } from \"../graphql/post/query\";\n// import SearchPost from \"../components/search/SearchPostContainer\";\n\nconst Search: NextPage = () => {\n  //   const { query };\n  //   const { data: posts, loading, fetchMore, networkStatus } = useQuery(\n  //     postsQuery,\n  //     {\n  //       variables: {\n  //         first: 10,\n  //         keyword: query.keyword\n  //       },\n  //       notifyOnNetworkStatusChange: true\n  //     }\n  //   );\n  return (\n    <Layout>\n      <h1>test</h1>\n    </Layout>\n  );\n};\n\n// Search.getInitialProps = async ctx => {\n//   const { keyword } = ctx.query;\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: searchQuery,\n//     variables: {\n//       first: 10,\n//       keyword\n//     }\n//   });\n\n//   return {\n//     query: {\n//       keyword\n//     },\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     },\n//     revalidate: 1\n//   };\n// };\n\nexport const getServerSideProps: GetServerSideProps = async ({ query }) => {\n  console.log(query);\n  const { keyword } = query;\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: searchQuery,\n    variables: {\n      first: 10,\n      keyword\n    }\n  });\n\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    }\n  };\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}