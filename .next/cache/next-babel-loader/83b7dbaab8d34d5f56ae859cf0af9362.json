{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport PostPresenter from \"./PostPresenter\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport { likeMutation } from \"../../graphql/post/mutation/like\";\nimport { useVssState, useVssDispatch, SHOW_POST_MODAL, SHOW_LOGIN_MODAL } from \"../../context\";\nimport { getAccessToken } from \"../../lib/token\";\n\nvar PostContainer = function PostContainer(_ref) {\n  var id = _ref.id,\n      title = _ref.title,\n      description = _ref.description,\n      createdAt = _ref.createdAt,\n      user = _ref.user,\n      video = _ref.video,\n      status = _ref.status,\n      likes = _ref.likes;\n\n  var _useVssState = useVssState(),\n      userId = _useVssState.userId;\n\n  var dispatch = useVssDispatch();\n  var isMyPost = userId || userId === user.id;\n\n  var _useState = useState(likes.some(function (v) {\n    return v.user.id === userId;\n  })),\n      ctrlIsLiked = _useState[0],\n      setCtrlIsLiked = _useState[1];\n\n  var _useState2 = useState(likes.length),\n      ctrlLikeCount = _useState2[0],\n      setCtrlLikeCount = _useState2[1];\n\n  var _useState3 = useState(false),\n      isShowUser = _useState3[0],\n      setIsShowUser = _useState3[1];\n\n  var _useMutation = useMutation(likeMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      like = _useMutation2[0],\n      likeLoading = _useMutation2[1].loading;\n\n  var _useMutation3 = useMutation(removePostMutation),\n      _useMutation4 = _slicedToArray(_useMutation3, 2),\n      remove = _useMutation4[0],\n      removeLoading = _useMutation4[1].loading;\n\n  var handleClickAvatar = useCallback(function () {\n    setIsShowUser(!isShowUser);\n  }, [isShowUser]); // 포스트 채팅방 접근 이벤트\n\n  var handleRoom = useCallback(function () {\n    var token = getAccessToken();\n\n    if (token) {//Router.push(`/room/${room.id}`);\n    } else {\n      dispatch({\n        type: SHOW_LOGIN_MODAL\n      });\n    }\n  }, []); // 포스트 수정 이벤트\n\n  var handleUpdate = useCallback(function () {\n    dispatch({\n      type: SHOW_POST_MODAL,\n      postId: id,\n      title: title,\n      description: description,\n      status: status,\n      url: video.url\n    });\n  }, []); // 좋아요 / 좋아요 취소 이벤트\n\n  var handleLike = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var token, _JSON$parse, message;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            token = getAccessToken();\n\n            if (!token) {\n              _context.next = 15;\n              break;\n            }\n\n            setCtrlIsLiked(!ctrlIsLiked);\n            setCtrlLikeCount(ctrlIsLiked ? ctrlLikeCount - 1 : ctrlLikeCount + 1);\n            _context.prev = 4;\n            _context.next = 7;\n            return like({\n              variables: {\n                postId: id\n              }\n            });\n\n          case 7:\n            _context.next = 13;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](4);\n            _JSON$parse = JSON.parse(_context.t0.message), message = _JSON$parse.message;\n            alert(message);\n\n          case 13:\n            _context.next = 16;\n            break;\n\n          case 15:\n            dispatch({\n              type: SHOW_LOGIN_MODAL\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 9]]);\n  })), [ctrlIsLiked, ctrlLikeCount, likeLoading]); // 삭제 이벤트\n\n  var handleDelete = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var tf, _yield$remove, deletePost, _JSON$parse2, message;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!removeLoading) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", alert(\"요청중입니다. 잠시만 기다려주세요.\"));\n\n          case 2:\n            tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n            if (!tf) {\n              _context2.next = 16;\n              break;\n            }\n\n            _context2.prev = 4;\n            _context2.next = 7;\n            return remove({\n              variables: {\n                postId: id\n              }\n            });\n\n          case 7:\n            _yield$remove = _context2.sent;\n            deletePost = _yield$remove.data.deletePost;\n\n            if (deletePost) {\n              alert(\"포스트가 삭제되었습니다.\");\n              window.location.reload();\n            }\n\n            _context2.next = 16;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](4);\n            _JSON$parse2 = JSON.parse(_context2.t0.message), message = _JSON$parse2.message;\n            alert(message);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 12]]);\n  })), [removeLoading]);\n  useEffect(function () {\n    setCtrlIsLiked(likes.some(function (v) {\n      return v.user.id === userId;\n    }));\n  }, [userId]);\n  return __jsx(PostPresenter, {\n    title: title,\n    description: description,\n    status: status,\n    createdAt: createdAt,\n    user: user,\n    video: video,\n    isLiked: ctrlIsLiked,\n    likeCount: ctrlLikeCount,\n    isMyPost: isMyPost,\n    isShowUser: isShowUser,\n    onClickAvatar: handleClickAvatar,\n    onLike: handleLike,\n    onUpdate: handleUpdate,\n    onRoom: handleRoom,\n    onDelete: handleDelete\n  });\n};\n\nexport default PostContainer;","map":null,"metadata":{},"sourceType":"module"}