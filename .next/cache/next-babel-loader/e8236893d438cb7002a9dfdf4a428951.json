{"ast":null,"code":"var __jsx = React.createElement;\nimport Router from \"next/router\";\nimport React, { useCallback, Fragment, memo } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport styled from \"styled-components\";\nimport { keywordQuery } from \"../../graphql/search/query/keyword\";\nconst Container = styled.div.withConfig({\n  displayName: \"SearchResult__Container\",\n  componentId: \"sc-5fh9lp-0\"\n})([\"\", \";width:100%;position:absolute;display:flex;flex-direction:column;top:37px;left:0;height:auto;overflow:hidden;\"], props => props.theme.whiteBox);\nconst ContentType = styled.div.withConfig({\n  displayName: \"SearchResult__ContentType\",\n  componentId: \"sc-5fh9lp-1\"\n})([\"background:rgba(0,0,0,0.03);font-size:14px;padding:5px;border-bottom:\", \";\"], props => props.theme.boxBorder);\nconst Item = styled.li.withConfig({\n  displayName: \"SearchResult__Item\",\n  componentId: \"sc-5fh9lp-2\"\n})([\"padding:5px;font-size:12px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;width:240px;\", \"{width:100px;}\"], props => props.theme.media.tablet);\n\nconst SearchResult = ({\n  searchKeyword,\n  setSearch,\n  setSearchKeyword\n}) => {\n  const {\n    data,\n    loading\n  } = useQuery(keywordQuery, {\n    variables: {\n      searchKeyword\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const handleClickItem = useCallback(keyword => {\n    Router.push(`/search?keyword=${keyword}`);\n    setSearch(keyword);\n    setSearchKeyword(\"\");\n  }, []);\n\n  if (loading || data.getSearchKeyword.length === 0) {\n    return __jsx(Fragment, null);\n  }\n\n  return __jsx(Container, null, __jsx(ContentType, null, \"\\uC5F0\\uAD00 \\uAC80\\uC0C9\\uC5B4\"), __jsx(\"ol\", null, data.getSearchKeyword.map(({\n    id,\n    keyword\n  }) => __jsx(Item, {\n    key: id,\n    onClick: () => handleClickItem(keyword)\n  }, keyword))));\n};\n\nexport default memo(SearchResult);","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/common/SearchResult.tsx"],"names":["Router","React","useCallback","Fragment","memo","useQuery","styled","keywordQuery","Container","div","props","theme","whiteBox","ContentType","boxBorder","Item","li","media","tablet","SearchResult","searchKeyword","setSearch","setSearchKeyword","data","loading","variables","notifyOnNetworkStatusChange","handleClickItem","keyword","push","getSearchKeyword","length","map","id"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,IACEC,WADF,EAEEC,QAFF,EAMEC,IANF,QAOO,OAPP;AAQA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,YAAT,QAA6B,oCAA7B;AAEA,MAAMC,SAAS,GAAGF,MAAM,CAACG,GAAV;AAAA;AAAA;AAAA,0HACXC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,QADV,CAAf;AAYA,MAAMC,WAAW,GAAGP,MAAM,CAACG,GAAV;AAAA;AAAA;AAAA,mFAIEC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYG,SAJvB,CAAjB;AAOA,MAAMC,IAAI,GAAGT,MAAM,CAACU,EAAV;AAAA;AAAA;AAAA,2IASNN,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYM,KAAZ,CAAkBC,MATrB,CAAV;;AAoBA,MAAMC,YAAuB,GAAG,CAAC;AAC/BC,EAAAA,aAD+B;AAE/BC,EAAAA,SAF+B;AAG/BC,EAAAA;AAH+B,CAAD,KAI1B;AACJ,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBnB,QAAQ,CAACE,YAAD,EAAe;AAC/CkB,IAAAA,SAAS,EAAE;AACTL,MAAAA;AADS,KADoC;AAI/CM,IAAAA,2BAA2B,EAAE;AAJkB,GAAf,CAAlC;AAOA,QAAMC,eAAe,GAAGzB,WAAW,CAAC0B,OAAO,IAAI;AAC7C5B,IAAAA,MAAM,CAAC6B,IAAP,CAAa,mBAAkBD,OAAQ,EAAvC;AACAP,IAAAA,SAAS,CAACO,OAAD,CAAT;AACAN,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,GAJkC,EAIhC,EAJgC,CAAnC;;AAMA,MAAIE,OAAO,IAAID,IAAI,CAACO,gBAAL,CAAsBC,MAAtB,KAAiC,CAAhD,EAAmD;AACjD,WAAO,MAAC,QAAD,OAAP;AACD;;AAED,SACE,MAAC,SAAD,QACE,MAAC,WAAD,0CADF,EAEE,kBACGR,IAAI,CAACO,gBAAL,CAAsBE,GAAtB,CAA0B,CAAC;AAAEC,IAAAA,EAAF;AAAML,IAAAA;AAAN,GAAD,KACzB,MAAC,IAAD;AAAM,IAAA,GAAG,EAAEK,EAAX;AAAe,IAAA,OAAO,EAAE,MAAMN,eAAe,CAACC,OAAD;AAA7C,KACGA,OADH,CADD,CADH,CAFF,CADF;AAYD,CAlCD;;AAoCA,eAAexB,IAAI,CAACe,YAAD,CAAnB","sourcesContent":["import Router from \"next/router\";\nimport React, {\n  useCallback,\n  Fragment,\n  Dispatch,\n  SetStateAction,\n  FC,\n  memo\n} from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport styled from \"styled-components\";\nimport { keywordQuery } from \"../../graphql/search/query/keyword\";\n\nconst Container = styled.div`\n  ${props => props.theme.whiteBox};\n  width: 100%;\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  top: 37px;\n  left: 0;\n  height: auto;\n  overflow: hidden;\n`;\n\nconst ContentType = styled.div`\n  background: rgba(0, 0, 0, 0.03);\n  font-size: 14px;\n  padding: 5px;\n  border-bottom: ${props => props.theme.boxBorder};\n`;\n\nconst Item = styled.li`\n  padding: 5px;\n  font-size: 12px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  cursor: pointer;\n  width: 240px;\n\n  ${props => props.theme.media.tablet} {\n    width: 100px;\n  }\n`;\n\ninterface Props {\n  searchKeyword: string;\n  setSearch: Dispatch<SetStateAction<string>>;\n  setSearchKeyword: Dispatch<SetStateAction<string>>;\n}\n\nconst SearchResult: FC<Props> = ({\n  searchKeyword,\n  setSearch,\n  setSearchKeyword\n}) => {\n  const { data, loading } = useQuery(keywordQuery, {\n    variables: {\n      searchKeyword\n    },\n    notifyOnNetworkStatusChange: true\n  });\n\n  const handleClickItem = useCallback(keyword => {\n    Router.push(`/search?keyword=${keyword}`);\n    setSearch(keyword);\n    setSearchKeyword(\"\");\n  }, []);\n\n  if (loading || data.getSearchKeyword.length === 0) {\n    return <Fragment />;\n  }\n\n  return (\n    <Container>\n      <ContentType>연관 검색어</ContentType>\n      <ol>\n        {data.getSearchKeyword.map(({ id, keyword }) => (\n          <Item key={id} onClick={() => handleClickItem(keyword)}>\n            {keyword}\n          </Item>\n        ))}\n      </ol>\n    </Container>\n  );\n};\n\nexport default memo(SearchResult);\n"]},"metadata":{},"sourceType":"module"}