{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport Layout from \"../components/common/Layout\";\n\n// import SearchPost from \"../components/search/SearchPostContainer\";\nconst Search = props => {\n  console.log(props); //   const { data: posts, loading, fetchMore, networkStatus } = useQuery(\n  //     postsQuery,\n  //     {\n  //       variables: {\n  //         first: 10,\n  //         keyword: query.keyword\n  //       },\n  //       notifyOnNetworkStatusChange: true\n  //     }\n  //   );\n\n  return __jsx(Layout, null, __jsx(\"h1\", null, \"test\"));\n}; // export async function getStaticPaths() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch(\"https://.../posts\");\n//   const posts = await res.json();\n//   // Get the paths we want to pre-render based on posts\n//   const paths = posts.map(post => ({\n//     params: { id: post.id }\n//   }));\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false };\n// }\n\n\nSearch.getInitialProps = async ctx => {\n  const {\n    keyword\n  } = ctx.query;\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: searchQuery,\n    variables: {\n      first: 10,\n      keyword\n    }\n  });\n  return {\n    query: {\n      keyword\n    },\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    },\n    revalidate: 1\n  };\n}; // export const getStaticProps: GetStaticProps = async context => {\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: searchQuery,\n//     variables: {\n//       first: 10\n//     }\n//   });\n//   console.log(context);\n//   return {\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     },\n//     revalidate: 1\n//   };\n// };\n\n\nexport default Search;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search.tsx"],"names":["React","initializeApollo","searchQuery","Layout","Search","props","console","log","getInitialProps","ctx","keyword","query","apolloClient","variables","first","initialApolloState","cache","extract","revalidate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;AAEA;AAEA,MAAMC,MAAgB,GAAGC,KAAK,IAAI;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADgC,CAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SACE,MAAC,MAAD,QACE,yBADF,CADF;AAKD,CAjBD,C,CAmBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEAD,MAAM,CAACI,eAAP,GAAyB,MAAMC,GAAN,IAAa;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAcD,GAAG,CAACE,KAAxB;AACA,QAAMC,YAAY,GAAGX,gBAAgB,EAArC;AACA,QAAMW,YAAY,CAACD,KAAb,CAAmB;AACvBA,IAAAA,KAAK,EAAET,WADgB;AAEvBW,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE,EADE;AAETJ,MAAAA;AAFS;AAFY,GAAnB,CAAN;AAQA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLD,MAAAA;AADK,KADF;AAILL,IAAAA,KAAK,EAAE;AACLU,MAAAA,kBAAkB,EAAEH,YAAY,CAACI,KAAb,CAAmBC,OAAnB;AADf,KAJF;AAOLC,IAAAA,UAAU,EAAE;AAPP,GAAP;AASD,CApBD,C,CAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAed,MAAf","sourcesContent":["import React from \"react\";\nimport { NextPage } from \"next\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport Layout from \"../components/common/Layout\";\nimport { postsQuery } from \"../graphql/post/query\";\n// import SearchPost from \"../components/search/SearchPostContainer\";\n\nconst Search: NextPage = props => {\n  console.log(props);\n  //   const { data: posts, loading, fetchMore, networkStatus } = useQuery(\n  //     postsQuery,\n  //     {\n  //       variables: {\n  //         first: 10,\n  //         keyword: query.keyword\n  //       },\n  //       notifyOnNetworkStatusChange: true\n  //     }\n  //   );\n  return (\n    <Layout>\n      <h1>test</h1>\n    </Layout>\n  );\n};\n\n// export async function getStaticPaths() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch(\"https://.../posts\");\n//   const posts = await res.json();\n\n//   // Get the paths we want to pre-render based on posts\n//   const paths = posts.map(post => ({\n//     params: { id: post.id }\n//   }));\n\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false };\n// }\n\nSearch.getInitialProps = async ctx => {\n  const { keyword } = ctx.query;\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: searchQuery,\n    variables: {\n      first: 10,\n      keyword\n    }\n  });\n\n  return {\n    query: {\n      keyword\n    },\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    },\n    revalidate: 1\n  };\n};\n\n// export const getStaticProps: GetStaticProps = async context => {\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: searchQuery,\n//     variables: {\n//       first: 10\n//     }\n//   });\n//   console.log(context);\n\n//   return {\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     },\n//     revalidate: 1\n//   };\n// };\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}