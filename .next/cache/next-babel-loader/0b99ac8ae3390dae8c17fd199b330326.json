{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/idonghun/Desktop/vss/frontend/components/search/SearchPostContainer.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useRouter } from \"next/router\";\nimport React, { useEffect } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\n\nvar SearchPostContainer = function SearchPostContainer() {\n  _s();\n\n  var router = useRouter();\n  var variables = {\n    first: 10\n  };\n  router.query.keyword.forEach(function (v) {\n    var splitQuery = v.split(\"=\");\n    variables[splitQuery[0]] = splitQuery[1];\n  });\n\n  var _useQuery = useQuery(postsQuery, {\n    variables: variables,\n    notifyOnNetworkStatusChange: true\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var handleScrollFetchMore = function handleScrollFetchMore() {\n    if (loading) return;\n    var _document$documentEle = document.documentElement,\n        scrollHeight = _document$documentEle.scrollHeight,\n        clientHeight = _document$documentEle.clientHeight,\n        scrollTop = _document$documentEle.scrollTop;\n\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: _objectSpread(_objectSpread({}, variables), {}, {\n              skip: data.getPosts.length\n            })\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return function () {\n      return window.removeEventListener(\"scroll\", handleScrollFetchMore);\n    };\n  }, [data.getPosts, loading]);\n  return __jsx(SearchPostPresenter, {\n    loading: loading,\n    loadingMorePosts: loadingMorePosts,\n    posts: data.getPosts,\n    keyword: variables[\"searchKeyword\"] || \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  });\n};\n\n_s(SearchPostContainer, \"gjXMs0Ixe893HsCM6GWXpDsLtDA=\", false, function () {\n  return [useRouter, useQuery];\n});\n\n_c = SearchPostContainer;\nexport default SearchPostContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchPostContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/search/SearchPostContainer.tsx"],"names":["useRouter","React","useEffect","useQuery","NetworkStatus","SearchPostPresenter","postsQuery","SearchPostContainer","router","variables","first","query","keyword","forEach","v","splitQuery","split","notifyOnNetworkStatusChange","data","loading","fetchMore","networkStatus","loadingMorePosts","handleScrollFetchMore","document","documentElement","scrollHeight","clientHeight","scrollTop","getPosts","length","skip","window","addEventListener","removeEventListener"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAqC,OAArC;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,gBAAxC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,IAAMC,mBAAuB,GAAG,SAA1BA,mBAA0B,GAAM;AAAA;;AACpC,MAAMC,MAAM,GAAGR,SAAS,EAAxB;AAEA,MAAMS,SAAS,GAAG;AAChBC,IAAAA,KAAK,EAAE;AADS,GAAlB;AAICF,EAAAA,MAAM,CAACG,KAAP,CAAaC,OAAd,CAA8BC,OAA9B,CAAsC,UAAAC,CAAC,EAAI;AACzC,QAAMC,UAAU,GAAGD,CAAC,CAACE,KAAF,CAAQ,GAAR,CAAnB;AACAP,IAAAA,SAAS,CAACM,UAAU,CAAC,CAAD,CAAX,CAAT,GAA2BA,UAAU,CAAC,CAAD,CAArC;AACD,GAHD;;AAPoC,kBAYgBZ,QAAQ,CAACG,UAAD,EAAa;AACvEG,IAAAA,SAAS,EAATA,SADuE;AAEvEQ,IAAAA,2BAA2B,EAAE;AAF0C,GAAb,CAZxB;AAAA,MAY5BC,IAZ4B,aAY5BA,IAZ4B;AAAA,MAYtBC,OAZsB,aAYtBA,OAZsB;AAAA,MAYbC,SAZa,aAYbA,SAZa;AAAA,MAYFC,aAZE,aAYFA,aAZE;;AAiBpC,MAAMC,gBAAgB,GAAGD,aAAa,KAAKjB,aAAa,CAACgB,SAAzD;;AAEA,MAAMG,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAClC,QAAIJ,OAAJ,EAAa;AADqB,gCAEgBK,QAAQ,CAACC,eAFzB;AAAA,QAE1BC,YAF0B,yBAE1BA,YAF0B;AAAA,QAEZC,YAFY,yBAEZA,YAFY;AAAA,QAEEC,SAFF,yBAEEA,SAFF;;AAGlC,QAAIV,IAAI,CAACW,QAAT,EAAmB;AACjB,UAAID,SAAS,GAAGD,YAAZ,KAA6BD,YAAjC,EAA+C;AAC7C,YAAIR,IAAI,CAACW,QAAL,CAAcC,MAAd,GAAuB,EAAvB,KAA8B,CAAlC,EAAqC;AACnCV,UAAAA,SAAS,CAAC;AACRX,YAAAA,SAAS,kCACJA,SADI;AAEPsB,cAAAA,IAAI,EAAEb,IAAI,CAACW,QAAL,CAAcC;AAFb;AADD,WAAD,CAAT;AAMD;AACF;AACF;AACF,GAfD;;AAiBA5B,EAAAA,SAAS,CAAC,YAAM;AACd8B,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCV,qBAAlC;AACA,WAAO;AAAA,aAAMS,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCX,qBAArC,CAAN;AAAA,KAAP;AACD,GAHQ,EAGN,CAACL,IAAI,CAACW,QAAN,EAAgBV,OAAhB,CAHM,CAAT;AAKA,SACE,MAAC,mBAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,gBAAgB,EAAEG,gBAFpB;AAGE,IAAA,KAAK,EAAEJ,IAAI,CAACW,QAHd;AAIE,IAAA,OAAO,EAAEpB,SAAS,CAAC,eAAD,CAAT,IAA8B,EAJzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAjDD;;GAAMF,mB;UACWP,S,EAWqCG,Q;;;KAZhDI,mB;AAmDN,eAAeA,mBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport React, { useEffect, FC } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\n\nconst SearchPostContainer: FC = () => {\n  const router = useRouter();\n\n  const variables = {\n    first: 10\n  };\n\n  (router.query.keyword as any).forEach(v => {\n    const splitQuery = v.split(\"=\");\n    variables[splitQuery[0]] = splitQuery[1];\n  });\n\n  const { data, loading, fetchMore, networkStatus } = useQuery(postsQuery, {\n    variables,\n    notifyOnNetworkStatusChange: true\n  });\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              ...variables,\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [data.getPosts, loading]);\n\n  return (\n    <SearchPostPresenter\n      loading={loading}\n      loadingMorePosts={loadingMorePosts}\n      posts={data.getPosts}\n      keyword={variables[\"searchKeyword\"] || \"\"}\n    />\n  );\n};\n\nexport default SearchPostContainer;\n"]},"metadata":{},"sourceType":"module"}