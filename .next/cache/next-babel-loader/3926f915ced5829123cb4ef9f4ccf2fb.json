{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback } from \"react\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\nimport { useVssDispatch, SET_LOGIN_MODAL, SET_ME } from \"../../context\";\n\nconst SignInContainer = () => {\n  const dispatch = useVssDispatch();\n  const [me] = useLazyQuery(meQuery, {\n    onCompleted: ({\n      getMyProfile\n    }) => {\n      dispatch({\n        type: SET_ME,\n        id: getMyProfile.id,\n        nickname: getMyProfile.nickname,\n        email: getMyProfile.email,\n        avatar: getMyProfile.avatar,\n        isMaster: getMyProfile.isMaster\n      });\n      handleClose();\n    }\n  });\n  const [login, {\n    loading\n  }] = useMutation(logInMutation);\n  const email = useInput(\"\");\n  const pwd = useInput(\"\");\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_LOGIN_MODAL,\n      payload: false\n    });\n  }, []);\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n\n    if (loading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    try {\n      const {\n        data: {\n          logIn\n        }\n      } = await login({\n        variables: {\n          email: email.value,\n          pwd: pwd.value\n        }\n      });\n\n      if (logIn) {\n        setAccessToken(logIn);\n        me();\n      }\n    } catch (error) {\n      const {\n        message\n      } = JSON.parse(error.message);\n      alert(message);\n    }\n  }, [email.value, pwd.value, loading]);\n  return __jsx(SignInPresenter, {\n    loading: loading,\n    email: email,\n    pwd: pwd,\n    onClose: handleClose,\n    onSubmit: handleSubmit\n  });\n};\n\nexport default SignInContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SignInContainer.tsx"],"names":["React","useCallback","useLazyQuery","useMutation","useInput","logInMutation","meQuery","SignInPresenter","setAccessToken","useVssDispatch","SET_LOGIN_MODAL","SET_ME","SignInContainer","dispatch","me","onCompleted","getMyProfile","type","id","nickname","email","avatar","isMaster","handleClose","login","loading","pwd","payload","handleSubmit","e","preventDefault","alert","data","logIn","variables","value","error","message","JSON","parse"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAkD,OAAlD;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,MAA1C,QAAwD,eAAxD;;AAEA,MAAMC,eAAmB,GAAG,MAAM;AAChC,QAAMC,QAAQ,GAAGJ,cAAc,EAA/B;AACA,QAAM,CAACK,EAAD,IAAOZ,YAAY,CAACI,OAAD,EAAU;AACjCS,IAAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAsB;AACjCH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEN,MADC;AAEPO,QAAAA,EAAE,EAAEF,YAAY,CAACE,EAFV;AAGPC,QAAAA,QAAQ,EAAEH,YAAY,CAACG,QAHhB;AAIPC,QAAAA,KAAK,EAAEJ,YAAY,CAACI,KAJb;AAKPC,QAAAA,MAAM,EAAEL,YAAY,CAACK,MALd;AAMPC,QAAAA,QAAQ,EAAEN,YAAY,CAACM;AANhB,OAAD,CAAR;AAQAC,MAAAA,WAAW;AACZ;AAXgC,GAAV,CAAzB;AAaA,QAAM,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAuBtB,WAAW,CAACE,aAAD,CAAxC;AACA,QAAMe,KAAK,GAAGhB,QAAQ,CAAC,EAAD,CAAtB;AACA,QAAMsB,GAAG,GAAGtB,QAAQ,CAAC,EAAD,CAApB;AAEA,QAAMmB,WAAW,GAAGtB,WAAW,CAAC,MAAM;AACpCY,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEP,eADC;AAEPiB,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAID,GAL8B,EAK5B,EAL4B,CAA/B;AAOA,QAAMC,YAAY,GAAG3B,WAAW,CAC9B,MAAO4B,CAAP,IAAyC;AACvCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIL,OAAJ,EAAa;AACX,aAAOM,KAAK,CAAC,sBAAD,CAAZ;AACD;;AACD,QAAI;AACF,YAAM;AACJC,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AADF,UAEF,MAAMT,KAAK,CAAC;AACdU,QAAAA,SAAS,EAAE;AAAEd,UAAAA,KAAK,EAAEA,KAAK,CAACe,KAAf;AAAsBT,UAAAA,GAAG,EAAEA,GAAG,CAACS;AAA/B;AADG,OAAD,CAFf;;AAKA,UAAIF,KAAJ,EAAW;AACTzB,QAAAA,cAAc,CAACyB,KAAD,CAAd;AACAnB,QAAAA,EAAE;AACH;AACF,KAVD,CAUE,OAAOsB,KAAP,EAAc;AACd,YAAM;AAAEC,QAAAA;AAAF,UAAcC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACC,OAAjB,CAApB;AACAN,MAAAA,KAAK,CAACM,OAAD,CAAL;AACD;AACF,GApB6B,EAqB9B,CAACjB,KAAK,CAACe,KAAP,EAAcT,GAAG,CAACS,KAAlB,EAAyBV,OAAzB,CArB8B,CAAhC;AAwBA,SACE,MAAC,eAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,KAAK,EAAEL,KAFT;AAGE,IAAA,GAAG,EAAEM,GAHP;AAIE,IAAA,OAAO,EAAEH,WAJX;AAKE,IAAA,QAAQ,EAAEK;AALZ,IADF;AASD,CA3DD;;AA6DA,eAAehB,eAAf","sourcesContent":["import React, { useCallback, FormEvent, FC } from \"react\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\nimport { useVssDispatch, SET_LOGIN_MODAL, SET_ME } from \"../../context\";\n\nconst SignInContainer: FC = () => {\n  const dispatch = useVssDispatch();\n  const [me] = useLazyQuery(meQuery, {\n    onCompleted: ({ getMyProfile }) => {\n      dispatch({\n        type: SET_ME,\n        id: getMyProfile.id,\n        nickname: getMyProfile.nickname,\n        email: getMyProfile.email,\n        avatar: getMyProfile.avatar,\n        isMaster: getMyProfile.isMaster\n      });\n      handleClose();\n    }\n  });\n  const [login, { loading }] = useMutation(logInMutation);\n  const email = useInput(\"\");\n  const pwd = useInput(\"\");\n\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_LOGIN_MODAL,\n      payload: false\n    });\n  }, []);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (loading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n      try {\n        const {\n          data: { logIn }\n        } = await login({\n          variables: { email: email.value, pwd: pwd.value }\n        });\n        if (logIn) {\n          setAccessToken(logIn);\n          me();\n        }\n      } catch (error) {\n        const { message } = JSON.parse(error.message);\n        alert(message);\n      }\n    },\n    [email.value, pwd.value, loading]\n  );\n\n  return (\n    <SignInPresenter\n      loading={loading}\n      email={email}\n      pwd={pwd}\n      onClose={handleClose}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SignInContainer;\n"]},"metadata":{},"sourceType":"module"}