{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssState, useVssDispatch, SET_ME } from \"../context\";\nimport Layout from \"../components/common/Layout\";\nimport Section from \"../components/common/Section\";\nimport SearchUser from \"../components/search/SearchUserContainer\";\nimport SearchPost from \"../components/search/SearchPostContainer\";\nimport SetPostModal from \"../components/modal/SetPostContainer\";\nimport AuthModal from \"../components/modal/Auth\";\n\nconst Search = () => {\n  const {\n    isShowLoginModal,\n    isShowAddPostModal\n  } = useVssState();\n  const dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    ssr: false,\n    onCompleted: ({\n      getMyProfile\n    }) => {\n      const {\n        id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n  return __jsx(Layout, {\n    title: \"\\uAC80\\uC0C9\\uACB0\\uACFC\"\n  }, __jsx(Section, null, __jsx(SearchUser, null), __jsx(SearchPost, null), isShowAddPostModal && __jsx(SetPostModal, null), isShowLoginModal && __jsx(AuthModal, null)));\n};\n\nexport const getServerSideProps = async ({\n  query\n}) => {\n  const {\n    keyword,\n    orderBy = \"createdAt_DESC\"\n  } = query;\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: searchQuery,\n    variables: {\n      first: 10,\n      keyword,\n      orderBy\n    }\n  });\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    }\n  };\n};\nexport default Search;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search.tsx"],"names":["React","useQuery","initializeApollo","searchQuery","meQuery","useVssState","useVssDispatch","SET_ME","Layout","Section","SearchUser","SearchPost","SetPostModal","AuthModal","Search","isShowLoginModal","isShowAddPostModal","dispatch","ssr","onCompleted","getMyProfile","id","nickname","email","avatar","isMaster","type","userId","getServerSideProps","query","keyword","orderBy","apolloClient","variables","first","props","initialApolloState","cache","extract"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,MAAtC,QAAoD,YAApD;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAEA,MAAMC,MAAgB,GAAG,MAAM;AAC7B,QAAM;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,MAA2CX,WAAW,EAA5D;AACA,QAAMY,QAAQ,GAAGX,cAAc,EAA/B;AACAL,EAAAA,QAAQ,CAACG,OAAD,EAAU;AAChBc,IAAAA,GAAG,EAAE,KADW;AAEhBC,IAAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAsB;AACjC,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA,QAAN;AAAgBC,QAAAA,KAAhB;AAAuBC,QAAAA,MAAvB;AAA+BC,QAAAA;AAA/B,UAA4CL,YAAlD;AACAH,MAAAA,QAAQ,CAAC;AACPS,QAAAA,IAAI,EAAEnB,MADC;AAEPoB,QAAAA,MAAM,EAAEN,EAFD;AAGPC,QAAAA,QAHO;AAIPC,QAAAA,KAJO;AAKPC,QAAAA,MALO;AAMPC,QAAAA;AANO,OAAD,CAAR;AAQD;AAZe,GAAV,CAAR;AAcA,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC;AAAd,KACE,MAAC,OAAD,QACE,MAAC,UAAD,OADF,EAEE,MAAC,UAAD,OAFF,EAGGT,kBAAkB,IAAI,MAAC,YAAD,OAHzB,EAIGD,gBAAgB,IAAI,MAAC,SAAD,OAJvB,CADF,CADF;AAUD,CA3BD;;AA6BA,OAAO,MAAMa,kBAAsC,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AACzE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAO,GAAG;AAArB,MAA0CF,KAAhD;AACA,QAAMG,YAAY,GAAG9B,gBAAgB,EAArC;AACA,QAAM8B,YAAY,CAACH,KAAb,CAAmB;AACvBA,IAAAA,KAAK,EAAE1B,WADgB;AAEvB8B,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE,EADE;AAETJ,MAAAA,OAFS;AAGTC,MAAAA;AAHS;AAFY,GAAnB,CAAN;AASA,SAAO;AACLI,IAAAA,KAAK,EAAE;AACLC,MAAAA,kBAAkB,EAAEJ,YAAY,CAACK,KAAb,CAAmBC,OAAnB;AADf;AADF,GAAP;AAKD,CAjBM;AAmBP,eAAexB,MAAf","sourcesContent":["import React from \"react\";\nimport { NextPage, GetServerSideProps } from \"next\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssState, useVssDispatch, SET_ME } from \"../context\";\nimport Layout from \"../components/common/Layout\";\nimport Section from \"../components/common/Section\";\nimport SearchUser from \"../components/search/SearchUserContainer\";\nimport SearchPost from \"../components/search/SearchPostContainer\";\nimport SetPostModal from \"../components/modal/SetPostContainer\";\nimport AuthModal from \"../components/modal/Auth\";\n\nconst Search: NextPage = () => {\n  const { isShowLoginModal, isShowAddPostModal } = useVssState();\n  const dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    ssr: false,\n    onCompleted: ({ getMyProfile }) => {\n      const { id, nickname, email, avatar, isMaster } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n  return (\n    <Layout title=\"검색결과\">\n      <Section>\n        <SearchUser />\n        <SearchPost />\n        {isShowAddPostModal && <SetPostModal />}\n        {isShowLoginModal && <AuthModal />}\n      </Section>\n    </Layout>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps = async ({ query }) => {\n  const { keyword, orderBy = \"createdAt_DESC\" } = query;\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: searchQuery,\n    variables: {\n      first: 10,\n      keyword,\n      orderBy\n    }\n  });\n\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    }\n  };\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}