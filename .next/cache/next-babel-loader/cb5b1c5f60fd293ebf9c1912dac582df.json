{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\n\nvar SetNoticeContainer = function SetNoticeContainer(_ref) {\n  _s();\n\n  var title = _ref.title,\n      description = _ref.description,\n      action = _ref.action,\n      actionText = _ref.actionText,\n      noticeId = _ref.noticeId,\n      isMaster = _ref.isMaster;\n  var dispatch = useVssDispatch();\n\n  var _useLazyAxios = useLazyAxios(),\n      loading = _useLazyAxios.loading,\n      call = _useLazyAxios.call;\n\n  var modalTitle = useInput(title);\n  var modalDescription = useInput(description);\n\n  var _useState = useState(\"\"),\n      mdDescription = _useState[0],\n      setMdDescription = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      preview = _useState2[0],\n      setPreview = _useState2[1];\n\n  var _useState3 = useState({\n    code: action,\n    modalTitle: actionText\n  }),\n      modalAction = _useState3[0],\n      setModalAction = _useState3[1]; // readonly, modifiable, modify, add\n\n\n  var _useMutation = useMutation(addNoticeMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      add = _useMutation2[0],\n      addNoticeLoading = _useMutation2[1].loading;\n\n  var _useMutation3 = useMutation(updateNoticeMutation),\n      _useMutation4 = _slicedToArray(_useMutation3, 2),\n      update = _useMutation4[0],\n      updateNoticeLoading = _useMutation4[1].loading;\n\n  var _useMutation5 = useMutation(removeNoticeMutation),\n      _useMutation6 = _slicedToArray(_useMutation5, 2),\n      remove = _useMutation6[0],\n      removeNoticeLoading = _useMutation6[1].loading;\n\n  var convertTextIntoMd = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n      var _yield$call, data, error, doc;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (text) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", alert(\"내용을 입력하세요.\"));\n\n            case 2:\n              _context.next = 4;\n              return call({\n                method: \"post\",\n                url: process.env.MDAPI_PATH,\n                data: {\n                  text: text,\n                  mode: \"gfm\",\n                  context: \"github/gollum\"\n                }\n              });\n\n            case 4:\n              _yield$call = _context.sent;\n              data = _yield$call.data;\n              error = _yield$call.error;\n\n              if (!data) {\n                _context.next = 12;\n                break;\n              }\n\n              doc = new DOMParser().parseFromString(data, \"text/html\");\n              return _context.abrupt(\"return\", doc.body.innerHTML);\n\n            case 12:\n              if (!error) {\n                _context.next = 14;\n                break;\n              }\n\n              return _context.abrupt(\"return\", null);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function convertTextIntoMd(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handlePreView = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var md;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!loading) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            _context2.next = 4;\n            return convertTextIntoMd(modalDescription.value);\n\n          case 4:\n            md = _context2.sent;\n\n            if (md) {\n              setPreview(md);\n            } else {\n              alert(\"미리보기 로드에 실패했습니다.\");\n            }\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), [modalDescription.value]);\n  var handleRefreshPreview = useCallback(function () {\n    setPreview(\"\");\n  }, []);\n  var handleClose = useCallback(function () {\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      isShowNoticeModal: false\n    });\n  }, []);\n  var handleShowEdit = useCallback(function () {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n  var handleDelete = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var _yield$remove, deleteNotice;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!removeNoticeLoading) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", alert(\"요청 중입니다.\"));\n\n          case 2:\n            _context3.next = 4;\n            return remove({\n              variables: {\n                noticeId: noticeId\n              }\n            });\n\n          case 4:\n            _yield$remove = _context3.sent;\n            deleteNotice = _yield$remove.data.deleteNotice;\n\n            if (deleteNotice) {\n              alert(\"공지사항이 삭제되었습니다.\");\n              window.location.reload();\n            }\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })), [removeNoticeLoading]);\n  var handleSubmit = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var _yield$add, addNotice, _yield$update, updateNotice;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (modalTitle.value) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", alert(\"제목을 입력하세요.\"));\n\n          case 2:\n            if (modalDescription.value) {\n              _context4.next = 4;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", alert(\"내용을 입력하세요.\"));\n\n          case 4:\n            if (!(modalAction.code === \"add\")) {\n              _context4.next = 14;\n              break;\n            }\n\n            if (!addNoticeLoading) {\n              _context4.next = 7;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", alert(\"요청 중입니다.\"));\n\n          case 7:\n            _context4.next = 9;\n            return add({\n              variables: {\n                title: modalTitle.value,\n                description: modalDescription.value\n              }\n            });\n\n          case 9:\n            _yield$add = _context4.sent;\n            addNotice = _yield$add.data.addNotice;\n\n            if (addNotice) {\n              alert(\"공지사항이 등록되었습니다.\");\n              window.location.reload();\n            }\n\n            _context4.next = 22;\n            break;\n\n          case 14:\n            if (!(modalAction.code === \"modify\")) {\n              _context4.next = 22;\n              break;\n            }\n\n            if (!updateNoticeLoading) {\n              _context4.next = 17;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", alert(\"요청 중입니다.\"));\n\n          case 17:\n            _context4.next = 19;\n            return update({\n              variables: {\n                title: modalTitle.value,\n                description: modalDescription.value,\n                noticeId: noticeId\n              }\n            });\n\n          case 19:\n            _yield$update = _context4.sent;\n            updateNotice = _yield$update.data.updateNotice;\n\n            if (updateNotice) {\n              alert(\"공지사항이 수정되었습니다.\");\n              window.location.reload();\n            }\n\n          case 22:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  })), [modalAction.code, modalTitle.value, modalDescription.value, addNoticeLoading, updateNoticeLoading]);\n  useEffect(function () {\n    function loadDescription(_x2) {\n      return _loadDescription.apply(this, arguments);\n    }\n\n    function _loadDescription() {\n      _loadDescription = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(value) {\n        var md;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return convertTextIntoMd(value);\n\n              case 2:\n                md = _context5.sent;\n\n                if (md) {\n                  setMdDescription(md);\n                }\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n      return _loadDescription.apply(this, arguments);\n    }\n\n    if (description) {\n      console.log(description);\n      loadDescription(description);\n    }\n  }, []);\n  return __jsx(SetNoticePresenter, {\n    action: modalAction,\n    isMaster: isMaster,\n    title: modalTitle,\n    description: modalDescription,\n    mdDescription: mdDescription,\n    preview: preview,\n    onShowEdit: handleShowEdit,\n    onPreview: handlePreView,\n    onRefreshPreview: handleRefreshPreview,\n    onClose: handleClose,\n    onDelete: handleDelete,\n    onSubmit: handleSubmit\n  });\n};\n\n_s(SetNoticeContainer, \"MNbkczS7b1sTyH6wpF32oTdX/C8=\", false, function () {\n  return [useVssDispatch, useLazyAxios, useInput, useInput, useMutation, useMutation, useMutation];\n});\n\n_c = SetNoticeContainer;\nexport default SetNoticeContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetNoticeContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetNoticeContainer.tsx"],"names":["React","useCallback","useState","useEffect","useMutation","addNoticeMutation","updateNoticeMutation","removeNoticeMutation","SetNoticePresenter","useInput","useLazyAxios","useVssDispatch","SET_NOTICE_MODAL","SetNoticeContainer","title","description","action","actionText","noticeId","isMaster","dispatch","loading","call","modalTitle","modalDescription","mdDescription","setMdDescription","preview","setPreview","code","modalAction","setModalAction","add","addNoticeLoading","update","updateNoticeLoading","remove","removeNoticeLoading","convertTextIntoMd","text","alert","method","url","process","env","MDAPI_PATH","data","mode","context","error","doc","DOMParser","parseFromString","body","innerHTML","handlePreView","value","md","handleRefreshPreview","handleClose","type","isShowNoticeModal","handleShowEdit","handleDelete","variables","deleteNotice","window","location","reload","handleSubmit","addNotice","updateNotice","loadDescription","console","log"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, FC } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\n\ntype Props = {\n  title: string;\n  description: string;\n  action: string;\n  actionText: string;\n  noticeId: string;\n  isMaster: boolean;\n};\n\nconst SetNoticeContainer: FC<Props> = ({\n  title,\n  description,\n  action,\n  actionText,\n  noticeId,\n  isMaster\n}) => {\n  const dispatch = useVssDispatch();\n  const { loading, call } = useLazyAxios();\n  const modalTitle = useInput(title);\n  const modalDescription = useInput(description);\n  const [mdDescription, setMdDescription] = useState(\"\");\n  const [preview, setPreview] = useState(\"\");\n  const [modalAction, setModalAction] = useState({\n    code: action,\n    modalTitle: actionText\n  }); // readonly, modifiable, modify, add\n\n  const [add, { loading: addNoticeLoading }] = useMutation(addNoticeMutation);\n\n  const [update, { loading: updateNoticeLoading }] = useMutation(\n    updateNoticeMutation\n  );\n\n  const [remove, { loading: removeNoticeLoading }] = useMutation(\n    removeNoticeMutation\n  );\n\n  const convertTextIntoMd = async text => {\n    if (!text) return alert(\"내용을 입력하세요.\");\n\n    const { data, error } = await call({\n      method: \"post\",\n      url: process.env.MDAPI_PATH,\n      data: {\n        text,\n        mode: \"gfm\",\n        context: \"github/gollum\"\n      }\n    });\n    if (data) {\n      const doc = new DOMParser().parseFromString(data, \"text/html\");\n      return doc.body.innerHTML;\n    } else if (error) {\n      return null;\n    }\n  };\n\n  const handlePreView = useCallback(async () => {\n    if (loading) return;\n    const md = await convertTextIntoMd(modalDescription.value);\n\n    if (md) {\n      setPreview(md);\n    } else {\n      alert(\"미리보기 로드에 실패했습니다.\");\n    }\n  }, [modalDescription.value]);\n\n  const handleRefreshPreview = useCallback(() => {\n    setPreview(\"\");\n  }, []);\n\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      isShowNoticeModal: false\n    });\n  }, []);\n\n  const handleShowEdit = useCallback(() => {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n\n  const handleDelete = useCallback(async () => {\n    if (removeNoticeLoading) return alert(\"요청 중입니다.\");\n\n    const {\n      data: { deleteNotice }\n    } = await remove({\n      variables: {\n        noticeId\n      }\n    });\n    if (deleteNotice) {\n      alert(\"공지사항이 삭제되었습니다.\");\n      window.location.reload();\n    }\n  }, [removeNoticeLoading]);\n\n  const handleSubmit = useCallback(async () => {\n    if (!modalTitle.value) {\n      return alert(\"제목을 입력하세요.\");\n    }\n\n    if (!modalDescription.value) {\n      return alert(\"내용을 입력하세요.\");\n    }\n\n    if (modalAction.code === \"add\") {\n      if (addNoticeLoading) return alert(\"요청 중입니다.\");\n\n      const {\n        data: { addNotice }\n      } = await add({\n        variables: {\n          title: modalTitle.value,\n          description: modalDescription.value\n        }\n      });\n      if (addNotice) {\n        alert(\"공지사항이 등록되었습니다.\");\n        window.location.reload();\n      }\n    } else if (modalAction.code === \"modify\") {\n      if (updateNoticeLoading) return alert(\"요청 중입니다.\");\n\n      const {\n        data: { updateNotice }\n      } = await update({\n        variables: {\n          title: modalTitle.value,\n          description: modalDescription.value,\n          noticeId\n        }\n      });\n      if (updateNotice) {\n        alert(\"공지사항이 수정되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [\n    modalAction.code,\n    modalTitle.value,\n    modalDescription.value,\n    addNoticeLoading,\n    updateNoticeLoading\n  ]);\n\n  useEffect(() => {\n    async function loadDescription(value) {\n      const md = await convertTextIntoMd(value);\n      if (md) {\n        setMdDescription(md);\n      }\n    }\n    if (description) {\n      console.log(description);\n      loadDescription(description);\n    }\n  }, []);\n\n  return (\n    <SetNoticePresenter\n      action={modalAction}\n      isMaster={isMaster}\n      title={modalTitle}\n      description={modalDescription}\n      mdDescription={mdDescription}\n      preview={preview}\n      onShowEdit={handleShowEdit}\n      onPreview={handlePreView}\n      onRefreshPreview={handleRefreshPreview}\n      onClose={handleClose}\n      onDelete={handleDelete}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SetNoticeContainer;\n"]},"metadata":{},"sourceType":"module"}