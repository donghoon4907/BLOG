{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport Layout from \"../components/common/Layout\";\nimport Feed from \"../components/feed/FeedContainer\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { feedQuery } from \"../graphql/page/query/feed\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nimport isBrowser from \"../lib/isBrowser\";\n\nconst Index = () => {\n  const dispatch = useVssDispatch();\n\n  if (isBrowser) {\n    useQuery(meQuery, {\n      ssr: false,\n      onCompleted: ({\n        getMyProfile\n      }) => {\n        const {\n          id,\n          nickname,\n          email,\n          avatar,\n          isMaster\n        } = getMyProfile;\n        dispatch({\n          type: SET_ME,\n          userId: id,\n          nickname,\n          email,\n          avatar,\n          isMaster\n        });\n      }\n    });\n  }\n\n  return __jsx(Layout, null, __jsx(Feed, null));\n};\n\nexport const getStaticProps = async () => {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: feedQuery,\n    variables: {\n      first: 10\n    }\n  });\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    },\n    revalidate: 1\n  };\n};\nexport default Index;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/index.tsx"],"names":["React","useQuery","Layout","Feed","initializeApollo","feedQuery","meQuery","useVssDispatch","SET_ME","isBrowser","Index","dispatch","ssr","onCompleted","getMyProfile","id","nickname","email","avatar","isMaster","type","userId","getStaticProps","apolloClient","query","variables","first","props","initialApolloState","cache","extract","revalidate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,IAAP,MAAiB,kCAAjB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,YAAvC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;AAEA,MAAMC,KAAe,GAAG,MAAM;AAC5B,QAAMC,QAAQ,GAAGJ,cAAc,EAA/B;;AACA,MAAIE,SAAJ,EAAe;AACbR,IAAAA,QAAQ,CAACK,OAAD,EAAU;AAChBM,MAAAA,GAAG,EAAE,KADW;AAEhBC,MAAAA,WAAW,EAAE,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAsB;AACjC,cAAM;AAAEC,UAAAA,EAAF;AAAMC,UAAAA,QAAN;AAAgBC,UAAAA,KAAhB;AAAuBC,UAAAA,MAAvB;AAA+BC,UAAAA;AAA/B,YAA4CL,YAAlD;AACAH,QAAAA,QAAQ,CAAC;AACPS,UAAAA,IAAI,EAAEZ,MADC;AAEPa,UAAAA,MAAM,EAAEN,EAFD;AAGPC,UAAAA,QAHO;AAIPC,UAAAA,KAJO;AAKPC,UAAAA,MALO;AAMPC,UAAAA;AANO,SAAD,CAAR;AAQD;AAZe,KAAV,CAAR;AAcD;;AAED,SACE,MAAC,MAAD,QACE,MAAC,IAAD,OADF,CADF;AAKD,CAxBD;;AA0BA,OAAO,MAAMG,cAA8B,GAAG,YAAY;AACxD,QAAMC,YAAY,GAAGnB,gBAAgB,EAArC;AACA,QAAMmB,YAAY,CAACC,KAAb,CAAmB;AACvBA,IAAAA,KAAK,EAAEnB,SADgB;AAEvBoB,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AADE;AAFY,GAAnB,CAAN;AAOA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLC,MAAAA,kBAAkB,EAAEL,YAAY,CAACM,KAAb,CAAmBC,OAAnB;AADf,KADF;AAILC,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD,CAfM;AAiBP,eAAerB,KAAf","sourcesContent":["import React from \"react\";\nimport { GetStaticProps, NextPage } from \"next\";\nimport { useQuery } from \"@apollo/client\";\nimport Layout from \"../components/common/Layout\";\nimport Feed from \"../components/feed/FeedContainer\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { feedQuery } from \"../graphql/page/query/feed\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nimport isBrowser from \"../lib/isBrowser\";\n\nconst Index: NextPage = () => {\n  const dispatch = useVssDispatch();\n  if (isBrowser) {\n    useQuery(meQuery, {\n      ssr: false,\n      onCompleted: ({ getMyProfile }) => {\n        const { id, nickname, email, avatar, isMaster } = getMyProfile;\n        dispatch({\n          type: SET_ME,\n          userId: id,\n          nickname,\n          email,\n          avatar,\n          isMaster\n        });\n      }\n    });\n  }\n\n  return (\n    <Layout>\n      <Feed />\n    </Layout>\n  );\n};\n\nexport const getStaticProps: GetStaticProps = async () => {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: feedQuery,\n    variables: {\n      first: 10\n    }\n  });\n\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    },\n    revalidate: 1\n  };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}