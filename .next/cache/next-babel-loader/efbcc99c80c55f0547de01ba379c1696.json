{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport FeedPresenter from \"./FeedPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport { noticesQuery } from \"../../graphql/notice/query\";\nimport { useVssState, useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\nimport Loader from \"../common/Loader\";\n\nconst FeedContainer = () => {\n  const {\n    isMaster,\n    isShowNoticeModal,\n    isShowAddPostModal\n  } = useVssState();\n  const dispatch = useVssDispatch();\n  const recommandUserEl = useRef(null);\n  const {\n    0: notice,\n    1: setNotice\n  } = useState({\n    action: \"wait\",\n    actionText: \"비활성화\",\n    title: \"\",\n    description: \"\",\n    noticeId: \"\"\n  });\n  const {\n    data: posts,\n    loading: loadPostLoading,\n    fetchMore\n  } = useQuery(postsQuery, {\n    variables: {\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const {\n    data: notices,\n    loading: loadNoticeLoading\n  } = useQuery(noticesQuery, {\n    variables: {\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  });\n\n  const handleScrollFetchMore = () => {\n    if (loadPostLoading) return;\n    const {\n      scrollHeight,\n      clientHeight,\n      scrollTop\n    } = document.documentElement;\n\n    if (posts && posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            },\n            updateQuery: (prev, {\n              fetchMoreResult\n            }) => {\n              if (!fetchMoreResult) return prev;\n\n              if (fetchMoreResult.getPosts.length === 0) {\n                window.removeEventListener(\"scroll\", handleScrollFetchMore);\n              }\n\n              return Object.assign({}, prev, {\n                getPosts: [...prev.getPosts, ...fetchMoreResult.getPosts]\n              });\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const handleAddNotice = useCallback(() => {\n    setNotice({\n      action: \"add\",\n      actionText: \"등록\",\n      title: \"\",\n      description: \"\",\n      noticeId: \"\"\n    });\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: true\n    });\n  }, []);\n  const handleShowNotice = useCallback((title, description, noticeId) => {\n    setNotice({\n      action: isMaster ? \"modifiable\" : \"readonly\",\n      actionText: \"\",\n      title,\n      description,\n      noticeId\n    });\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: true\n    });\n  }, [isMaster]);\n  useEffect(() => {\n    if (!isShowNoticeModal) {\n      setNotice({\n        action: \"wait\",\n        actionText: \"비활성화\",\n        title: \"\",\n        description: \"\",\n        noticeId: \"\"\n      });\n    }\n  }, [isShowNoticeModal]);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [posts && posts.getPosts, loadPostLoading]);\n\n  if (loadPostLoading && !posts || loadNoticeLoading && !notices) {\n    return __jsx(Loader, null);\n  }\n\n  return __jsx(FeedPresenter, {\n    loading: loadPostLoading,\n    posts: posts,\n    notices: notices,\n    isMaster: isMaster,\n    notice: notice,\n    isShowNoticeModal: isShowNoticeModal,\n    isShowAddPostModal: isShowAddPostModal,\n    onShowNotice: handleShowNotice,\n    onAddNotice: handleAddNotice,\n    recommandUserEl: recommandUserEl\n  });\n};\n\nexport default FeedContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/feed/FeedContainer.tsx"],"names":["React","useState","useCallback","useEffect","useRef","useQuery","FeedPresenter","postsQuery","noticesQuery","useVssState","useVssDispatch","SET_NOTICE_MODAL","Loader","FeedContainer","isMaster","isShowNoticeModal","isShowAddPostModal","dispatch","recommandUserEl","notice","setNotice","action","actionText","title","description","noticeId","data","posts","loading","loadPostLoading","fetchMore","variables","first","notifyOnNetworkStatusChange","notices","loadNoticeLoading","handleScrollFetchMore","scrollHeight","clientHeight","scrollTop","document","documentElement","getPosts","length","skip","updateQuery","prev","fetchMoreResult","window","removeEventListener","Object","assign","handleAddNotice","type","payload","handleShowNotice","addEventListener"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useRef, FC } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport FeedPresenter from \"./FeedPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport { noticesQuery } from \"../../graphql/notice/query\";\nimport { useVssState, useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\nimport Loader from \"../common/Loader\";\n\nexport type NoticeProps = {\n  action: string;\n  actionText: string;\n  title: string;\n  description: string;\n  noticeId: string;\n};\n\nconst FeedContainer: FC = () => {\n  const { isMaster, isShowNoticeModal, isShowAddPostModal } = useVssState();\n  const dispatch = useVssDispatch();\n  const recommandUserEl = useRef(null);\n  const [notice, setNotice] = useState<NoticeProps>({\n    action: \"wait\",\n    actionText: \"비활성화\",\n    title: \"\",\n    description: \"\",\n    noticeId: \"\"\n  });\n\n  const { data: posts, loading: loadPostLoading, fetchMore } = useQuery(\n    postsQuery,\n    {\n      variables: {\n        first: 10\n      },\n      notifyOnNetworkStatusChange: true\n    }\n  );\n\n  const { data: notices, loading: loadNoticeLoading } = useQuery(noticesQuery, {\n    variables: {\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  });\n\n  const handleScrollFetchMore = () => {\n    if (loadPostLoading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (posts && posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            },\n            updateQuery: (\n              prev,\n              { fetchMoreResult }: { fetchMoreResult?: any }\n            ) => {\n              if (!fetchMoreResult) return prev;\n\n              if (fetchMoreResult.getPosts.length === 0) {\n                window.removeEventListener(\"scroll\", handleScrollFetchMore);\n              }\n\n              return Object.assign({}, prev, {\n                getPosts: [...prev.getPosts, ...fetchMoreResult.getPosts]\n              });\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const handleAddNotice = useCallback(() => {\n    setNotice({\n      action: \"add\",\n      actionText: \"등록\",\n      title: \"\",\n      description: \"\",\n      noticeId: \"\"\n    });\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: true\n    });\n  }, []);\n\n  const handleShowNotice = useCallback(\n    (title, description, noticeId) => {\n      setNotice({\n        action: isMaster ? \"modifiable\" : \"readonly\",\n        actionText: \"\",\n        title,\n        description,\n        noticeId\n      });\n      dispatch({\n        type: SET_NOTICE_MODAL,\n        payload: true\n      });\n    },\n    [isMaster]\n  );\n\n  useEffect(() => {\n    if (!isShowNoticeModal) {\n      setNotice({\n        action: \"wait\",\n        actionText: \"비활성화\",\n        title: \"\",\n        description: \"\",\n        noticeId: \"\"\n      });\n    }\n  }, [isShowNoticeModal]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [posts && posts.getPosts, loadPostLoading]);\n\n  if ((loadPostLoading && !posts) || (loadNoticeLoading && !notices)) {\n    return <Loader />;\n  }\n\n  return (\n    <FeedPresenter\n      loading={loadPostLoading}\n      posts={posts}\n      notices={notices}\n      isMaster={isMaster}\n      notice={notice}\n      isShowNoticeModal={isShowNoticeModal}\n      isShowAddPostModal={isShowAddPostModal}\n      onShowNotice={handleShowNotice}\n      onAddNotice={handleAddNotice}\n      recommandUserEl={recommandUserEl}\n    />\n  );\n};\n\nexport default FeedContainer;\n"]},"metadata":{},"sourceType":"module"}