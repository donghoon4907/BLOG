{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo } from \"react\";\nimport { ApolloClient, InMemoryCache, createHttpLink, split, ApolloLink } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition, concatPagination } from \"@apollo/client/utilities\";\nimport fetch from \"isomorphic-unfetch\";\nimport isBrowser from \"./isBrowser\";\nimport { getAccessToken } from \"./token\";\nvar apolloClient = null;\n\nif (!isBrowser) {\n  global.fetch = fetch;\n}\n\nfunction createApolloClient() {\n  var httpLink = createHttpLink({\n    uri: process.env.BACKEND_API_PATH\n  });\n  var wsLink = isBrowser ? new WebSocketLink({\n    uri: \"\".concat(process.env.BACKEND_WS_PATH),\n    options: {\n      reconnect: true\n    }\n  }) : null;\n  var splitLink = isBrowser ? split(function (_ref) {\n    var query = _ref.query;\n    var definition = getMainDefinition(query);\n    return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n  }, wsLink, httpLink) : httpLink;\n  var errorLink = onError(function (_ref2) {\n    var graphQLErrors = _ref2.graphQLErrors,\n        networkError = _ref2.networkError;\n    if (graphQLErrors) graphQLErrors.map(function (_ref3) {\n      var message = _ref3.message,\n          path = _ref3.path;\n      console.log(\"[GraphQL error] Query: \".concat(path, \", \").concat(message));\n    });\n\n    if (networkError) {\n      console.log(\"[Network error]: \".concat(networkError));\n    }\n  });\n  var authLink = setContext(function (_, _ref4) {\n    var headers = _ref4.headers;\n    var token = getAccessToken();\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        Authorization: \"Bearer \".concat(token)\n      })\n    };\n  });\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    link: ApolloLink.from([errorLink, authLink, isBrowser ? httpLink : splitLink]),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = apolloClient || createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    var existingCache = _apolloClient.extract(); // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (!isBrowser) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeApollo(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useApollo, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/lib/custorm.ts"],"names":["useMemo","ApolloClient","InMemoryCache","createHttpLink","split","ApolloLink","setContext","onError","WebSocketLink","getMainDefinition","concatPagination","fetch","isBrowser","getAccessToken","apolloClient","global","createApolloClient","httpLink","uri","process","env","BACKEND_API_PATH","wsLink","BACKEND_WS_PATH","options","reconnect","splitLink","query","definition","kind","operation","errorLink","graphQLErrors","networkError","map","message","path","console","log","authLink","_","headers","token","Authorization","connectToDevTools","ssrMode","link","from","cache","typePolicies","Query","fields","allPosts","initializeApollo","initialState","_apolloClient","existingCache","extract","restore","useApollo","store"],"mappings":"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","sourcesContent":["import { useMemo } from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n  split,\n  NormalizedCacheObject,\n  ApolloLink\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition, concatPagination } from \"@apollo/client/utilities\";\nimport Router from \"next/router\";\nimport fetch from \"isomorphic-unfetch\";\nimport isBrowser from \"./isBrowser\";\nimport { getAccessToken } from \"./token\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\nif (!isBrowser) {\n  (global as any).fetch = fetch;\n}\n\nfunction createApolloClient() {\n  const httpLink = createHttpLink({\n    uri: process.env.BACKEND_API_PATH\n  });\n\n  const wsLink = isBrowser\n    ? new WebSocketLink({\n        uri: `${process.env.BACKEND_WS_PATH}`,\n        options: {\n          reconnect: true\n        }\n      })\n    : null;\n\n  const splitLink = isBrowser\n    ? split(\n        ({ query }) => {\n          const definition = getMainDefinition(query);\n          return (\n            definition.kind === \"OperationDefinition\" &&\n            definition.operation === \"subscription\"\n          );\n        },\n        wsLink as any,\n        httpLink\n      )\n    : httpLink;\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors)\n      graphQLErrors.map(({ message, path }) => {\n        console.log(`[GraphQL error] Query: ${path}, ${message}`);\n      });\n    if (networkError) {\n      console.log(`[Network error]: ${networkError}`);\n    }\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    const token = getAccessToken();\n    return {\n      headers: {\n        ...headers,\n        Authorization: `Bearer ${token}`\n      }\n    };\n  });\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    link: ApolloLink.from([\n      errorLink,\n      authLink,\n      isBrowser ? httpLink : splitLink\n    ]),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient || createApolloClient();\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract();\n    // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n    _apolloClient.cache.restore({ ...existingCache, ...(initialState as any) });\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (!isBrowser) return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState: any) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}