{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  border: 0;\\n  border: \", \";\\n  border-radius: \", \";\\n  background: \", \";\\n  width: 100%;\\n  height: 35px;\\n  padding: 0px 15px;\\n  font-size: 12px;\\n\\n  &:focus {\\n    outline: none;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { forwardRef } from \"react\";\nimport styled from \"styled-components\";\nvar Container = styled.input(_templateObject(), function (props) {\n  return props.theme.boxBorder;\n}, function (props) {\n  return props.theme.borderRadius;\n}, function (props) {\n  return props.theme.bgColor;\n});\n_c = Container;\nvar Input = forwardRef(_c2 = function _c2(props, ref) {\n  return __jsx(Container, _extends({\n    ref: ref\n  }, props));\n});\n_c3 = Input;\nexport default Input;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Input$forwardRef\");\n$RefreshReg$(_c3, \"Input\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/common/Input.tsx"],"names":["Container","styled","props","Input","forwardRef","ref"],"mappings":";;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,UAAA,QAAA,OAAA;AACA,OAAA,MAAA,MAAA,mBAAA;AAEA,IAAMA,SAAS,GAAGC,MAAM,CAAT,KAAGA,CAAH,eAAA,EAAGA,EAEN,UAAA,KAAA,EAAK;AAAA,SAAIC,KAAK,CAALA,KAAAA,CAAJ,SAAA;AAFF,CAAGD,EAGC,UAAA,KAAA,EAAK;AAAA,SAAIC,KAAK,CAALA,KAAAA,CAAJ,YAAA;AAHT,CAAGD,EAIF,UAAA,KAAA,EAAK;AAAA,SAAIC,KAAK,CAALA,KAAAA,CAAJ,OAAA;AAJrB,CAAkBD,CAAlB;KAAMD,S;AAyBN,IAAMG,KAAK,GAAGC,UAAU,CAAA,GAAA,GAA0B,SAAA,GAAA,CAAA,KAAA,EAAA,GAAA,EAAA;AAAA,SAChD,KAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AAAW,IAAA,GAAG,EAAEC;AAAhB,GAAA,EADgD,KAChD,CAAA,CADgD;AAAlD,CAAwB,CAAxB;MAAMF,K;AAIN,eAAA,KAAA","sourcesContent":["import React, { forwardRef, ChangeEvent, HTMLAttributes } from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.input`\n  border: 0;\n  border: ${props => props.theme.boxBorder};\n  border-radius: ${props => props.theme.borderRadius};\n  background: ${props => props.theme.bgColor};\n  width: 100%;\n  height: 35px;\n  padding: 0px 15px;\n  font-size: 12px;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\ninterface Props extends HTMLAttributes<HTMLInputElement> {\n  placeholder?: string;\n  required?: boolean;\n  value: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  type?: string;\n  name?: string;\n  autoComplete?: string;\n}\n\nconst Input = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <Container ref={ref} {...props} />\n));\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}