{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport Layout from \"../components/common/Layout\"; // import SearchPost from \"../components/search/SearchPostContainer\";\n\nvar Search = function Search() {\n  return __jsx(Layout, null, __jsx(\"h1\", null, \"test\"));\n}; // export async function getStaticPaths() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch(\"https://.../posts\");\n//   const posts = await res.json();\n//   // Get the paths we want to pre-render based on posts\n//   const paths = posts.map(post => ({\n//     params: { id: post.id }\n//   }));\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false };\n// }\n\n\n_c = Search;\n\nSearch.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var keyword, apolloClient;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            keyword = ctx.query.keyword;\n            apolloClient = initializeApollo();\n            _context.next = 4;\n            return apolloClient.query({\n              query: searchQuery,\n              variables: {\n                first: 10,\n                keyword: keyword\n              }\n            });\n\n          case 4:\n            return _context.abrupt(\"return\", {\n              props: {\n                initialApolloState: apolloClient.cache.extract()\n              },\n              revalidate: 1\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // export const getStaticProps: GetStaticProps = async context => {\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: searchQuery,\n//     variables: {\n//       first: 10\n//     }\n//   });\n//   console.log(context);\n//   return {\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     },\n//     revalidate: 1\n//   };\n// };\n\n\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search.tsx"],"names":["React","initializeApollo","searchQuery","Layout","Search","getInitialProps","ctx","keyword","query","apolloClient","variables","first","props","initialApolloState","cache","extract","revalidate"],"mappings":";;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAEA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAOC,MAAP,MAAmB,6BAAnB,C,CACA;;AAEA,IAAMC,MAAgB,GAAG,SAAnBA,MAAmB,GAAM;AAC7B,SACE,MAAC,MAAD,QACE,yBADF,CADF;AAKD,CAND,C,CAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;KArBMA,M;;AAuBNA,MAAM,CAACC,eAAP;AAAA,sEAAyB,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,YAAAA,OADe,GACHD,GAAG,CAACE,KADD,CACfD,OADe;AAEjBE,YAAAA,YAFiB,GAEFR,gBAAgB,EAFd;AAAA;AAAA,mBAGjBQ,YAAY,CAACD,KAAb,CAAmB;AACvBA,cAAAA,KAAK,EAAEN,WADgB;AAEvBQ,cAAAA,SAAS,EAAE;AACTC,gBAAAA,KAAK,EAAE,EADE;AAETJ,gBAAAA,OAAO,EAAPA;AAFS;AAFY,aAAnB,CAHiB;;AAAA;AAAA,6CAWhB;AACLK,cAAAA,KAAK,EAAE;AACLC,gBAAAA,kBAAkB,EAAEJ,YAAY,CAACK,KAAb,CAAmBC,OAAnB;AADf,eADF;AAILC,cAAAA,UAAU,EAAE;AAJP,aAXgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA,I,CAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeZ,MAAf","sourcesContent":["import React, { FC } from \"react\";\nimport { GetStaticProps, NextPage } from \"next\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { searchQuery } from \"../graphql/page/query/search\";\nimport Layout from \"../components/common/Layout\";\n// import SearchPost from \"../components/search/SearchPostContainer\";\n\nconst Search: NextPage = () => {\n  return (\n    <Layout>\n      <h1>test</h1>\n    </Layout>\n  );\n};\n\n// export async function getStaticPaths() {\n//   // Call an external API endpoint to get posts\n//   const res = await fetch(\"https://.../posts\");\n//   const posts = await res.json();\n\n//   // Get the paths we want to pre-render based on posts\n//   const paths = posts.map(post => ({\n//     params: { id: post.id }\n//   }));\n\n//   // We'll pre-render only these paths at build time.\n//   // { fallback: false } means other routes should 404.\n//   return { paths, fallback: false };\n// }\n\nSearch.getInitialProps = async ctx => {\n  const { keyword } = ctx.query;\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: searchQuery,\n    variables: {\n      first: 10,\n      keyword\n    }\n  });\n\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    },\n    revalidate: 1\n  };\n};\n\n// export const getStaticProps: GetStaticProps = async context => {\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: searchQuery,\n//     variables: {\n//       first: 10\n//     }\n//   });\n//   console.log(context);\n\n//   return {\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     },\n//     revalidate: 1\n//   };\n// };\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}