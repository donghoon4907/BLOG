{"ast":null,"code":"var __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { usersQuery, recommandUsersQuery } from \"../../graphql/user/query\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\nimport SearchUserPresenter from \"./SearchUserPresenter\";\nimport { useVssDispatch, SET_ME } from \"../../context\";\n\nconst SearchUserContainer = () => {\n  const dispatch = useVssDispatch();\n  const router = useRouter();\n  const keyword = decodeURIComponent(router.query.keyword);\n  const {\n    data: users\n  } = useQuery(usersQuery, {\n    variables: {\n      keyword,\n      first: 10\n    }\n  });\n  const {\n    data: recommandUsers\n  } = useQuery(recommandUsersQuery);\n  useQuery(meQuery, {\n    ssr: false,\n    onCompleted: ({\n      getMyProfile\n    }) => {\n      const {\n        id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n  return __jsx(SearchUserPresenter, {\n    users: users.getUsers,\n    recommandUsers: recommandUsers.getRecommandUsers,\n    keyword: keyword\n  });\n};\n\nexport default SearchUserContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/search/SearchUserContainer.tsx"],"names":["useRouter","React","useQuery","usersQuery","recommandUsersQuery","meQuery","SearchUserPresenter","useVssDispatch","SET_ME","SearchUserContainer","dispatch","router","keyword","decodeURIComponent","query","data","users","variables","first","recommandUsers","ssr","onCompleted","getMyProfile","id","nickname","email","avatar","isMaster","type","userId","getUsers","getRecommandUsers"],"mappings":";AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,UAAT,EAAqBC,mBAArB,QAAgD,0BAAhD;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,eAAvC;;AAEA,MAAMC,mBAAuB,GAAG,MAAM;AACpC,QAAMC,QAAQ,GAAGH,cAAc,EAA/B;AACA,QAAMI,MAAM,GAAGX,SAAS,EAAxB;AACA,QAAMY,OAAO,GAAGC,kBAAkB,CAACF,MAAM,CAACG,KAAP,CAAaF,OAAd,CAAlC;AAEA,QAAM;AAAEG,IAAAA,IAAI,EAAEC;AAAR,MAAkBd,QAAQ,CAACC,UAAD,EAAa;AAC3Cc,IAAAA,SAAS,EAAE;AACTL,MAAAA,OADS;AAETM,MAAAA,KAAK,EAAE;AAFE;AADgC,GAAb,CAAhC;AAOA,QAAM;AAAEH,IAAAA,IAAI,EAAEI;AAAR,MAA2BjB,QAAQ,CAACE,mBAAD,CAAzC;AAEAF,EAAAA,QAAQ,CAACG,OAAD,EAAU;AAChBe,IAAAA,GAAG,EAAE,KADW;AAEhBC,IAAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAsB;AACjC,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA,QAAN;AAAgBC,QAAAA,KAAhB;AAAuBC,QAAAA,MAAvB;AAA+BC,QAAAA;AAA/B,UAA4CL,YAAlD;AACAZ,MAAAA,QAAQ,CAAC;AACPkB,QAAAA,IAAI,EAAEpB,MADC;AAEPqB,QAAAA,MAAM,EAAEN,EAFD;AAGPC,QAAAA,QAHO;AAIPC,QAAAA,KAJO;AAKPC,QAAAA,MALO;AAMPC,QAAAA;AANO,OAAD,CAAR;AAQD;AAZe,GAAV,CAAR;AAeA,SACE,MAAC,mBAAD;AACE,IAAA,KAAK,EAAEX,KAAK,CAACc,QADf;AAEE,IAAA,cAAc,EAAEX,cAAc,CAACY,iBAFjC;AAGE,IAAA,OAAO,EAAEnB;AAHX,IADF;AAOD,CApCD;;AAsCA,eAAeH,mBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport React, { FC } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { usersQuery, recommandUsersQuery } from \"../../graphql/user/query\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\nimport SearchUserPresenter from \"./SearchUserPresenter\";\nimport { useVssDispatch, SET_ME } from \"../../context\";\n\nconst SearchUserContainer: FC = () => {\n  const dispatch = useVssDispatch();\n  const router = useRouter();\n  const keyword = decodeURIComponent(router.query.keyword as string);\n\n  const { data: users } = useQuery(usersQuery, {\n    variables: {\n      keyword,\n      first: 10\n    }\n  });\n\n  const { data: recommandUsers } = useQuery(recommandUsersQuery);\n\n  useQuery(meQuery, {\n    ssr: false,\n    onCompleted: ({ getMyProfile }) => {\n      const { id, nickname, email, avatar, isMaster } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n\n  return (\n    <SearchUserPresenter\n      users={users.getUsers}\n      recommandUsers={recommandUsers.getRecommandUsers}\n      keyword={keyword}\n    />\n  );\n};\n\nexport default SearchUserContainer;\n"]},"metadata":{},"sourceType":"module"}