{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssState, useVssDispatch, HIDE_NOTICE_MODAL } from \"../../context\";\n\nconst SetNoticeContainer = () => {\n  const dispatch = useVssDispatch();\n  const {\n    activeNotice,\n    isMaster\n  } = useVssState();\n  const {\n    loading,\n    call\n  } = useLazyAxios();\n  const modalTitle = useInput(activeNotice.title);\n  const modalDescription = useInput(activeNotice.description);\n  const {\n    0: mdDescription,\n    1: setMdDescription\n  } = useState(\"\");\n  const {\n    0: preview,\n    1: setPreview\n  } = useState(\"\");\n  const {\n    0: modalAction,\n    1: setModalAction\n  } = useState({\n    code: activeNotice.action,\n    modalTitle: activeNotice.actionText\n  }); // readonly, modifiable, modify, add\n\n  const [set, {\n    loading: setNoticeLoading\n  }] = useMutation(activeNotice.noticeId ? updateNoticeMutation : addNoticeMutation);\n  const [remove, {\n    loading: removeNoticeLoading\n  }] = useMutation(removeNoticeMutation);\n\n  const convertTextIntoMd = async text => {\n    const {\n      data,\n      error\n    } = await call({\n      method: \"post\",\n      url: process.env.MDAPI_PATH,\n      data: {\n        text,\n        mode: \"gfm\",\n        context: \"github/gollum\"\n      }\n    });\n\n    if (data) {\n      const doc = new DOMParser().parseFromString(data, \"text/html\");\n      return doc.body.innerHTML;\n    } else if (error) {\n      return null;\n    } else {\n      throw new Error(\"please, check useLazyAxios\");\n    }\n  };\n\n  const handlePreView = useCallback(async () => {\n    if (loading) return;\n\n    if (!modalDescription.value) {\n      return alert(\"내용을 입력하세요.\");\n    }\n\n    try {\n      const md = await convertTextIntoMd(modalDescription.value);\n\n      if (md) {\n        setPreview(md);\n      }\n    } catch {\n      alert(\"미리보기 로드에 실패했습니다.\");\n    }\n  }, [modalDescription.value]);\n  const handleRefreshPreview = useCallback(() => {\n    setPreview(\"\");\n  }, []);\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: HIDE_NOTICE_MODAL\n    });\n  }, []);\n  const handleShowEdit = useCallback(() => {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n  const handleDelete = useCallback(async () => {\n    if (removeNoticeLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"공지사항을 삭제하시겠어요?\");\n\n    if (tf) {\n      const {\n        data: {\n          deleteNotice\n        }\n      } = await remove({\n        variables: {\n          noticeId: activeNotice.noticeId\n        }\n      });\n\n      if (deleteNotice) {\n        alert(\"공지사항이 삭제되었습니다.\");\n        dispatch({\n          type: HIDE_NOTICE_MODAL\n        });\n      }\n    }\n  }, [removeNoticeLoading]);\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n\n    if (setNoticeLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(`입력한 내용으로 ${modalAction.code === \"add\" ? \"등록\" : \"수정\"}하시겠어요?`);\n\n    if (tf) {\n      try {\n        const {\n          data: {\n            addNotice,\n            updateNotice\n          }\n        } = await set({\n          variables: {\n            title: modalTitle.value,\n            description: modalDescription.value,\n            noticeId: activeNotice.noticeId\n          }\n        });\n\n        if (updateNotice) {\n          alert(\"공지사항이 수정되었습니다.\");\n          dispatch({\n            type: HIDE_NOTICE_MODAL\n          });\n        } else if (addNotice) {\n          alert(\"공지사항이 등록되었습니다.\");\n          dispatch({\n            type: HIDE_NOTICE_MODAL\n          });\n        }\n      } catch (error) {\n        const {\n          message\n        } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [modalAction.code, modalTitle.value, modalDescription.value, setNoticeLoading]);\n  useEffect(() => {\n    async function loadDescription(value) {\n      const md = await convertTextIntoMd(value);\n\n      if (md) {\n        setMdDescription(md);\n      }\n    }\n\n    if (activeNotice.description) {\n      loadDescription(activeNotice.description);\n    }\n  }, [activeNotice.description]);\n  return __jsx(SetNoticePresenter, {\n    loading: loading,\n    removeNoticeLoading: removeNoticeLoading,\n    setNoticeLoading: setNoticeLoading,\n    action: modalAction,\n    isMaster: isMaster,\n    title: modalTitle,\n    description: modalDescription,\n    mdDescription: mdDescription,\n    preview: preview,\n    onShowEdit: handleShowEdit,\n    onPreview: handlePreView,\n    onRefreshPreview: handleRefreshPreview,\n    onClose: handleClose,\n    onDelete: handleDelete,\n    onSubmit: handleSubmit\n  });\n};\n\nexport default SetNoticeContainer;","map":null,"metadata":{},"sourceType":"module"}