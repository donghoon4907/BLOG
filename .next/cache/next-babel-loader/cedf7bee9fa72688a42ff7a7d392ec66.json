{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { ApolloClient, InMemoryCache, createHttpLink, split, ApolloLink } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport fetch from \"isomorphic-unfetch\";\nimport Router from \"next/router\";\nimport Head from \"next/head\";\nimport { getAccessToken, setAccessToken } from \"./token\";\nimport isBrowser from \"./isBrowser\";\nexport function withApollo(PageComponent) {\n  var WithApollo = function WithApollo(_ref) {\n    var apolloClient = _ref.apolloClient,\n        apolloState = _ref.apolloState,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(PageComponent, _extends({}, pageProps, {\n      apolloClient: client\n    }));\n  };\n\n  if (false) {\n    // Find correct display name\n    var displayName = PageComponent.displayName || PageComponent.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (!isBrowser || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n        var AppTree, res, apolloClient, pageProps, _yield$import, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = context.AppTree, res = context.ctx.res; // Run all GraphQL queries in the component tree\n                // and extract the resulting data\n\n                apolloClient = context.ctx.apolloClient = initApolloClient({});\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 5;\n                return PageComponent.getInitialProps(context);\n\n              case 5:\n                _context.t0 = _context.sent;\n                _context.next = 9;\n                break;\n\n              case 8:\n                _context.t0 = {};\n\n              case 9:\n                pageProps = _context.t0;\n\n                if (isBrowser) {\n                  _context.next = 27;\n                  break;\n                }\n\n                if (!(res && res.finished)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {});\n\n              case 13:\n                if (isBrowser) {\n                  _context.next = 26;\n                  break;\n                }\n\n                _context.prev = 14;\n                _context.next = 17;\n                return import(\"@apollo/react-ssr\");\n\n              case 17:\n                _yield$import = _context.sent;\n                getDataFromTree = _yield$import.getDataFromTree;\n                _context.next = 21;\n                return getDataFromTree(__jsx(AppTree, {\n                  pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                    apolloClient: apolloClient\n                  }),\n                  apolloClient: apolloClient\n                }));\n\n              case 21:\n                _context.next = 26;\n                break;\n\n              case 23:\n                _context.prev = 23;\n                _context.t1 = _context[\"catch\"](14);\n                // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                console.error(\"Error while running `getDataFromTree`\", _context.t1);\n\n              case 26:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 27:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                  apolloState: apolloState\n                }));\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[14, 23]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!isBrowser) {\n  global.fetch = fetch;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var httpLink = createHttpLink({\n    uri: process.env.BACKEND_API_PATH\n  });\n  var wsLink = isBrowser ? new WebSocketLink({\n    uri: \"\".concat(process.env.BACKEND_WS_PATH),\n    options: {\n      reconnect: true\n    }\n  }) : null;\n  var refreshLink = new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: function isTokenValidOrUndefined() {\n      var token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        var _jwtDecode = jwtDecode(token),\n            exp = _jwtDecode.exp;\n\n        if (Date.now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch (_unused) {\n        return false;\n      }\n    },\n    fetchAccessToken: function fetchAccessToken() {\n      var token = getAccessToken();\n      return fetch(\"\".concat(process.env.BACKEND_API_PATH, \"/refresh_token\"), {\n        method: \"POST\",\n        headers: {\n          Authentication: \"Bearer \".concat(token)\n        }\n      });\n    },\n    handleFetch: function handleFetch(accessToken) {\n      setAccessToken(accessToken);\n    },\n    handleError: function handleError(err) {\n      console.error(err);\n      Router.replace(\"/login\");\n    }\n  });\n  var splitLink = isBrowser ? split(function (_ref3) {\n    var query = _ref3.query;\n    var definition = getMainDefinition(query);\n    return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n  }, wsLink, httpLink) : httpLink;\n  var errorLink = onError(function (_ref4) {\n    var graphQLErrors = _ref4.graphQLErrors,\n        networkError = _ref4.networkError;\n    if (graphQLErrors) graphQLErrors.map(function (_ref5) {\n      var message = _ref5.message,\n          path = _ref5.path;\n      console.log(\"[GraphQL error] Query: \".concat(path, \", \").concat(message));\n      var response = JSON.parse(message);\n\n      if (isBrowser && response.status === 401) {\n        Router.replace(\"/login\");\n      }\n    });\n\n    if (networkError) {\n      console.log(\"[Network error]: \".concat(networkError));\n\n      if (isBrowser) {\n        alert(\"서버 점검 중입니다.\");\n        Router.replace(\"/login\");\n      }\n    }\n  });\n  var authLink = setContext(function (_, _ref6) {\n    var headers = _ref6.headers;\n    var token = getAccessToken();\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        Authorization: \"Bearer \".concat(token)\n      })\n    };\n  });\n  var link = [errorLink, authLink, isBrowser ? httpLink : splitLink];\n\n  if (isBrowser) {\n    link.unshift(refreshLink);\n  }\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    //link: errorLink.concat(authLink.concat(isBrowser ? httpLink : splitLink)),\n    link: ApolloLink.from(link),\n    cache: new InMemoryCache().restore(initialState)\n  });\n} // export function initializeApollo(initialState: any, options: Options) {\n//   // Make sure to create a new client for every server-side request so that data\n//   // isn't shared between connections (which would be bad)\n//   if (!isBrowser) {\n//     return createApolloClient(initialState, options);\n//   }\n//   // Reuse client on the client-side\n//   if (!apolloClient) {\n//     apolloClient = createApolloClient(initialState, options);\n//   }\n//   return apolloClient;\n// }\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\n\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!isBrowser) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}","map":null,"metadata":{},"sourceType":"module"}