{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useRef } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport SignUpPresenter from \"./SignUpPresenter\";\nimport { signUpMutation } from \"../../graphql/user/mutation/signup\";\n\nconst SignUpContainer = ({\n  setAction\n}) => {\n  const {\n    loading,\n    call\n  } = useLazyAxios();\n  const fileEl = useRef(null);\n  const confirmPwdEl = useRef(null);\n  const nickname = useInput(\"\");\n  const email = useInput(\"\");\n  const pwd = useInput(\"\");\n  const {\n    0: confirmPwd,\n    1: setConfirmPwd\n  } = useState(\"\");\n  const {\n    0: preview,\n    1: setPreview\n  } = useState(\"\");\n  const {\n    0: file,\n    1: setFile\n  } = useState(\"\");\n  const [signUp, {\n    loading: signUpLoading\n  }] = useMutation(signUpMutation);\n  const handleChangeConfirmPwd = useCallback(e => {\n    const {\n      value\n    } = e.target;\n    const node = confirmPwdEl.current;\n    setConfirmPwd(value);\n\n    if (pwd.value !== value) {\n      if (node) {\n        node.setCustomValidity(\"비밀번호가 일치하지 않습니다.\");\n      }\n    } else {\n      if (node) {\n        node.setCustomValidity(\"\");\n      }\n    }\n  }, [pwd.value]);\n  const handleChangePreview = useCallback(async e => {\n    const {\n      value,\n      files\n    } = e.target;\n    if (!value) return; // prevent cancel action\n\n    if (loading) return; // prevent same request\n\n    const [file] = files;\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const {\n      data,\n      error\n    } = await call({\n      method: \"post\",\n      url: `${process.env.BACKEND_API_PATH}/api/upload`,\n      data: formData,\n      headers: {\n        \"content-type\": \"multipart/form-data\"\n      }\n    });\n\n    if (data) {\n      const reader = new FileReader();\n\n      reader.onloadend = () => {\n        setPreview(reader.result);\n        setFile(data);\n      };\n\n      reader.readAsDataURL(file);\n    }\n\n    if (error) {\n      alert(\"썸네일 업로드 중 오류가 발생했습니다.\");\n    }\n  }, [loading]);\n  const handleClickUpload = useCallback(() => {\n    const node = fileEl.current;\n\n    if (node) {\n      node.click();\n    }\n  }, []);\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n\n    if (signUpLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"입력한 내용으로 회원가입 하시겠어요?\");\n\n    if (tf) {\n      try {\n        const {\n          data: {\n            addUser\n          }\n        } = await signUp({\n          variables: {\n            email: email.value,\n            pwd: pwd.value,\n            nickname: nickname.value,\n            file: file ? file : process.env.DEFAULT_AVATAR\n          }\n        });\n\n        if (addUser) {\n          setAction(\"login\");\n          alert(\"회원가입이 정상처리되었습니다.\");\n        }\n      } catch (error) {\n        const {\n          message\n        } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [email.value, pwd.value, nickname.value, file, signUpLoading]);\n  return __jsx(SignUpPresenter, {\n    loading: loading,\n    signUpLoading: signUpLoading,\n    nickname: nickname,\n    email: email,\n    pwd: pwd,\n    confirmPwd: confirmPwd,\n    preview: preview,\n    fileEl: fileEl,\n    confirmPwdEl: confirmPwdEl,\n    onChangePreview: handleChangePreview,\n    onChangeConfirmPwd: handleChangeConfirmPwd,\n    onClickUpload: handleClickUpload,\n    onSubmit: handleSubmit\n  });\n};\n\nexport default SignUpContainer;","map":null,"metadata":{},"sourceType":"module"}