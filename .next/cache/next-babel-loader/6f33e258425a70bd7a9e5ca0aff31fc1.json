{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport FeedPresenter from \"./FeedPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport { noticesQuery } from \"../../graphql/notice/query\";\nimport { useVssState, useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\nimport Loader from \"../common/Loader\";\n\nvar FeedContainer = function FeedContainer() {\n  _s();\n\n  var _useVssState = useVssState(),\n      isMaster = _useVssState.isMaster,\n      isShowNoticeModal = _useVssState.isShowNoticeModal;\n\n  var dispatch = useVssDispatch();\n  var recommandUserEl = useRef(null);\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState({\n    action: \"wait\",\n    actionText: \"비활성화\",\n    title: \"\",\n    description: \"\"\n  }),\n      notice = _useState2[0],\n      setNotice = _useState2[1];\n\n  var _useQuery = useQuery(postsQuery, {\n    variables: {\n      first: 10\n    },\n    fetchPolicy: \"network-only\"\n  }),\n      posts = _useQuery.data,\n      loadPostLoading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore;\n\n  var _useQuery2 = useQuery(noticesQuery, {\n    variables: {\n      first: 10\n    },\n    fetchPolicy: \"network-only\"\n  }),\n      notices = _useQuery2.data,\n      loadNoticeLoading = _useQuery2.loading;\n\n  var handleScrollFetchMore = function handleScrollFetchMore() {\n    if (loading) return;\n    var _document$documentEle = document.documentElement,\n        scrollHeight = _document$documentEle.scrollHeight,\n        clientHeight = _document$documentEle.clientHeight,\n        scrollTop = _document$documentEle.scrollTop;\n\n    if (posts && posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          setLoading(true);\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            },\n            updateQuery: function updateQuery(prev, _ref) {\n              var fetchMoreResult = _ref.fetchMoreResult;\n              if (!fetchMoreResult) return prev;\n\n              if (fetchMoreResult.getPosts.length === 0) {\n                window.removeEventListener(\"scroll\", handleScrollFetchMore);\n              }\n\n              setLoading(false);\n              return Object.assign({}, prev, {\n                getPosts: [].concat(_toConsumableArray(prev.getPosts), _toConsumableArray(fetchMoreResult.getPosts))\n              });\n            }\n          });\n        }\n      }\n    }\n  };\n\n  var handleAddNotice = useCallback(function () {\n    setNotice({\n      action: \"add\",\n      actionText: \"등록\",\n      title: \"\",\n      description: \"\"\n    });\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      isShowNoticeModal: true\n    });\n  }, []);\n  var handleShowNotice = useCallback(function (title, description, noticeId) {\n    setNotice({\n      action: isMaster ? \"modifiable\" : \"readonly\",\n      actionText: \"\",\n      title: title,\n      description: description,\n      noticeId: noticeId\n    });\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      isShowNoticeModal: true\n    });\n  }, [isMaster]);\n  useEffect(function () {\n    if (!isShowNoticeModal) {\n      setNotice({\n        action: \"wait\",\n        actionText: \"비활성화\",\n        title: \"\",\n        description: \"\",\n        noticeId: \"\"\n      });\n    }\n  }, [isShowNoticeModal]);\n  useEffect(function () {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return function () {\n      return window.removeEventListener(\"scroll\", handleScrollFetchMore);\n    };\n  }, [posts && posts.getPosts, loading]);\n\n  if (loadPostLoading && !posts || loadNoticeLoading && !notices) {\n    return __jsx(Loader, null);\n  }\n\n  return __jsx(FeedPresenter, {\n    posts: posts,\n    notices: notices,\n    loading: loading,\n    isMaster: isMaster,\n    notice: notice,\n    isShowNoticeModal: isShowNoticeModal,\n    onShowNotice: handleShowNotice,\n    onAddNotice: handleAddNotice,\n    recommandUserEl: recommandUserEl\n  });\n};\n\n_s(FeedContainer, \"GOwdEetnyBWuN28iSN/pXwDxbkM=\", false, function () {\n  return [useVssState, useVssDispatch, useQuery, useQuery];\n});\n\n_c = FeedContainer;\nexport default FeedContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/feed/FeedContainer.tsx"],"names":["React","useState","useCallback","useEffect","useRef","useQuery","FeedPresenter","postsQuery","noticesQuery","useVssState","useVssDispatch","SET_NOTICE_MODAL","Loader","FeedContainer","isMaster","isShowNoticeModal","dispatch","recommandUserEl","loading","setLoading","action","actionText","title","description","notice","setNotice","variables","first","fetchPolicy","posts","data","loadPostLoading","fetchMore","notices","loadNoticeLoading","handleScrollFetchMore","document","documentElement","scrollHeight","clientHeight","scrollTop","getPosts","length","skip","updateQuery","prev","fetchMoreResult","window","removeEventListener","Object","assign","handleAddNotice","type","handleShowNotice","noticeId","addEventListener"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useRef, FC } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport FeedPresenter from \"./FeedPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport { noticesQuery } from \"../../graphql/notice/query\";\nimport { useVssState, useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\nimport Loader from \"../common/Loader\";\n\nexport type NoticeProps = {\n  action: string;\n  actionText: string;\n  title: string;\n  description: string;\n  noticeId?: string;\n};\n\nconst FeedContainer: FC = () => {\n  const { isMaster, isShowNoticeModal } = useVssState();\n  const dispatch = useVssDispatch();\n  const recommandUserEl = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [notice, setNotice] = useState<NoticeProps>({\n    action: \"wait\",\n    actionText: \"비활성화\",\n    title: \"\",\n    description: \"\"\n  });\n\n  const { data: posts, loading: loadPostLoading, fetchMore } = useQuery(\n    postsQuery,\n    {\n      variables: {\n        first: 10\n      },\n      fetchPolicy: \"network-only\"\n    }\n  );\n\n  const { data: notices, loading: loadNoticeLoading } = useQuery(noticesQuery, {\n    variables: {\n      first: 10\n    },\n    fetchPolicy: \"network-only\"\n  });\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (posts && posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          setLoading(true);\n\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            },\n            updateQuery: (\n              prev,\n              { fetchMoreResult }: { fetchMoreResult?: any }\n            ) => {\n              if (!fetchMoreResult) return prev;\n\n              if (fetchMoreResult.getPosts.length === 0) {\n                window.removeEventListener(\"scroll\", handleScrollFetchMore);\n              }\n\n              setLoading(false);\n\n              return Object.assign({}, prev, {\n                getPosts: [...prev.getPosts, ...fetchMoreResult.getPosts]\n              });\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const handleAddNotice = useCallback(() => {\n    setNotice({\n      action: \"add\",\n      actionText: \"등록\",\n      title: \"\",\n      description: \"\"\n    });\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      isShowNoticeModal: true\n    });\n  }, []);\n\n  const handleShowNotice = useCallback(\n    (title, description, noticeId) => {\n      setNotice({\n        action: isMaster ? \"modifiable\" : \"readonly\",\n        actionText: \"\",\n        title,\n        description,\n        noticeId\n      });\n      dispatch({\n        type: SET_NOTICE_MODAL,\n        isShowNoticeModal: true\n      });\n    },\n    [isMaster]\n  );\n\n  useEffect(() => {\n    if (!isShowNoticeModal) {\n      setNotice({\n        action: \"wait\",\n        actionText: \"비활성화\",\n        title: \"\",\n        description: \"\",\n        noticeId: \"\"\n      });\n    }\n  }, [isShowNoticeModal]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [posts && posts.getPosts, loading]);\n\n  if ((loadPostLoading && !posts) || (loadNoticeLoading && !notices)) {\n    return <Loader />;\n  }\n\n  return (\n    <FeedPresenter\n      posts={posts}\n      notices={notices}\n      loading={loading}\n      isMaster={isMaster}\n      notice={notice}\n      isShowNoticeModal={isShowNoticeModal}\n      onShowNotice={handleShowNotice}\n      onAddNotice={handleAddNotice}\n      recommandUserEl={recommandUserEl}\n    />\n  );\n};\n\nexport default FeedContainer;\n"]},"metadata":{},"sourceType":"module"}