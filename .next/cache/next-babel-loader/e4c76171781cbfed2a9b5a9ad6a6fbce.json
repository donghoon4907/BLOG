{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\n\nconst SetNoticeContainer = ({\n  title,\n  description,\n  action,\n  actionText,\n  noticeId,\n  isMaster\n}) => {\n  const dispatch = useVssDispatch();\n  const {\n    loading,\n    call\n  } = useLazyAxios();\n  const modalTitle = useInput(title);\n  const modalDescription = useInput(description);\n  const {\n    0: mdDescription,\n    1: setMdDescription\n  } = useState(\"\");\n  const {\n    0: preview,\n    1: setPreview\n  } = useState(\"\");\n  const {\n    0: modalAction,\n    1: setModalAction\n  } = useState({\n    code: action,\n    modalTitle: actionText\n  }); // readonly, modifiable, modify, add\n\n  const [set, {\n    loading: setNoticeLoading\n  }] = useMutation(noticeId ? updateNoticeMutation : addNoticeMutation);\n  const [remove, {\n    loading: removeNoticeLoading\n  }] = useMutation(removeNoticeMutation);\n\n  const convertTextIntoMd = async text => {\n    const {\n      data,\n      error\n    } = await call({\n      method: \"post\",\n      url: process.env.MDAPI_PATH,\n      data: {\n        text,\n        mode: \"gfm\",\n        context: \"github/gollum\"\n      }\n    });\n\n    if (data) {\n      const doc = new DOMParser().parseFromString(data, \"text/html\");\n      return doc.body.innerHTML;\n    } else if (error) {\n      return null;\n    } else {\n      throw new Error(\"please, check useLazyAxios\");\n    }\n  };\n\n  const handlePreView = useCallback(async () => {\n    if (loading) return;\n    if (!modalDescription.value) return alert(\"내용을 입력하세요.\");\n\n    try {\n      const md = await convertTextIntoMd(modalDescription.value);\n\n      if (md) {\n        setPreview(md);\n      }\n    } catch {\n      alert(\"미리보기 로드에 실패했습니다.\");\n    }\n  }, [modalDescription.value]);\n  const handleRefreshPreview = useCallback(() => {\n    setPreview(\"\");\n  }, []);\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: false\n    });\n  }, []);\n  const handleShowEdit = useCallback(() => {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n  const handleDelete = useCallback(async () => {\n    if (removeNoticeLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"공지사항을 삭제하시겠어요?\");\n\n    if (tf) {\n      const {\n        data: {\n          deleteNotice\n        }\n      } = await remove({\n        variables: {\n          noticeId\n        }\n      });\n\n      if (deleteNotice) {\n        alert(\"공지사항이 삭제되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [removeNoticeLoading]);\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n\n    if (setNoticeLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(`입력한 내용으로 ${modalAction.code === \"add\" ? \"등록\" : \"수정\"}하시겠어요?`);\n\n    if (tf) {\n      const {\n        data: {\n          addNotice,\n          updateNotice\n        }\n      } = await set({\n        variables: {\n          title: modalTitle.value,\n          description: modalDescription.value,\n          noticeId\n        }\n      });\n\n      if (updateNotice) {\n        alert(\"공지사항이 수정되었습니다.\");\n        window.location.reload();\n      } else if (addNotice) {\n        alert(\"공지사항이 등록되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [modalAction.code, modalTitle.value, modalDescription.value, setNoticeLoading]);\n  useEffect(() => {\n    async function loadDescription(value) {\n      const md = await convertTextIntoMd(value);\n\n      if (md) {\n        setMdDescription(md);\n      }\n    }\n\n    if (description) {\n      loadDescription(description);\n    }\n  }, []);\n  return __jsx(SetNoticePresenter, {\n    loading: loading,\n    removeNoticeLoading: removeNoticeLoading,\n    setNoticeLoading: setNoticeLoading,\n    action: modalAction,\n    isMaster: isMaster,\n    title: modalTitle,\n    description: modalDescription,\n    mdDescription: mdDescription,\n    preview: preview,\n    onShowEdit: handleShowEdit,\n    onPreview: handlePreView,\n    onRefreshPreview: handleRefreshPreview,\n    onClose: handleClose,\n    onDelete: handleDelete,\n    onSubmit: handleSubmit\n  });\n};\n\nexport default SetNoticeContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetNoticeContainer.tsx"],"names":["React","useCallback","useState","useEffect","useMutation","addNoticeMutation","updateNoticeMutation","removeNoticeMutation","SetNoticePresenter","useInput","useLazyAxios","useVssDispatch","SET_NOTICE_MODAL","SetNoticeContainer","title","description","action","actionText","noticeId","isMaster","dispatch","loading","call","modalTitle","modalDescription","mdDescription","setMdDescription","preview","setPreview","modalAction","setModalAction","code","set","setNoticeLoading","remove","removeNoticeLoading","convertTextIntoMd","text","data","error","method","url","process","env","MDAPI_PATH","mode","context","doc","DOMParser","parseFromString","body","innerHTML","Error","handlePreView","value","alert","md","handleRefreshPreview","handleClose","type","payload","handleShowEdit","handleDelete","tf","confirm","deleteNotice","variables","window","location","reload","handleSubmit","e","preventDefault","addNotice","updateNotice","loadDescription"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, FC, FormEvent } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\n\ntype Props = {\n  title: string;\n  description: string;\n  action: string;\n  actionText: string;\n  noticeId: string;\n  isMaster: boolean;\n};\n\nconst SetNoticeContainer: FC<Props> = ({\n  title,\n  description,\n  action,\n  actionText,\n  noticeId,\n  isMaster\n}) => {\n  const dispatch = useVssDispatch();\n  const { loading, call } = useLazyAxios();\n  const modalTitle = useInput(title);\n  const modalDescription = useInput(description);\n  const [mdDescription, setMdDescription] = useState(\"\");\n  const [preview, setPreview] = useState(\"\");\n  const [modalAction, setModalAction] = useState({\n    code: action,\n    modalTitle: actionText\n  }); // readonly, modifiable, modify, add\n\n  const [set, { loading: setNoticeLoading }] = useMutation(\n    noticeId ? updateNoticeMutation : addNoticeMutation\n  );\n\n  const [remove, { loading: removeNoticeLoading }] = useMutation(\n    removeNoticeMutation\n  );\n\n  const convertTextIntoMd = async text => {\n    const { data, error } = await call({\n      method: \"post\",\n      url: process.env.MDAPI_PATH,\n      data: {\n        text,\n        mode: \"gfm\",\n        context: \"github/gollum\"\n      }\n    });\n    if (data) {\n      const doc = new DOMParser().parseFromString(data, \"text/html\");\n      return doc.body.innerHTML;\n    } else if (error) {\n      return null;\n    } else {\n      throw new Error(\"please, check useLazyAxios\");\n    }\n  };\n\n  const handlePreView = useCallback(async () => {\n    if (loading) return;\n    if (!modalDescription.value) return alert(\"내용을 입력하세요.\");\n    try {\n      const md = await convertTextIntoMd(modalDescription.value);\n\n      if (md) {\n        setPreview(md);\n      }\n    } catch {\n      alert(\"미리보기 로드에 실패했습니다.\");\n    }\n  }, [modalDescription.value]);\n\n  const handleRefreshPreview = useCallback(() => {\n    setPreview(\"\");\n  }, []);\n\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: false\n    });\n  }, []);\n\n  const handleShowEdit = useCallback(() => {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n\n  const handleDelete = useCallback(async () => {\n    if (removeNoticeLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"공지사항을 삭제하시겠어요?\");\n\n    if (tf) {\n      const {\n        data: { deleteNotice }\n      } = await remove({\n        variables: {\n          noticeId\n        }\n      });\n      if (deleteNotice) {\n        alert(\"공지사항이 삭제되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [removeNoticeLoading]);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (setNoticeLoading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n\n      const tf = confirm(\n        `입력한 내용으로 ${\n          modalAction.code === \"add\" ? \"등록\" : \"수정\"\n        }하시겠어요?`\n      );\n\n      if (tf) {\n        const {\n          data: { addNotice, updateNotice }\n        } = await set({\n          variables: {\n            title: modalTitle.value,\n            description: modalDescription.value,\n            noticeId\n          }\n        });\n        if (updateNotice) {\n          alert(\"공지사항이 수정되었습니다.\");\n          window.location.reload();\n        } else if (addNotice) {\n          alert(\"공지사항이 등록되었습니다.\");\n          window.location.reload();\n        }\n      }\n    },\n    [\n      modalAction.code,\n      modalTitle.value,\n      modalDescription.value,\n      setNoticeLoading\n    ]\n  );\n\n  useEffect(() => {\n    async function loadDescription(value) {\n      const md = await convertTextIntoMd(value);\n      if (md) {\n        setMdDescription(md);\n      }\n    }\n    if (description) {\n      loadDescription(description);\n    }\n  }, []);\n\n  return (\n    <SetNoticePresenter\n      loading={loading}\n      removeNoticeLoading={removeNoticeLoading}\n      setNoticeLoading={setNoticeLoading}\n      action={modalAction}\n      isMaster={isMaster}\n      title={modalTitle}\n      description={modalDescription}\n      mdDescription={mdDescription}\n      preview={preview}\n      onShowEdit={handleShowEdit}\n      onPreview={handlePreView}\n      onRefreshPreview={handleRefreshPreview}\n      onClose={handleClose}\n      onDelete={handleDelete}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SetNoticeContainer;\n"]},"metadata":{},"sourceType":"module"}