{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { usersQuery } from \"../graphql/user/query\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nimport Layout from \"../components/common/Layout\";\nimport Section from \"../components/common/Section\";\nimport SearchUser from \"../components/search/SearchUser\";\nimport SearchPost from \"../components/search/SearchPostContainer\";\nimport Subject from \"../components/common/Subject\";\n\nvar Search = function Search(_ref) {\n  _s();\n\n  var users = _ref.users;\n  var router = useRouter();\n  var dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    onCompleted: function onCompleted(_ref2) {\n      var getMyProfile = _ref2.getMyProfile;\n      var id = getMyProfile.id,\n          nickname = getMyProfile.nickname,\n          email = getMyProfile.email,\n          avatar = getMyProfile.avatar,\n          isMaster = getMyProfile.isMaster;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname: nickname,\n        email: email,\n        avatar: avatar,\n        isMaster: isMaster\n      });\n    }\n  });\n  return __jsx(Layout, {\n    title: \"\\uAC80\\uC0C9\\uACB0\\uACFC\"\n  }, __jsx(Section, null, __jsx(Subject, null, \"\\\"\", router.query.keyword, \"\\\"\\uC758 \\uAC80\\uC0C9\\uACB0\\uACFC\"), users.length > 0 && __jsx(SearchUser, {\n    users: users\n  }), __jsx(SearchPost, null)));\n};\n\n_s(Search, \"Ly4Vt2w/affoAKc+wwK7MyMdH58=\", false, function () {\n  return [useRouter, useVssDispatch, useQuery];\n});\n\n_c = Search;\n\nSearch.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var keyword, apolloClient, _yield$apolloClient$q, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            keyword = context.query.keyword;\n            apolloClient = initializeApollo();\n            _context.next = 4;\n            return apolloClient.query({\n              query: usersQuery,\n              variables: {\n                first: 3,\n                keyword: keyword\n              }\n            });\n\n          case 4:\n            _yield$apolloClient$q = _context.sent;\n            data = _yield$apolloClient$q.data;\n            return _context.abrupt(\"return\", {\n              users: data.getUsers\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search.tsx"],"names":["React","useRouter","useQuery","initializeApollo","usersQuery","meQuery","useVssDispatch","SET_ME","Layout","Section","SearchUser","SearchPost","Subject","Search","users","router","dispatch","onCompleted","getMyProfile","id","nickname","email","avatar","isMaster","type","userId","query","keyword","length","getInitialProps","context","apolloClient","variables","first","data","getUsers"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,YAAvC;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AACA,OAAOC,OAAP,MAAoB,8BAApB;;AAEA,IAAMC,MAAqB,GAAG,SAAxBA,MAAwB,OAAe;AAAA;;AAAA,MAAZC,KAAY,QAAZA,KAAY;AAC3C,MAAMC,MAAM,GAAGd,SAAS,EAAxB;AACA,MAAMe,QAAQ,GAAGV,cAAc,EAA/B;AACAJ,EAAAA,QAAQ,CAACG,OAAD,EAAU;AAChBY,IAAAA,WAAW,EAAE,4BAAsB;AAAA,UAAnBC,YAAmB,SAAnBA,YAAmB;AAAA,UACzBC,EADyB,GACiBD,YADjB,CACzBC,EADyB;AAAA,UACrBC,QADqB,GACiBF,YADjB,CACrBE,QADqB;AAAA,UACXC,KADW,GACiBH,YADjB,CACXG,KADW;AAAA,UACJC,MADI,GACiBJ,YADjB,CACJI,MADI;AAAA,UACIC,QADJ,GACiBL,YADjB,CACIK,QADJ;AAEjCP,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAEjB,MADC;AAEPkB,QAAAA,MAAM,EAAEN,EAFD;AAGPC,QAAAA,QAAQ,EAARA,QAHO;AAIPC,QAAAA,KAAK,EAALA,KAJO;AAKPC,QAAAA,MAAM,EAANA,MALO;AAMPC,QAAAA,QAAQ,EAARA;AANO,OAAD,CAAR;AAQD;AAXe,GAAV,CAAR;AAaA,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC;AAAd,KACE,MAAC,OAAD,QACE,MAAC,OAAD,cAAWR,MAAM,CAACW,KAAP,CAAaC,OAAxB,sCADF,EAEGb,KAAK,CAACc,MAAN,GAAe,CAAf,IAAoB,MAAC,UAAD;AAAY,IAAA,KAAK,EAAEd;AAAnB,IAFvB,EAGE,MAAC,UAAD,OAHF,CADF,CADF;AASD,CAzBD;;GAAMD,M;UACWZ,S,EACEK,c,EACjBJ,Q;;;KAHIW,M;;AA2BNA,MAAM,CAACgB,eAAP;AAAA,uEAAyB,iBAAMC,OAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACfH,YAAAA,OADe,GACHG,OAAO,CAACJ,KADL,CACfC,OADe;AAEjBI,YAAAA,YAFiB,GAEF5B,gBAAgB,EAFd;AAAA;AAAA,mBAGA4B,YAAY,CAACL,KAAb,CAAmB;AACxCA,cAAAA,KAAK,EAAEtB,UADiC;AAExC4B,cAAAA,SAAS,EAAE;AACTC,gBAAAA,KAAK,EAAE,CADE;AAETN,gBAAAA,OAAO,EAAPA;AAFS;AAF6B,aAAnB,CAHA;;AAAA;AAAA;AAGfO,YAAAA,IAHe,yBAGfA,IAHe;AAAA,6CAWhB;AACLpB,cAAAA,KAAK,EAAEoB,IAAI,CAACC;AADP,aAXgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA;;AAgBA,eAAetB,MAAf","sourcesContent":["import React from \"react\";\nimport { NextPage } from \"next\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { usersQuery } from \"../graphql/user/query\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nimport Layout from \"../components/common/Layout\";\nimport Section from \"../components/common/Section\";\nimport SearchUser from \"../components/search/SearchUser\";\nimport SearchPost from \"../components/search/SearchPostContainer\";\nimport Subject from \"../components/common/Subject\";\n\nconst Search: NextPage<any> = ({ users }) => {\n  const router = useRouter();\n  const dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    onCompleted: ({ getMyProfile }) => {\n      const { id, nickname, email, avatar, isMaster } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n  return (\n    <Layout title=\"검색결과\">\n      <Section>\n        <Subject>\"{router.query.keyword}\"의 검색결과</Subject>\n        {users.length > 0 && <SearchUser users={users} />}\n        <SearchPost />\n      </Section>\n    </Layout>\n  );\n};\n\nSearch.getInitialProps = async context => {\n  const { keyword } = context.query;\n  const apolloClient = initializeApollo();\n  const { data } = await apolloClient.query({\n    query: usersQuery,\n    variables: {\n      first: 3,\n      keyword\n    }\n  });\n\n  return {\n    users: data.getUsers\n  };\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}