{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssState, useVssDispatch, HIDE_NOTICE_MODAL } from \"../../context\";\n\nvar SetNoticeContainer = function SetNoticeContainer() {\n  _s();\n\n  var dispatch = useVssDispatch();\n\n  var _useVssState = useVssState(),\n      activeNotice = _useVssState.activeNotice,\n      isMaster = _useVssState.isMaster;\n\n  var _useLazyAxios = useLazyAxios(),\n      loading = _useLazyAxios.loading,\n      call = _useLazyAxios.call;\n\n  var modalTitle = useInput(activeNotice.title);\n  var modalDescription = useInput(activeNotice.description);\n\n  var _useState = useState(\"\"),\n      mdDescription = _useState[0],\n      setMdDescription = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      preview = _useState2[0],\n      setPreview = _useState2[1];\n\n  var _useState3 = useState({\n    code: activeNotice.action,\n    modalTitle: activeNotice.actionText\n  }),\n      modalAction = _useState3[0],\n      setModalAction = _useState3[1]; // readonly, modifiable, modify, add\n\n\n  var _useMutation = useMutation(activeNotice.noticeId ? updateNoticeMutation : addNoticeMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      set = _useMutation2[0],\n      setNoticeLoading = _useMutation2[1].loading;\n\n  var _useMutation3 = useMutation(removeNoticeMutation),\n      _useMutation4 = _slicedToArray(_useMutation3, 2),\n      remove = _useMutation4[0],\n      removeNoticeLoading = _useMutation4[1].loading;\n\n  var convertTextIntoMd = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text) {\n      var _yield$call, data, error, doc;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return call({\n                method: \"post\",\n                url: process.env.MDAPI_PATH,\n                data: {\n                  text: text,\n                  mode: \"gfm\",\n                  context: \"github/gollum\"\n                }\n              });\n\n            case 2:\n              _yield$call = _context.sent;\n              data = _yield$call.data;\n              error = _yield$call.error;\n\n              if (!data) {\n                _context.next = 10;\n                break;\n              }\n\n              doc = new DOMParser().parseFromString(data, \"text/html\");\n              return _context.abrupt(\"return\", doc.body.innerHTML);\n\n            case 10:\n              if (!error) {\n                _context.next = 14;\n                break;\n              }\n\n              return _context.abrupt(\"return\", null);\n\n            case 14:\n              throw new Error(\"please, check useLazyAxios\");\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function convertTextIntoMd(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handlePreView = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var md;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!loading) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            if (modalDescription.value) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", alert(\"내용을 입력하세요.\"));\n\n          case 4:\n            _context2.prev = 4;\n            _context2.next = 7;\n            return convertTextIntoMd(modalDescription.value);\n\n          case 7:\n            md = _context2.sent;\n\n            if (md) {\n              setPreview(md);\n            }\n\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](4);\n            alert(\"미리보기 로드에 실패했습니다.\");\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 11]]);\n  })), [modalDescription.value]);\n  var handleRefreshPreview = useCallback(function () {\n    setPreview(\"\");\n  }, []);\n  var handleClose = useCallback(function () {\n    dispatch({\n      type: HIDE_NOTICE_MODAL\n    });\n  }, []);\n  var handleShowEdit = useCallback(function () {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n  var handleDelete = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var tf, _yield$remove, deleteNotice;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!removeNoticeLoading) {\n              _context3.next = 2;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", alert(\"요청 중입니다. 잠시만 기다려주세요.\"));\n\n          case 2:\n            tf = confirm(\"공지사항을 삭제하시겠어요?\");\n\n            if (!tf) {\n              _context3.next = 9;\n              break;\n            }\n\n            _context3.next = 6;\n            return remove({\n              variables: {\n                noticeId: activeNotice.noticeId\n              }\n            });\n\n          case 6:\n            _yield$remove = _context3.sent;\n            deleteNotice = _yield$remove.data.deleteNotice;\n\n            if (deleteNotice) {\n              alert(\"공지사항이 삭제되었습니다.\");\n              window.location.reload();\n            }\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })), [removeNoticeLoading]);\n  var handleSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(e) {\n      var tf, _yield$set, _yield$set$data, addNotice, updateNotice, _JSON$parse, message;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              e.preventDefault();\n\n              if (!setNoticeLoading) {\n                _context4.next = 3;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", alert(\"요청 중입니다. 잠시만 기다려주세요.\"));\n\n            case 3:\n              tf = confirm(\"\\uC785\\uB825\\uD55C \\uB0B4\\uC6A9\\uC73C\\uB85C \".concat(modalAction.code === \"add\" ? \"등록\" : \"수정\", \"\\uD558\\uC2DC\\uACA0\\uC5B4\\uC694?\"));\n\n              if (!tf) {\n                _context4.next = 19;\n                break;\n              }\n\n              _context4.prev = 5;\n              _context4.next = 8;\n              return set({\n                variables: {\n                  title: modalTitle.value,\n                  description: modalDescription.value,\n                  noticeId: activeNotice.noticeId\n                }\n              });\n\n            case 8:\n              _yield$set = _context4.sent;\n              _yield$set$data = _yield$set.data;\n              addNotice = _yield$set$data.addNotice;\n              updateNotice = _yield$set$data.updateNotice;\n\n              if (updateNotice) {\n                alert(\"공지사항이 수정되었습니다.\");\n                window.location.reload();\n              } else if (addNotice) {\n                alert(\"공지사항이 등록되었습니다.\");\n                window.location.reload();\n              }\n\n              _context4.next = 19;\n              break;\n\n            case 15:\n              _context4.prev = 15;\n              _context4.t0 = _context4[\"catch\"](5);\n              _JSON$parse = JSON.parse(_context4.t0.message), message = _JSON$parse.message;\n              alert(message);\n\n            case 19:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[5, 15]]);\n    }));\n\n    return function (_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [modalAction.code, modalTitle.value, modalDescription.value, setNoticeLoading]);\n  useEffect(function () {\n    function loadDescription(_x3) {\n      return _loadDescription.apply(this, arguments);\n    }\n\n    function _loadDescription() {\n      _loadDescription = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(value) {\n        var md;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return convertTextIntoMd(value);\n\n              case 2:\n                md = _context5.sent;\n\n                if (md) {\n                  setMdDescription(md);\n                }\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n      return _loadDescription.apply(this, arguments);\n    }\n\n    if (activeNotice.description) {\n      loadDescription(activeNotice.description);\n    }\n  }, [activeNotice.description]);\n  return __jsx(SetNoticePresenter, {\n    loading: loading,\n    removeNoticeLoading: removeNoticeLoading,\n    setNoticeLoading: setNoticeLoading,\n    action: modalAction,\n    isMaster: isMaster,\n    title: modalTitle,\n    description: modalDescription,\n    mdDescription: mdDescription,\n    preview: preview,\n    onShowEdit: handleShowEdit,\n    onPreview: handlePreView,\n    onRefreshPreview: handleRefreshPreview,\n    onClose: handleClose,\n    onDelete: handleDelete,\n    onSubmit: handleSubmit\n  });\n};\n\n_s(SetNoticeContainer, \"sCYkC812blq8s7oCwtzpUG3sBGU=\", false, function () {\n  return [useVssDispatch, useVssState, useLazyAxios, useInput, useInput, useMutation, useMutation];\n});\n\n_c = SetNoticeContainer;\nexport default SetNoticeContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetNoticeContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetNoticeContainer.tsx"],"names":["React","useCallback","useState","useEffect","useMutation","addNoticeMutation","updateNoticeMutation","removeNoticeMutation","SetNoticePresenter","useInput","useLazyAxios","useVssState","useVssDispatch","HIDE_NOTICE_MODAL","SetNoticeContainer","dispatch","activeNotice","isMaster","loading","call","modalTitle","title","modalDescription","description","mdDescription","setMdDescription","preview","setPreview","code","action","actionText","modalAction","setModalAction","noticeId","set","setNoticeLoading","remove","removeNoticeLoading","convertTextIntoMd","text","method","url","process","env","MDAPI_PATH","data","mode","context","error","doc","DOMParser","parseFromString","body","innerHTML","Error","handlePreView","value","alert","md","handleRefreshPreview","handleClose","type","handleShowEdit","handleDelete","tf","confirm","variables","deleteNotice","window","location","reload","handleSubmit","e","preventDefault","addNotice","updateNotice","JSON","parse","message","loadDescription"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, FC, FormEvent } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { addNoticeMutation } from \"../../graphql/notice/mutation/add\";\nimport { updateNoticeMutation } from \"../../graphql/notice/mutation/update\";\nimport { removeNoticeMutation } from \"../../graphql/notice/mutation/remove\";\nimport SetNoticePresenter from \"./SetNoticePresenter\";\nimport { useInput, useLazyAxios } from \"../../hooks\";\nimport { useVssState, useVssDispatch, HIDE_NOTICE_MODAL } from \"../../context\";\n\nconst SetNoticeContainer: FC = () => {\n  const dispatch = useVssDispatch();\n  const { activeNotice, isMaster } = useVssState();\n  const { loading, call } = useLazyAxios();\n  const modalTitle = useInput(activeNotice.title);\n  const modalDescription = useInput(activeNotice.description);\n  const [mdDescription, setMdDescription] = useState<string>(\"\");\n  const [preview, setPreview] = useState<string>(\"\");\n  const [modalAction, setModalAction] = useState<any>({\n    code: activeNotice.action,\n    modalTitle: activeNotice.actionText\n  }); // readonly, modifiable, modify, add\n\n  const [set, { loading: setNoticeLoading }] = useMutation(\n    activeNotice.noticeId ? updateNoticeMutation : addNoticeMutation\n  );\n\n  const [remove, { loading: removeNoticeLoading }] = useMutation(\n    removeNoticeMutation\n  );\n\n  const convertTextIntoMd = async (text: string) => {\n    const { data, error } = await call({\n      method: \"post\",\n      url: process.env.MDAPI_PATH,\n      data: {\n        text,\n        mode: \"gfm\",\n        context: \"github/gollum\"\n      }\n    });\n    if (data) {\n      const doc = new DOMParser().parseFromString(data, \"text/html\");\n      return doc.body.innerHTML;\n    } else if (error) {\n      return null;\n    } else {\n      throw new Error(\"please, check useLazyAxios\");\n    }\n  };\n\n  const handlePreView = useCallback(async () => {\n    if (loading) return;\n    if (!modalDescription.value) {\n      return alert(\"내용을 입력하세요.\");\n    }\n    try {\n      const md = await convertTextIntoMd(modalDescription.value);\n\n      if (md) {\n        setPreview(md);\n      }\n    } catch {\n      alert(\"미리보기 로드에 실패했습니다.\");\n    }\n  }, [modalDescription.value]);\n\n  const handleRefreshPreview = useCallback(() => {\n    setPreview(\"\");\n  }, []);\n\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: HIDE_NOTICE_MODAL\n    });\n  }, []);\n\n  const handleShowEdit = useCallback(() => {\n    setModalAction({\n      code: \"modify\",\n      modalTitle: \"수정\"\n    });\n  }, []);\n\n  const handleDelete = useCallback(async () => {\n    if (removeNoticeLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"공지사항을 삭제하시겠어요?\");\n\n    if (tf) {\n      const {\n        data: { deleteNotice }\n      } = await remove({\n        variables: {\n          noticeId: activeNotice.noticeId\n        }\n      });\n      if (deleteNotice) {\n        alert(\"공지사항이 삭제되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [removeNoticeLoading]);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (setNoticeLoading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n\n      const tf = confirm(\n        `입력한 내용으로 ${\n          modalAction.code === \"add\" ? \"등록\" : \"수정\"\n        }하시겠어요?`\n      );\n\n      if (tf) {\n        try {\n          const {\n            data: { addNotice, updateNotice }\n          } = await set({\n            variables: {\n              title: modalTitle.value,\n              description: modalDescription.value,\n              noticeId: activeNotice.noticeId\n            }\n          });\n          if (updateNotice) {\n            alert(\"공지사항이 수정되었습니다.\");\n            window.location.reload();\n          } else if (addNotice) {\n            alert(\"공지사항이 등록되었습니다.\");\n            window.location.reload();\n          }\n        } catch (error) {\n          const { message } = JSON.parse(error.message);\n          alert(message);\n        }\n      }\n    },\n    [\n      modalAction.code,\n      modalTitle.value,\n      modalDescription.value,\n      setNoticeLoading\n    ]\n  );\n\n  useEffect(() => {\n    async function loadDescription(value: string) {\n      const md = await convertTextIntoMd(value);\n      if (md) {\n        setMdDescription(md);\n      }\n    }\n    if (activeNotice.description) {\n      loadDescription(activeNotice.description);\n    }\n  }, [activeNotice.description]);\n\n  return (\n    <SetNoticePresenter\n      loading={loading}\n      removeNoticeLoading={removeNoticeLoading}\n      setNoticeLoading={setNoticeLoading}\n      action={modalAction}\n      isMaster={isMaster}\n      title={modalTitle}\n      description={modalDescription}\n      mdDescription={mdDescription}\n      preview={preview}\n      onShowEdit={handleShowEdit}\n      onPreview={handlePreView}\n      onRefreshPreview={handleRefreshPreview}\n      onClose={handleClose}\n      onDelete={handleDelete}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SetNoticeContainer;\n"]},"metadata":{},"sourceType":"module"}