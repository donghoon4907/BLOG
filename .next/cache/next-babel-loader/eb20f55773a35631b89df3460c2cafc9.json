{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useRef } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport axios from \"axios\";\nimport { addPostMutation } from \"../../graphql/post/mutation/add\";\nimport { updatePostMutation } from \"../../graphql/post/mutation/update\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport SetPostPresenter from \"./SetPostPresenter\";\nimport { useInput } from \"../../hooks\";\nimport { useVssDispatch, SET_ADDPOST_MODAL } from \"../../context\";\n\nconst SetPostContainer = ({\n  title,\n  description,\n  status,\n  postId,\n  url\n}) => {\n  const dispatch = useVssDispatch();\n  const {\n    0: header,\n    1: setHeader\n  } = useState(postId ? \"수정\" : \"영상 업로드\");\n  const fileEl = useRef(null);\n  const modalTitle = useInput(title || \"\");\n  const modalDescription = useInput(description || \"\");\n  const modalStatus = useInput(status || \"PUBLIC\");\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(postId ? 100 : 0);\n  const {\n    0: file,\n    1: setFile\n  } = useState(url ? url : \"\");\n  const [set, {\n    loading: setPostLoading\n  }] = useMutation(postId ? updatePostMutation : addPostMutation);\n  const [remove, {\n    loading: removePostLoading\n  }] = useMutation(removePostMutation);\n  const handleClickFile = useCallback(() => {\n    const node = fileEl.current;\n\n    if (node) {\n      node.click();\n    }\n  }, []);\n  const handleChangeFile = useCallback(async e => {\n    if (!e.target.value) return; // cancel select file\n\n    const {\n      files\n    } = e.target;\n    const formData = new FormData();\n    formData.append(\"file\", files[0]);\n    const response = await axios.post(`${process.env.BACKEND_API_PATH}/api/upload`, formData, {\n      onUploadProgress: ({\n        lengthComputable,\n        loaded,\n        total\n      }) => {\n        if (lengthComputable) {\n          setProgress(Math.floor(loaded / total * 100));\n        }\n      }\n    });\n\n    if (response.data) {\n      setFile(response.data);\n      setHeader(\"등록\");\n    }\n  }, []);\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n\n    if (setPostLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(`입력한 내용으로 ${postId ? \"수정\" : \"등록\"}하시겠어요?`);\n\n    if (tf) {\n      try {\n        const {\n          data: {\n            addPost,\n            updatePost\n          }\n        } = await set({\n          variables: {\n            postId,\n            title: modalTitle.value,\n            description: modalDescription.value,\n            status: modalStatus.value,\n            file\n          }\n        });\n\n        if (addPost || updatePost) {\n          alert(`포스트가 ${postId ? \"수정\" : \"등록\"} 되었습니다.`);\n          location.reload();\n        }\n      } catch (error) {\n        const {\n          message\n        } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [modalTitle.value, modalDescription.value, modalStatus.value, file, setPostLoading]);\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_ADDPOST_MODAL,\n      payload: false\n    });\n  }, []);\n  return __jsx(SetPostPresenter, {\n    loading: setPostLoading,\n    header: header,\n    title: modalTitle,\n    description: modalDescription,\n    status: modalStatus,\n    progress: progress,\n    file: file,\n    fileEl: fileEl,\n    onClickFile: handleClickFile,\n    onChangeFile: handleChangeFile,\n    onClose: handleClose,\n    onSubmit: handleSubmit\n  });\n};\n\nexport default SetPostContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetPostContainer.tsx"],"names":["React","useCallback","useState","useRef","useMutation","axios","addPostMutation","updatePostMutation","removePostMutation","SetPostPresenter","useInput","useVssDispatch","SET_ADDPOST_MODAL","SetPostContainer","title","description","status","postId","url","dispatch","header","setHeader","fileEl","modalTitle","modalDescription","modalStatus","progress","setProgress","file","setFile","set","loading","setPostLoading","remove","removePostLoading","handleClickFile","node","current","click","handleChangeFile","e","target","value","files","formData","FormData","append","response","post","process","env","BACKEND_API_PATH","onUploadProgress","lengthComputable","loaded","total","Math","floor","data","handleSubmit","preventDefault","alert","tf","confirm","addPost","updatePost","variables","location","reload","error","message","JSON","parse","handleClose","type","payload"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, FC, useRef, FormEvent } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport axios from \"axios\";\nimport { addPostMutation } from \"../../graphql/post/mutation/add\";\nimport { updatePostMutation } from \"../../graphql/post/mutation/update\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport SetPostPresenter from \"./SetPostPresenter\";\nimport { useInput } from \"../../hooks\";\nimport { useVssDispatch, SET_ADDPOST_MODAL } from \"../../context\";\n\ntype Props = {\n  title?: string;\n  description?: string;\n  status?: string;\n  postId?: string;\n  url?: string;\n};\n\nconst SetPostContainer: FC<Props> = ({\n  title,\n  description,\n  status,\n  postId,\n  url\n}) => {\n  const dispatch = useVssDispatch();\n\n  const [header, setHeader] = useState(postId ? \"수정\" : \"영상 업로드\");\n\n  const fileEl = useRef<HTMLInputElement>(null);\n\n  const modalTitle = useInput(title || \"\");\n  const modalDescription = useInput(description || \"\");\n  const modalStatus = useInput(status || \"PUBLIC\");\n  const [progress, setProgress] = useState<number>(postId ? 100 : 0);\n  const [file, setFile] = useState<string>(url ? url : \"\");\n\n  const [set, { loading: setPostLoading }] = useMutation(\n    postId ? updatePostMutation : addPostMutation\n  );\n\n  const [remove, { loading: removePostLoading }] = useMutation(\n    removePostMutation\n  );\n\n  const handleClickFile = useCallback(() => {\n    const node = fileEl.current;\n    if (node) {\n      node.click();\n    }\n  }, []);\n\n  const handleChangeFile = useCallback(async e => {\n    if (!e.target.value) return; // cancel select file\n\n    const { files } = e.target;\n\n    const formData = new FormData();\n    formData.append(\"file\", files[0]);\n\n    const response = await axios.post(\n      `${process.env.BACKEND_API_PATH}/api/upload`,\n      formData,\n      {\n        onUploadProgress: ({ lengthComputable, loaded, total }) => {\n          if (lengthComputable) {\n            setProgress(Math.floor((loaded / total) * 100));\n          }\n        }\n      }\n    );\n    if (response.data) {\n      setFile(response.data);\n      setHeader(\"등록\");\n    }\n  }, []);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (setPostLoading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n\n      const tf = confirm(\n        `입력한 내용으로 ${postId ? \"수정\" : \"등록\"}하시겠어요?`\n      );\n\n      if (tf) {\n        try {\n          const {\n            data: { addPost, updatePost }\n          } = await set({\n            variables: {\n              postId,\n              title: modalTitle.value,\n              description: modalDescription.value,\n              status: modalStatus.value,\n              file\n            }\n          });\n          if (addPost || updatePost) {\n            alert(`포스트가 ${postId ? \"수정\" : \"등록\"} 되었습니다.`);\n            location.reload();\n          }\n        } catch (error) {\n          const { message } = JSON.parse(error.message);\n          alert(message);\n        }\n      }\n    },\n    [\n      modalTitle.value,\n      modalDescription.value,\n      modalStatus.value,\n      file,\n      setPostLoading\n    ]\n  );\n\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: SET_ADDPOST_MODAL,\n      payload: false\n    });\n  }, []);\n\n  return (\n    <SetPostPresenter\n      loading={setPostLoading}\n      header={header}\n      title={modalTitle}\n      description={modalDescription}\n      status={modalStatus}\n      progress={progress}\n      file={file}\n      fileEl={fileEl}\n      onClickFile={handleClickFile}\n      onChangeFile={handleChangeFile}\n      onClose={handleClose}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SetPostContainer;\n"]},"metadata":{},"sourceType":"module"}