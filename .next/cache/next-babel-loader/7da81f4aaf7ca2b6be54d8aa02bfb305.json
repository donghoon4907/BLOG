{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport Router from \"next/router\";\nimport { useMutation } from \"@apollo/client\";\nimport PostPresenter from \"./PostPresenter\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport { likeMutation } from \"../../graphql/post/mutation/like\";\nimport { useVssDispatch, SHOW_POST_MODAL } from \"../../context\";\n\nconst PostContainer = ({\n  id,\n  title,\n  description,\n  createdAt,\n  user,\n  video,\n  isLiked,\n  likeCount,\n  isMyPost,\n  status,\n  room\n}) => {\n  const dispatch = useVssDispatch();\n  const {\n    0: ctrlIsLiked,\n    1: setCtrlIsLiked\n  } = useState(isLiked);\n  const {\n    0: ctrlLikeCount,\n    1: setCtrlLikeCount\n  } = useState(likeCount);\n  const [like, {\n    loading: likeLoading\n  }] = useMutation(likeMutation);\n  const [remove, {\n    loading: removeLoading\n  }] = useMutation(removePostMutation); // 포스트 채팅방 접근 이벤트\n\n  const handleRoom = useCallback(() => {\n    Router.push(`/room/${room.id}`);\n  }, []); // 포스트 수정 이벤트\n\n  const handleUpdate = useCallback(() => {\n    dispatch({\n      type: SHOW_POST_MODAL,\n      isShow: true,\n      id,\n      title,\n      description,\n      status,\n      url: video.url\n    });\n  }, []); // 좋아요 / 좋아요 취소 이벤트\n\n  const handleLike = useCallback(async () => {\n    if (likeLoading) {\n      return alert(\"요청중입니다. 잠시만 기다려주세요.\");\n    }\n\n    setCtrlIsLiked(!ctrlIsLiked);\n    setCtrlLikeCount(ctrlIsLiked ? ctrlLikeCount - 1 : ctrlLikeCount + 1);\n\n    try {\n      await like({\n        variables: {\n          postId: id\n        }\n      });\n    } catch (error) {\n      const {\n        message\n      } = JSON.parse(error.message);\n      alert(message);\n    }\n  }, [ctrlIsLiked, ctrlLikeCount, likeLoading]); // 삭제 이벤트\n\n  const handleDelete = useCallback(async () => {\n    if (removeLoading) {\n      return alert(\"요청중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n    if (tf) {\n      try {\n        const {\n          data: {\n            deletePost\n          }\n        } = await remove({\n          variables: {\n            postId: id\n          }\n        });\n\n        if (deletePost) {\n          alert(\"포스트가 삭제되었습니다.\");\n          window.location.reload();\n        }\n      } catch (error) {\n        const {\n          message\n        } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [removeLoading]);\n  return __jsx(PostPresenter, {\n    title: title,\n    description: description,\n    status: status,\n    createdAt: createdAt,\n    user: user,\n    video: video,\n    isLiked: ctrlIsLiked,\n    likeCount: ctrlLikeCount,\n    isMyPost: isMyPost,\n    onLike: handleLike,\n    onUpdate: handleUpdate,\n    onRoom: handleRoom,\n    onDelete: handleDelete\n  });\n};\n\nexport default PostContainer;","map":null,"metadata":{},"sourceType":"module"}