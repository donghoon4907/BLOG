{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React from \"react\";\nimport { ApolloClient, InMemoryCache, createHttpLink, split, ApolloLink } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport fetch from \"isomorphic-unfetch\";\nimport Router from \"next/router\";\nimport Head from \"next/head\";\nimport { getAccessToken, setAccessToken } from \"./token\";\nimport isBrowser from \"./isBrowser\";\nexport function withApollo(PageComponent) {\n  var WithApollo = function WithApollo(_ref) {\n    var apolloClient = _ref.apolloClient,\n        apolloState = _ref.apolloState,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    var client = apolloClient || initApolloClient(apolloState);\n    return __jsx(PageComponent, _extends({}, pageProps, {\n      apolloClient: client\n    }));\n  };\n\n  if (true) {\n    // Find correct display name\n    var displayName = PageComponent.displayName || PageComponent.name || \"Component\"; // Warn if old way of installing apollo is used\n\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    } // Set correct display name for devtools\n\n\n    WithApollo.displayName = \"withApollo(\".concat(displayName, \")\");\n  }\n\n  if (!isBrowser || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n        var AppTree, res, apolloClient, pageProps, _yield$import, getDataFromTree, apolloState;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                AppTree = context.AppTree, res = context.ctx.res; // Run all GraphQL queries in the component tree\n                // and extract the resulting data\n\n                apolloClient = context.ctx.apolloClient = initApolloClient({});\n\n                if (!PageComponent.getInitialProps) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 5;\n                return PageComponent.getInitialProps(context);\n\n              case 5:\n                _context.t0 = _context.sent;\n                _context.next = 9;\n                break;\n\n              case 8:\n                _context.t0 = {};\n\n              case 9:\n                pageProps = _context.t0;\n\n                if (isBrowser) {\n                  _context.next = 27;\n                  break;\n                }\n\n                if (!(res && res.finished)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", {});\n\n              case 13:\n                if (isBrowser) {\n                  _context.next = 26;\n                  break;\n                }\n\n                _context.prev = 14;\n                _context.next = 17;\n                return import(\"@apollo/react-ssr\");\n\n              case 17:\n                _yield$import = _context.sent;\n                getDataFromTree = _yield$import.getDataFromTree;\n                _context.next = 21;\n                return getDataFromTree(__jsx(AppTree, {\n                  pageProps: _objectSpread(_objectSpread({}, pageProps), {}, {\n                    apolloClient: apolloClient\n                  }),\n                  apolloClient: apolloClient\n                }));\n\n              case 21:\n                _context.next = 26;\n                break;\n\n              case 23:\n                _context.prev = 23;\n                _context.t1 = _context[\"catch\"](14); // Prevent Apollo Client GraphQL errors from crashing SSR.\n                // Handle them in components via the data.error prop:\n                // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n\n                console.error(\"Error while running `getDataFromTree`\", _context.t1);\n\n              case 26:\n                // getDataFromTree does not call componentWillUnmount\n                // head side effect therefore need to be cleared manually\n                Head.rewind();\n\n              case 27:\n                // Extract query data from the Apollo store\n                apolloState = apolloClient.cache.extract();\n                return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                  apolloState: apolloState\n                }));\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[14, 23]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  }\n\n  return WithApollo;\n}\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!isBrowser) {\n  global.fetch = fetch;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\n\n\nfunction createApolloClient() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var httpLink = createHttpLink({\n    uri: process.env.BACKEND_API_PATH\n  });\n  var wsLink = isBrowser ? new WebSocketLink({\n    uri: \"\".concat(process.env.BACKEND_WS_PATH),\n    options: {\n      reconnect: true\n    }\n  }) : null;\n  var refreshLink = new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: function isTokenValidOrUndefined() {\n      var token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        var _jwtDecode = jwtDecode(token),\n            exp = _jwtDecode.exp;\n\n        if (Date.now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch (_unused) {\n        return false;\n      }\n    },\n    fetchAccessToken: function fetchAccessToken() {\n      var token = getAccessToken();\n      return fetch(\"\".concat(process.env.BACKEND_API_PATH, \"/refresh_token\"), {\n        method: \"POST\",\n        headers: {\n          Authentication: \"Bearer \".concat(token)\n        }\n      });\n    },\n    handleFetch: function handleFetch(accessToken) {\n      setAccessToken(accessToken);\n    },\n    handleError: function handleError(err) {\n      console.error(err);\n      Router.replace(\"/login\");\n    }\n  });\n  var splitLink = isBrowser ? split(function (_ref3) {\n    var query = _ref3.query;\n    var definition = getMainDefinition(query);\n    return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n  }, wsLink, httpLink) : httpLink;\n  var errorLink = onError(function (_ref4) {\n    var graphQLErrors = _ref4.graphQLErrors,\n        networkError = _ref4.networkError;\n    if (graphQLErrors) graphQLErrors.map(function (_ref5) {\n      var message = _ref5.message,\n          path = _ref5.path;\n      console.log(\"[GraphQL error] Query: \".concat(path, \", \").concat(message));\n      var response = JSON.parse(message);\n\n      if (isBrowser && response.status === 401) {\n        Router.replace(\"/login\");\n      }\n    });\n\n    if (networkError) {\n      console.log(\"[Network error]: \".concat(networkError));\n\n      if (isBrowser) {\n        alert(\"서버 점검 중입니다.\");\n        Router.replace(\"/login\");\n      }\n    }\n  });\n  var authLink = setContext(function (_, _ref6) {\n    var headers = _ref6.headers;\n    console.log(\"isBrowser: \".concat(isBrowser));\n    var token = getAccessToken();\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        Authorization: \"Bearer \".concat(token)\n      })\n    };\n  });\n  var link = [authLink, errorLink, splitLink];\n\n  if (isBrowser) {\n    link.push(refreshLink);\n  }\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    //link: errorLink.concat(authLink.concat(isBrowser ? httpLink : splitLink)),\n    link: ApolloLink.from(link),\n    cache: new InMemoryCache().restore(initialState)\n  });\n} // export function initializeApollo(initialState: any, options: Options) {\n//   // Make sure to create a new client for every server-side request so that data\n//   // isn't shared between connections (which would be bad)\n//   if (!isBrowser) {\n//     return createApolloClient(initialState, options);\n//   }\n//   // Reuse client on the client-side\n//   if (!apolloClient) {\n//     apolloClient = createApolloClient(initialState, options);\n//   }\n//   return apolloClient;\n// }\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\n\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!isBrowser) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/lib/apollo.tsx"],"names":["WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","displayName","PageComponent","console","AppTree","res","context","getDataFromTree","Head","global","initialState","httpLink","createHttpLink","uri","process","BACKEND_API_PATH","wsLink","isBrowser","options","reconnect","refreshLink","accessTokenField","isTokenValidOrUndefined","token","getAccessToken","exp","jwtDecode","Date","fetchAccessToken","fetch","method","headers","Authentication","handleFetch","setAccessToken","handleError","Router","splitLink","split","query","definition","getMainDefinition","errorLink","onError","graphQLErrors","networkError","message","path","response","JSON","alert","authLink","setContext","Authorization","link","connectToDevTools","ssrMode","ApolloLink","cache","createApolloClient"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n  split,\n  NormalizedCacheObject,\n  ApolloLink\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport jwtDecode from \"jwt-decode\";\nimport fetch from \"isomorphic-unfetch\";\nimport Router from \"next/router\";\nimport Head from \"next/head\";\nimport { getAccessToken, setAccessToken } from \"./token\";\nimport isBrowser from \"./isBrowser\";\n\nexport function withApollo(PageComponent: any) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }: any) => {\n    const client = apolloClient || initApolloClient(apolloState);\n    return <PageComponent {...pageProps} apolloClient={client} />;\n  };\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // Find correct display name\n    const displayName =\n      PageComponent.displayName || PageComponent.name || \"Component\";\n\n    // Warn if old way of installing apollo is used\n    if (displayName === \"App\") {\n      console.warn(\"This withApollo HOC only works with PageComponents.\");\n    }\n\n    // Set correct display name for devtools\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (!isBrowser || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (context: any) => {\n      const {\n        AppTree,\n        ctx: { res }\n      } = context;\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = (context.ctx.apolloClient = initApolloClient({}));\n\n      const pageProps = PageComponent.getInitialProps\n        ? await PageComponent.getInitialProps(context)\n        : {};\n\n      // Only on the server\n      if (!isBrowser) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (res && res.finished) {\n          return {};\n        }\n\n        if (!isBrowser) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import(\"@apollo/react-ssr\");\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n                apolloClient={apolloClient}\n              />\n            );\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error(\"Error while running `getDataFromTree`\", error);\n          }\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...pageProps,\n        apolloState\n      };\n    };\n  }\n\n  return WithApollo;\n}\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!isBrowser) {\n  (global as any).fetch = fetch;\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n * @param  {Object} config\n */\nfunction createApolloClient(initialState: any = {}) {\n  const httpLink = createHttpLink({\n    uri: process.env.BACKEND_API_PATH\n  });\n\n  const wsLink = isBrowser\n    ? new WebSocketLink({\n        uri: `${process.env.BACKEND_WS_PATH}`,\n        options: {\n          reconnect: true\n        }\n      })\n    : null;\n\n  const refreshLink = new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: () => {\n      const token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        const { exp } = jwtDecode(token);\n        if (Date.now() >= exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch {\n        return false;\n      }\n    },\n    fetchAccessToken: () => {\n      const token = getAccessToken();\n\n      return fetch(`${process.env.BACKEND_API_PATH}/refresh_token`, {\n        method: \"POST\",\n        headers: {\n          Authentication: `Bearer ${token}`\n        }\n      });\n    },\n    handleFetch: accessToken => {\n      setAccessToken(accessToken);\n    },\n    handleError: err => {\n      console.error(err);\n      Router.replace(\"/login\");\n    }\n  });\n\n  const splitLink = isBrowser\n    ? split(\n        ({ query }) => {\n          const definition = getMainDefinition(query);\n          return (\n            definition.kind === \"OperationDefinition\" &&\n            definition.operation === \"subscription\"\n          );\n        },\n        wsLink as any,\n        httpLink\n      )\n    : httpLink;\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors)\n      graphQLErrors.map(({ message, path }) => {\n        console.log(`[GraphQL error] Query: ${path}, ${message}`);\n        const response = JSON.parse(message);\n        if (isBrowser && response.status === 401) {\n          Router.replace(\"/login\");\n        }\n      });\n    if (networkError) {\n      console.log(`[Network error]: ${networkError}`);\n      if (isBrowser) {\n        alert(\"서버 점검 중입니다.\");\n        Router.replace(\"/login\");\n      }\n    }\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    console.log(`isBrowser: ${isBrowser}`);\n    const token = getAccessToken();\n    return {\n      headers: {\n        ...headers,\n        Authorization: `Bearer ${token}`\n      }\n    };\n  });\n\n  const link = [authLink, errorLink, splitLink];\n\n  if (isBrowser) {\n    link.push(refreshLink);\n  }\n\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\n    //link: errorLink.concat(authLink.concat(isBrowser ? httpLink : splitLink)),\n    link: ApolloLink.from(link),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}\n\n// export function initializeApollo(initialState: any, options: Options) {\n//   // Make sure to create a new client for every server-side request so that data\n//   // isn't shared between connections (which would be bad)\n//   if (!isBrowser) {\n//     return createApolloClient(initialState, options);\n//   }\n\n//   // Reuse client on the client-side\n//   if (!apolloClient) {\n//     apolloClient = createApolloClient(initialState, options);\n//   }\n\n//   return apolloClient;\n// }\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n */\nfunction initApolloClient(initialState: any) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!isBrowser) {\n    return createApolloClient(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    // setAccessToken(cookie.parse(document.cookie).test);\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n"]},"metadata":{},"sourceType":"module"}