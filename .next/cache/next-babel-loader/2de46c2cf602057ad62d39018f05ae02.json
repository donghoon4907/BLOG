{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useCallback } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\nimport { useVssDispatch, SET_LOGIN_MODAL, SET_ME } from \"../../context\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\n\nconst SignInContainer = () => {\n  const dispatch = useVssDispatch();\n  const [me, {\n    data\n  }] = useLazyQuery(meQuery);\n  const [login, {\n    loading\n  }] = useMutation(logInMutation);\n  const email = useInput(\"\");\n  const pwd = useInput(\"\");\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n\n    if (loading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    try {\n      const {\n        data: {\n          logIn\n        }\n      } = await login({\n        variables: {\n          email: email.value,\n          pwd: pwd.value\n        }\n      });\n\n      if (logIn) {\n        setAccessToken(logIn);\n        dispatch({\n          type: SET_LOGIN_MODAL,\n          payload: false\n        });\n        me();\n      }\n    } catch (error) {\n      const {\n        message\n      } = JSON.parse(error.message);\n      alert(message);\n    }\n  }, [email.value, pwd.value, loading]);\n  useEffect(() => {\n    if (data && data.getMyProfile) {\n      const {\n        id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      } = data.getMyProfile;\n      dispatch({\n        type: SET_ME,\n        id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  }, [data && data.getMyProfile]);\n  return __jsx(SignInPresenter, {\n    loading: loading,\n    email: email,\n    pwd: pwd,\n    onSubmit: handleSubmit\n  });\n};\n\nexport default SignInContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/auth/SignInContainer.tsx"],"names":["React","useEffect","useCallback","useMutation","useLazyQuery","useInput","logInMutation","SignInPresenter","setAccessToken","useVssDispatch","SET_LOGIN_MODAL","SET_ME","meQuery","SignInContainer","dispatch","me","data","login","loading","email","pwd","handleSubmit","e","preventDefault","alert","logIn","variables","value","type","payload","error","message","JSON","parse","getMyProfile","id","nickname","avatar","isMaster"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAA6D,OAA7D;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,MAA1C,QAAwD,eAAxD;AACA,SAASC,OAAT,QAAwB,6BAAxB;;AAEA,MAAMC,eAAmB,GAAG,MAAM;AAChC,QAAMC,QAAQ,GAAGL,cAAc,EAA/B;AACA,QAAM,CAACM,EAAD,EAAK;AAAEC,IAAAA;AAAF,GAAL,IAAiBZ,YAAY,CAACQ,OAAD,CAAnC;AACA,QAAM,CAACK,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAuBf,WAAW,CAACG,aAAD,CAAxC;AAEA,QAAMa,KAAK,GAAGd,QAAQ,CAAC,EAAD,CAAtB;AACA,QAAMe,GAAG,GAAGf,QAAQ,CAAC,EAAD,CAApB;AAEA,QAAMgB,YAAY,GAAGnB,WAAW,CAC9B,MAAOoB,CAAP,IAAyC;AACvCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIL,OAAJ,EAAa;AACX,aAAOM,KAAK,CAAC,sBAAD,CAAZ;AACD;;AACD,QAAI;AACF,YAAM;AACJR,QAAAA,IAAI,EAAE;AAAES,UAAAA;AAAF;AADF,UAEF,MAAMR,KAAK,CAAC;AACdS,QAAAA,SAAS,EAAE;AAAEP,UAAAA,KAAK,EAAEA,KAAK,CAACQ,KAAf;AAAsBP,UAAAA,GAAG,EAAEA,GAAG,CAACO;AAA/B;AADG,OAAD,CAFf;;AAKA,UAAIF,KAAJ,EAAW;AACTjB,QAAAA,cAAc,CAACiB,KAAD,CAAd;AACAX,QAAAA,QAAQ,CAAC;AACPc,UAAAA,IAAI,EAAElB,eADC;AAEPmB,UAAAA,OAAO,EAAE;AAFF,SAAD,CAAR;AAIAd,QAAAA,EAAE;AACH;AACF,KAdD,CAcE,OAAOe,KAAP,EAAc;AACd,YAAM;AAAEC,QAAAA;AAAF,UAAcC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACC,OAAjB,CAApB;AACAP,MAAAA,KAAK,CAACO,OAAD,CAAL;AACD;AACF,GAxB6B,EAyB9B,CAACZ,KAAK,CAACQ,KAAP,EAAcP,GAAG,CAACO,KAAlB,EAAyBT,OAAzB,CAzB8B,CAAhC;AA4BAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,IAAI,IAAIA,IAAI,CAACkB,YAAjB,EAA+B;AAC7B,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA,QAAN;AAAgBjB,QAAAA,KAAhB;AAAuBkB,QAAAA,MAAvB;AAA+BC,QAAAA;AAA/B,UAA4CtB,IAAI,CAACkB,YAAvD;AACApB,MAAAA,QAAQ,CAAC;AACPc,QAAAA,IAAI,EAAEjB,MADC;AAEPwB,QAAAA,EAFO;AAGPC,QAAAA,QAHO;AAIPjB,QAAAA,KAJO;AAKPkB,QAAAA,MALO;AAMPC,QAAAA;AANO,OAAD,CAAR;AAQD;AACF,GAZQ,EAYN,CAACtB,IAAI,IAAIA,IAAI,CAACkB,YAAd,CAZM,CAAT;AAcA,SACE,MAAC,eAAD;AACE,IAAA,OAAO,EAAEhB,OADX;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,GAAG,EAAEC,GAHP;AAIE,IAAA,QAAQ,EAAEC;AAJZ,IADF;AAQD,CA1DD;;AA4DA,eAAeR,eAAf","sourcesContent":["import React, { useEffect, useCallback, FormEvent, FC } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { useInput } from \"../../hooks\";\nimport { logInMutation } from \"../../graphql/auth/mutation/login\";\nimport SignInPresenter from \"./SignInPresenter\";\nimport { setAccessToken } from \"../../lib/token\";\nimport { useVssDispatch, SET_LOGIN_MODAL, SET_ME } from \"../../context\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\n\nconst SignInContainer: FC = () => {\n  const dispatch = useVssDispatch();\n  const [me, { data }] = useLazyQuery(meQuery);\n  const [login, { loading }] = useMutation(logInMutation);\n\n  const email = useInput(\"\");\n  const pwd = useInput(\"\");\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (loading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n      try {\n        const {\n          data: { logIn }\n        } = await login({\n          variables: { email: email.value, pwd: pwd.value }\n        });\n        if (logIn) {\n          setAccessToken(logIn);\n          dispatch({\n            type: SET_LOGIN_MODAL,\n            payload: false\n          });\n          me();\n        }\n      } catch (error) {\n        const { message } = JSON.parse(error.message);\n        alert(message);\n      }\n    },\n    [email.value, pwd.value, loading]\n  );\n\n  useEffect(() => {\n    if (data && data.getMyProfile) {\n      const { id, nickname, email, avatar, isMaster } = data.getMyProfile;\n      dispatch({\n        type: SET_ME,\n        id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  }, [data && data.getMyProfile]);\n\n  return (\n    <SignInPresenter\n      loading={loading}\n      email={email}\n      pwd={pwd}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SignInContainer;\n"]},"metadata":{},"sourceType":"module"}