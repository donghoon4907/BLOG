{"ast":null,"code":"var __jsx = React.createElement;\nimport Head from \"next/head\";\nimport React from \"react\";\nimport Header from \"./Header\";\n\nvar Layout = function Layout(_ref) {\n  var children = _ref.children,\n      _ref$title = _ref.title,\n      title = _ref$title === void 0 ? \"VSS\" : _ref$title;\n  return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"meta\", {\n    charSet: \"UTF-8\",\n    name: \"format-detection\",\n    content: \"telephone=no\"\n  }), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"initial-scale=1.0, width=device-width, user-scalable=no\"\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"Video sharing system\"\n  }), __jsx(\"meta\", {\n    name: \"google\",\n    content: \"notranslate\"\n  }), __jsx(\"meta\", {\n    httpEquiv: \"X-UA-Compatible\",\n    content: \"ie=edge\"\n  }), __jsx(\"title\", null, title)), title !== \"로그인\" && __jsx(Header, null), children);\n};\n\n_c2 = Layout;\n_c = Layout;\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c2;\n\n$RefreshReg$(_c2, \"Layout\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/common/Layout.tsx"],"names":["Layout","children","title"],"mappings":";AAAA,OAAA,IAAA,MAAA,WAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,MAAA,MAAA,UAAA;;AAMA,IAAMA,MAAiB,GAAG,SAApBA,MAAoB,CAAA,IAAA,EAAA;AAAA,MAAGC,QAAH,GAAA,IAAA,CAAA,QAAA;AAAA,MAAA,UAAA,GAAA,IAAA,CAAA,KAAA;AAAA,MAAaC,KAAb,GAAA,UAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,UAAA;AAAA,SACxB,KAAA,CAAA,KAAA,EAAA,IAAA,EACE,KAAA,CAAA,IAAA,EAAA,IAAA,EACE,KAAA,CAAA,MAAA,EAAA;AAAM,IAAA,OAAO,EAAb,OAAA;AAAsB,IAAA,IAAI,EAA1B,kBAAA;AAA8C,IAAA,OAAO,EAAC;AAAtD,GAAA,CADF,EAEE,KAAA,CAAA,MAAA,EAAA;AACE,IAAA,IAAI,EADN,UAAA;AAEE,IAAA,OAAO,EAAC;AAFV,GAAA,CAFF,EAME,KAAA,CAAA,MAAA,EAAA;AAAM,IAAA,IAAI,EAAV,aAAA;AAAyB,IAAA,OAAO,EAAC;AAAjC,GAAA,CANF,EAOE,KAAA,CAAA,MAAA,EAAA;AAAM,IAAA,IAAI,EAAV,QAAA;AAAoB,IAAA,OAAO,EAAC;AAA5B,GAAA,CAPF,EAQE,KAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAf,iBAAA;AAAkC,IAAA,OAAO,EAAC;AAA1C,GAAA,CARF,EASE,KAAA,CAAA,OAAA,EAAA,IAAA,EAVJ,KAUI,CATF,CADF,EAaGA,KAAK,KAALA,KAAAA,IAAmB,KAAA,CAAA,MAAA,EAbtB,IAasB,CAbtB,EADwB,QACxB,CADwB;AAA1B,CAAA;;MAAMF,M;KAAAA,M;AAmBN,eAAA,MAAA","sourcesContent":["import Head from \"next/head\";\nimport React, { FC } from \"react\";\nimport Header from \"./Header\";\n\ntype Props = {\n  title?: string;\n};\n\nconst Layout: FC<Props> = ({ children, title = \"VSS\" }) => (\n  <div>\n    <Head>\n      <meta charSet=\"UTF-8\" name=\"format-detection\" content=\"telephone=no\" />\n      <meta\n        name=\"viewport\"\n        content=\"initial-scale=1.0, width=device-width, user-scalable=no\"\n      />\n      <meta name=\"description\" content=\"Video sharing system\" />\n      <meta name=\"google\" content=\"notranslate\" />\n      <meta httpEquiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n      <title>{title}</title>\n    </Head>\n\n    {title !== \"로그인\" && <Header />}\n    {children}\n  </div>\n);\n\nexport default Layout;\n"]},"metadata":{},"sourceType":"module"}