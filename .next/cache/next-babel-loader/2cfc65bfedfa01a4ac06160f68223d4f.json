{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport Layout from \"../components/common/Layout\";\nimport Feed from \"../components/feed/FeedContainer\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { feedQuery } from \"../graphql/page/query/feed\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { getAccessToken } from \"../lib/token\";\nimport { useVssDispatch, SET_ME } from \"../context\";\n\nconst Index = () => {\n  const dispatch = useVssDispatch();\n  const [me] = useLazyQuery(meQuery, {\n    onCompleted: ({\n      getMyProfile\n    }) => {\n      dispatch({\n        type: SET_ME,\n        id: getMyProfile.id,\n        nickname: getMyProfile.nickname,\n        email: getMyProfile.email,\n        avatar: getMyProfile.avatar,\n        isMaster: getMyProfile.isMaster\n      });\n    }\n  });\n  useEffect(() => {\n    const token = getAccessToken();\n\n    if (token) {\n      me();\n    }\n  }, []);\n  return __jsx(Layout, null, __jsx(Feed, null));\n};\n\nexport const getStaticProps = async () => {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: feedQuery,\n    variables: {\n      first: 10\n    }\n  });\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    },\n    revalidate: 1\n  };\n};\nexport default Index;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/index.tsx"],"names":["React","useEffect","useLazyQuery","Layout","Feed","initializeApollo","feedQuery","meQuery","getAccessToken","useVssDispatch","SET_ME","Index","dispatch","me","onCompleted","getMyProfile","type","id","nickname","email","avatar","isMaster","token","getStaticProps","apolloClient","query","variables","first","props","initialApolloState","cache","extract","revalidate"],"mappings":";AAAA,OAAOA,KAAP,IAAoBC,SAApB,QAAqC,OAArC;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,IAAP,MAAiB,kCAAjB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,YAAvC;;AAEA,MAAMC,KAAS,GAAG,MAAM;AACtB,QAAMC,QAAQ,GAAGH,cAAc,EAA/B;AACA,QAAM,CAACI,EAAD,IAAOX,YAAY,CAACK,OAAD,EAAU;AACjCO,IAAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAsB;AACjCH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEN,MADC;AAEPO,QAAAA,EAAE,EAAEF,YAAY,CAACE,EAFV;AAGPC,QAAAA,QAAQ,EAAEH,YAAY,CAACG,QAHhB;AAIPC,QAAAA,KAAK,EAAEJ,YAAY,CAACI,KAJb;AAKPC,QAAAA,MAAM,EAAEL,YAAY,CAACK,MALd;AAMPC,QAAAA,QAAQ,EAAEN,YAAY,CAACM;AANhB,OAAD,CAAR;AAQD;AAVgC,GAAV,CAAzB;AAaApB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,KAAK,GAAGd,cAAc,EAA5B;;AACA,QAAIc,KAAJ,EAAW;AACTT,MAAAA,EAAE;AACH;AACF,GALQ,EAKN,EALM,CAAT;AAOA,SACE,MAAC,MAAD,QACE,MAAC,IAAD,OADF,CADF;AAKD,CA3BD;;AA6BA,OAAO,MAAMU,cAA8B,GAAG,YAAY;AACxD,QAAMC,YAAY,GAAGnB,gBAAgB,EAArC;AACA,QAAMmB,YAAY,CAACC,KAAb,CAAmB;AACvBA,IAAAA,KAAK,EAAEnB,SADgB;AAEvBoB,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AADE;AAFY,GAAnB,CAAN;AAOA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLC,MAAAA,kBAAkB,EAAEL,YAAY,CAACM,KAAb,CAAmBC,OAAnB;AADf,KADF;AAILC,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD,CAfM;AAiBP,eAAerB,KAAf","sourcesContent":["import React, { FC, useEffect } from \"react\";\nimport { GetStaticProps } from \"next\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport Layout from \"../components/common/Layout\";\nimport Feed from \"../components/feed/FeedContainer\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { feedQuery } from \"../graphql/page/query/feed\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { getAccessToken } from \"../lib/token\";\nimport { useVssDispatch, SET_ME } from \"../context\";\n\nconst Index: FC = () => {\n  const dispatch = useVssDispatch();\n  const [me] = useLazyQuery(meQuery, {\n    onCompleted: ({ getMyProfile }) => {\n      dispatch({\n        type: SET_ME,\n        id: getMyProfile.id,\n        nickname: getMyProfile.nickname,\n        email: getMyProfile.email,\n        avatar: getMyProfile.avatar,\n        isMaster: getMyProfile.isMaster\n      });\n    }\n  });\n\n  useEffect(() => {\n    const token = getAccessToken();\n    if (token) {\n      me();\n    }\n  }, []);\n\n  return (\n    <Layout>\n      <Feed />\n    </Layout>\n  );\n};\n\nexport const getStaticProps: GetStaticProps = async () => {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: feedQuery,\n    variables: {\n      first: 10\n    }\n  });\n\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    },\n    revalidate: 1\n  };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}