{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport axios from \"axios\";\nimport { addPostMutation } from \"../../graphql/post/mutation/add\";\nimport { updatePostMutation } from \"../../graphql/post/mutation/update\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport SetPostPresenter from \"./SetPostPresenter\";\nimport { useVssState, useVssDispatch, HIDE_POST_MODAL } from \"../../context\";\n\nconst SetPostContainer = () => {\n  const {\n    activePost\n  } = useVssState();\n  const dispatch = useVssDispatch();\n  const {\n    0: header,\n    1: setHeader\n  } = useState(\"영상 업로드\");\n  const fileEl = useRef(null);\n  const {\n    0: title,\n    1: setTitle\n  } = useState(\"\");\n  const {\n    0: description,\n    1: setDescription\n  } = useState(\"\");\n  const {\n    0: status,\n    1: setStatus\n  } = useState(\"PUBLIC\");\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(0);\n  const {\n    0: file,\n    1: setFile\n  } = useState(\"\");\n  const [add, {\n    loading: addPostLoading\n  }] = useMutation(addPostMutation);\n  const [update, {\n    loading: updatePostLoading\n  }] = useMutation(updatePostMutation);\n  const [remove, {\n    loading: removePostLoading\n  }] = useMutation(removePostMutation);\n  const handleChangeTitle = useCallback(async e => {\n    setTitle(e.target.value);\n  }, []);\n  const handleChangeDescription = useCallback(async e => {\n    setDescription(e.target.value);\n  }, []);\n  const handleChangeStatus = useCallback(async e => {\n    setStatus(e.target.value);\n  }, []);\n  const handleClickFile = useCallback(() => {\n    const node = fileEl.current;\n\n    if (node) {\n      node.click();\n    }\n  }, []);\n  const handleChangeFile = useCallback(async e => {\n    if (!e.target.value) return; // cancel select file\n\n    const {\n      files\n    } = e.target;\n    const formData = new FormData();\n    formData.append(\"file\", files[0]);\n    const response = await axios.post(`${process.env.BACKEND_API_PATH}/api/upload`, formData, {\n      onUploadProgress: ({\n        lengthComputable,\n        loaded,\n        total\n      }) => {\n        if (lengthComputable) {\n          setProgress(Math.floor(loaded / total * 100));\n        }\n      }\n    });\n\n    if (response.data) {\n      setFile(response.data);\n      setHeader(\"등록\");\n    }\n  }, []);\n  const handleDelete = useCallback(async () => {\n    if (removePostLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n    if (tf) {\n      const {\n        data: {\n          deletePost\n        }\n      } = await remove({\n        variables: {\n          postId: activePost.id\n        }\n      });\n\n      if (deletePost) {\n        alert(\"포스트가 삭제되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [activePost, removePostLoading]);\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n\n    if (addPostLoading || updatePostLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(`입력한 내용으로 ${header}하시겠어요?`);\n\n    if (tf) {\n      try {\n        if (header === \"등록\") {\n          const {\n            data: {\n              addPost\n            }\n          } = await add({\n            variables: {\n              title,\n              description,\n              status,\n              file\n            }\n          });\n\n          if (addPost) {\n            alert(\"포스트가 등록되었습니다.\");\n            location.reload();\n          }\n        } else if (header === \"수정\") {\n          const {\n            data: {\n              updatePost\n            }\n          } = await update({\n            variables: {\n              postId: activePost.id,\n              title,\n              description,\n              status,\n              file\n            }\n          });\n\n          if (updatePost) {\n            alert(\"포스트가 수정되었습니다.\");\n            location.reload();\n          }\n        } else {\n          throw new Error(\"check current header\");\n        }\n      } catch (error) {\n        const {\n          message\n        } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [title, description, status, file, addPostLoading, activePost, updatePostLoading]);\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: HIDE_POST_MODAL,\n      payload: false\n    });\n  }, []);\n  useEffect(() => {\n    if (activePost.title) {\n      setTitle(activePost.title);\n    }\n\n    if (activePost.description) {\n      setDescription(activePost.description);\n    }\n\n    if (activePost.status) {\n      setStatus(activePost.status);\n    }\n\n    if (activePost.id) {\n      setProgress(100);\n      setHeader(\"수정\");\n    }\n\n    if (activePost.url) {\n      setFile(activePost.url);\n    }\n  }, [activePost]);\n  return __jsx(SetPostPresenter, {\n    loading: setPostLoading,\n    header: header,\n    title: title,\n    description: description,\n    status: status,\n    progress: progress,\n    file: file,\n    fileEl: fileEl,\n    onClickFile: handleClickFile,\n    onChangeFile: handleChangeFile,\n    onChangeTitle: handleChangeTitle,\n    onChangeDescription: handleChangeDescription,\n    onChangeStatus: handleChangeStatus,\n    onClose: handleClose,\n    onDelete: handleDelete,\n    onSubmit: handleSubmit\n  });\n};\n\nexport default SetPostContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/modal/SetPostContainer.tsx"],"names":["React","useCallback","useState","useRef","useEffect","useMutation","axios","addPostMutation","updatePostMutation","removePostMutation","SetPostPresenter","useVssState","useVssDispatch","HIDE_POST_MODAL","SetPostContainer","activePost","dispatch","header","setHeader","fileEl","title","setTitle","description","setDescription","status","setStatus","progress","setProgress","file","setFile","add","loading","addPostLoading","update","updatePostLoading","remove","removePostLoading","handleChangeTitle","e","target","value","handleChangeDescription","handleChangeStatus","handleClickFile","node","current","click","handleChangeFile","files","formData","FormData","append","response","post","process","env","BACKEND_API_PATH","onUploadProgress","lengthComputable","loaded","total","Math","floor","data","handleDelete","alert","tf","confirm","deletePost","variables","postId","id","window","location","reload","handleSubmit","preventDefault","addPost","updatePost","Error","error","message","JSON","parse","handleClose","type","payload","url","setPostLoading"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useState,\n  FC,\n  useRef,\n  FormEvent,\n  ChangeEvent,\n  useEffect\n} from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport axios from \"axios\";\nimport { addPostMutation } from \"../../graphql/post/mutation/add\";\nimport { updatePostMutation } from \"../../graphql/post/mutation/update\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport SetPostPresenter from \"./SetPostPresenter\";\nimport { useVssState, useVssDispatch, HIDE_POST_MODAL } from \"../../context\";\n\nconst SetPostContainer: FC = () => {\n  const { activePost } = useVssState();\n  const dispatch = useVssDispatch();\n\n  const [header, setHeader] = useState(\"영상 업로드\");\n\n  const fileEl = useRef<HTMLInputElement>(null);\n\n  const [title, setTitle] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [status, setStatus] = useState<string>(\"PUBLIC\");\n  const [progress, setProgress] = useState<number>(0);\n  const [file, setFile] = useState<string>(\"\");\n\n  const [add, { loading: addPostLoading }] = useMutation(addPostMutation);\n\n  const [update, { loading: updatePostLoading }] = useMutation(\n    updatePostMutation\n  );\n\n  const [remove, { loading: removePostLoading }] = useMutation(\n    removePostMutation\n  );\n\n  const handleChangeTitle = useCallback(\n    async (e: ChangeEvent<HTMLInputElement>) => {\n      setTitle(e.target.value);\n    },\n    []\n  );\n\n  const handleChangeDescription = useCallback(\n    async (e: ChangeEvent<HTMLTextAreaElement>) => {\n      setDescription(e.target.value);\n    },\n    []\n  );\n\n  const handleChangeStatus = useCallback(\n    async (e: ChangeEvent<HTMLSelectElement>) => {\n      setStatus(e.target.value);\n    },\n    []\n  );\n\n  const handleClickFile = useCallback(() => {\n    const node = fileEl.current;\n    if (node) {\n      node.click();\n    }\n  }, []);\n\n  const handleChangeFile = useCallback(async e => {\n    if (!e.target.value) return; // cancel select file\n\n    const { files } = e.target;\n\n    const formData = new FormData();\n    formData.append(\"file\", files[0]);\n\n    const response = await axios.post(\n      `${process.env.BACKEND_API_PATH}/api/upload`,\n      formData,\n      {\n        onUploadProgress: ({ lengthComputable, loaded, total }) => {\n          if (lengthComputable) {\n            setProgress(Math.floor((loaded / total) * 100));\n          }\n        }\n      }\n    );\n    if (response.data) {\n      setFile(response.data);\n      setHeader(\"등록\");\n    }\n  }, []);\n\n  const handleDelete = useCallback(async () => {\n    if (removePostLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n    if (tf) {\n      const {\n        data: { deletePost }\n      } = await remove({\n        variables: {\n          postId: activePost.id\n        }\n      });\n      if (deletePost) {\n        alert(\"포스트가 삭제되었습니다.\");\n        window.location.reload();\n      }\n    }\n  }, [activePost, removePostLoading]);\n\n  const handleSubmit = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (addPostLoading || updatePostLoading) {\n        return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n      }\n\n      const tf = confirm(`입력한 내용으로 ${header}하시겠어요?`);\n\n      if (tf) {\n        try {\n          if (header === \"등록\") {\n            const {\n              data: { addPost }\n            } = await add({\n              variables: {\n                title,\n                description,\n                status,\n                file\n              }\n            });\n            if (addPost) {\n              alert(\"포스트가 등록되었습니다.\");\n              location.reload();\n            }\n          } else if (header === \"수정\") {\n            const {\n              data: { updatePost }\n            } = await update({\n              variables: {\n                postId: activePost.id,\n                title,\n                description,\n                status,\n                file\n              }\n            });\n            if (updatePost) {\n              alert(\"포스트가 수정되었습니다.\");\n              location.reload();\n            }\n          } else {\n            throw new Error(\"check current header\");\n          }\n        } catch (error) {\n          const { message } = JSON.parse(error.message);\n          alert(message);\n        }\n      }\n    },\n    [\n      title,\n      description,\n      status,\n      file,\n      addPostLoading,\n      activePost,\n      updatePostLoading\n    ]\n  );\n\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: HIDE_POST_MODAL,\n      payload: false\n    });\n  }, []);\n\n  useEffect(() => {\n    if (activePost.title) {\n      setTitle(activePost.title);\n    }\n    if (activePost.description) {\n      setDescription(activePost.description);\n    }\n    if (activePost.status) {\n      setStatus(activePost.status);\n    }\n    if (activePost.id) {\n      setProgress(100);\n      setHeader(\"수정\");\n    }\n    if (activePost.url) {\n      setFile(activePost.url);\n    }\n  }, [activePost]);\n\n  return (\n    <SetPostPresenter\n      loading={setPostLoading}\n      header={header}\n      title={title}\n      description={description}\n      status={status}\n      progress={progress}\n      file={file}\n      fileEl={fileEl}\n      onClickFile={handleClickFile}\n      onChangeFile={handleChangeFile}\n      onChangeTitle={handleChangeTitle}\n      onChangeDescription={handleChangeDescription}\n      onChangeStatus={handleChangeStatus}\n      onClose={handleClose}\n      onDelete={handleDelete}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n\nexport default SetPostContainer;\n"]},"metadata":{},"sourceType":"module"}