{"ast":null,"code":"var __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\n\nconst SearchPostContainer = () => {\n  const router = useRouter();\n  const {\n    keyword,\n    orderBy\n  } = router.query;\n  const {\n    data,\n    loading,\n    fetchMore,\n    networkStatus\n  } = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      orderBy,\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  });\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const {\n      scrollHeight,\n      clientHeight,\n      scrollTop\n    } = document.documentElement;\n\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const handleSort = useCallback(nextOrderBy => {\n    router.push(`/search?keyword=${keyword}&orderBy=${nextOrderBy}`);\n  }, []);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [data.getPosts, loading]);\n  return __jsx(SearchPostPresenter, {\n    posts: data.getPosts,\n    orderBy: orderBy,\n    onSort: handleSort\n  });\n};\n\nexport default SearchPostContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/search/SearchPostContainer.tsx"],"names":["useRouter","React","useCallback","useEffect","useQuery","NetworkStatus","SearchPostPresenter","postsQuery","SearchPostContainer","router","keyword","orderBy","query","data","loading","fetchMore","networkStatus","variables","searchKeyword","decodeURIComponent","first","notifyOnNetworkStatusChange","loadingMorePosts","handleScrollFetchMore","scrollHeight","clientHeight","scrollTop","document","documentElement","getPosts","length","skip","handleSort","nextOrderBy","push","window","addEventListener","removeEventListener"],"mappings":";AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAAkD,OAAlD;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,gBAAxC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,MAAMC,mBAAuB,GAAG,MAAM;AACpC,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AAEA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBF,MAAM,CAACG,KAApC;AAEA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,SAAjB;AAA4BC,IAAAA;AAA5B,MAA8CZ,QAAQ,CAACG,UAAD,EAAa;AACvEU,IAAAA,SAAS,EAAE;AACTC,MAAAA,aAAa,EAAEC,kBAAkB,CAACT,OAAD,CADxB;AAETC,MAAAA,OAFS;AAGTS,MAAAA,KAAK,EAAE;AAHE,KAD4D;AAMvEC,IAAAA,2BAA2B,EAAE;AAN0C,GAAb,CAA5D;AASA,QAAMC,gBAAgB,GAAGN,aAAa,KAAKX,aAAa,CAACU,SAAzD;;AAEA,QAAMQ,qBAAqB,GAAG,MAAM;AAClC,QAAIT,OAAJ,EAAa;AACb,UAAM;AAAEU,MAAAA,YAAF;AAAgBC,MAAAA,YAAhB;AAA8BC,MAAAA;AAA9B,QAA4CC,QAAQ,CAACC,eAA3D;;AACA,QAAIf,IAAI,CAACgB,QAAT,EAAmB;AACjB,UAAIH,SAAS,GAAGD,YAAZ,KAA6BD,YAAjC,EAA+C;AAC7C,YAAIX,IAAI,CAACgB,QAAL,CAAcC,MAAd,GAAuB,EAAvB,KAA8B,CAAlC,EAAqC;AACnCf,UAAAA,SAAS,CAAC;AACRE,YAAAA,SAAS,EAAE;AACTc,cAAAA,IAAI,EAAElB,IAAI,CAACgB,QAAL,CAAcC;AADX;AADH,WAAD,CAAT;AAKD;AACF;AACF;AACF,GAdD;;AAgBA,QAAME,UAAU,GAAG9B,WAAW,CAAC+B,WAAW,IAAI;AAC5CxB,IAAAA,MAAM,CAACyB,IAAP,CAAa,mBAAkBxB,OAAQ,YAAWuB,WAAY,EAA9D;AACD,GAF6B,EAE3B,EAF2B,CAA9B;AAIA9B,EAAAA,SAAS,CAAC,MAAM;AACdgC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCb,qBAAlC;AACA,WAAO,MAAMY,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCd,qBAArC,CAAb;AACD,GAHQ,EAGN,CAACV,IAAI,CAACgB,QAAN,EAAgBf,OAAhB,CAHM,CAAT;AAKA,SACE,MAAC,mBAAD;AACE,IAAA,KAAK,EAAED,IAAI,CAACgB,QADd;AAEE,IAAA,OAAO,EAAElB,OAFX;AAGE,IAAA,MAAM,EAAEqB;AAHV,IADF;AAOD,CAhDD;;AAkDA,eAAexB,mBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport React, { useCallback, useEffect, FC } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\n\nconst SearchPostContainer: FC = () => {\n  const router = useRouter();\n\n  const { keyword, orderBy } = router.query as any;\n\n  const { data, loading, fetchMore, networkStatus } = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      orderBy,\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  });\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const handleSort = useCallback(nextOrderBy => {\n    router.push(`/search?keyword=${keyword}&orderBy=${nextOrderBy}`);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [data.getPosts, loading]);\n\n  return (\n    <SearchPostPresenter\n      posts={data.getPosts}\n      orderBy={orderBy}\n      onSort={handleSort}\n    />\n  );\n};\n\nexport default SearchPostContainer;\n"]},"metadata":{},"sourceType":"module"}