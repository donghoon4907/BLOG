{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport FeedPresenter from \"./FeedPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport { noticesQuery } from \"../../graphql/notice/query\";\nimport { useVssState, useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\n\nvar FeedContainer = function FeedContainer() {\n  _s();\n\n  var _useVssState = useVssState(),\n      isMaster = _useVssState.isMaster,\n      isShowNoticeModal = _useVssState.isShowNoticeModal,\n      isShowAddPostModal = _useVssState.isShowAddPostModal,\n      isShowLoginModal = _useVssState.isShowLoginModal;\n\n  var dispatch = useVssDispatch();\n  var recommandUserEl = useRef(null);\n\n  var _useState = useState({\n    action: \"wait\",\n    actionText: \"비활성화\",\n    title: \"\",\n    description: \"\",\n    noticeId: \"\"\n  }),\n      notice = _useState[0],\n      setNotice = _useState[1];\n\n  var _useQuery = useQuery(postsQuery, {\n    variables: {\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      posts = _useQuery.data,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var _useQuery2 = useQuery(noticesQuery, {\n    variables: {\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      notices = _useQuery2.data;\n\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var handleScrollFetchMore = function handleScrollFetchMore() {\n    if (loading) return;\n    var _document$documentEle = document.documentElement,\n        scrollHeight = _document$documentEle.scrollHeight,\n        clientHeight = _document$documentEle.clientHeight,\n        scrollTop = _document$documentEle.scrollTop;\n\n    if (posts && posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  var handleAddNotice = useCallback(function () {\n    setNotice({\n      action: \"add\",\n      actionText: \"등록\",\n      title: \"\",\n      description: \"\",\n      noticeId: \"\"\n    });\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: true\n    });\n  }, []);\n  var handleShowNotice = useCallback(function (title, description, noticeId) {\n    setNotice({\n      action: isMaster ? \"modifiable\" : \"readonly\",\n      actionText: \"\",\n      title: title,\n      description: description,\n      noticeId: noticeId\n    });\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: true\n    });\n  }, [isMaster]);\n  useEffect(function () {\n    if (!isShowNoticeModal) {\n      setNotice({\n        action: \"wait\",\n        actionText: \"비활성화\",\n        title: \"\",\n        description: \"\",\n        noticeId: \"\"\n      });\n    }\n  }, [isShowNoticeModal]);\n  useEffect(function () {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return function () {\n      return window.removeEventListener(\"scroll\", handleScrollFetchMore);\n    };\n  }, [posts && posts.getPosts, loading]);\n  return __jsx(FeedPresenter, {\n    loading: loading,\n    loadingMorePosts: loadingMorePosts,\n    posts: posts.getPosts,\n    notices: notices.getNotices,\n    isMaster: isMaster,\n    notice: notice,\n    isShowNoticeModal: isShowNoticeModal,\n    isShowAddPostModal: isShowAddPostModal,\n    isShowLoginModal: isShowLoginModal,\n    onShowNotice: handleShowNotice,\n    onAddNotice: handleAddNotice,\n    recommandUserEl: recommandUserEl\n  });\n};\n\n_s(FeedContainer, \"6x5iX9aW9KX4Nlp4D73QPyToRm4=\", false, function () {\n  return [useVssState, useVssDispatch, useQuery, useQuery];\n});\n\n_c = FeedContainer;\nexport default FeedContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/feed/FeedContainer.tsx"],"names":["React","useState","useCallback","useEffect","useRef","useQuery","NetworkStatus","FeedPresenter","postsQuery","noticesQuery","useVssState","useVssDispatch","SET_NOTICE_MODAL","FeedContainer","isMaster","isShowNoticeModal","isShowAddPostModal","isShowLoginModal","dispatch","recommandUserEl","action","actionText","title","description","noticeId","notice","setNotice","variables","first","notifyOnNetworkStatusChange","posts","data","loading","fetchMore","networkStatus","notices","loadingMorePosts","handleScrollFetchMore","document","documentElement","scrollHeight","clientHeight","scrollTop","getPosts","length","skip","handleAddNotice","type","payload","handleShowNotice","window","addEventListener","removeEventListener","getNotices"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useRef, FC } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport FeedPresenter from \"./FeedPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport { noticesQuery } from \"../../graphql/notice/query\";\nimport { useVssState, useVssDispatch, SET_NOTICE_MODAL } from \"../../context\";\n\nexport type NoticeProps = {\n  action: string;\n  actionText: string;\n  title: string;\n  description: string;\n  noticeId: string;\n};\n\nconst FeedContainer: FC = () => {\n  const {\n    isMaster,\n    isShowNoticeModal,\n    isShowAddPostModal,\n    isShowLoginModal\n  } = useVssState();\n  const dispatch = useVssDispatch();\n  const recommandUserEl = useRef(null);\n  const [notice, setNotice] = useState<NoticeProps>({\n    action: \"wait\",\n    actionText: \"비활성화\",\n    title: \"\",\n    description: \"\",\n    noticeId: \"\"\n  });\n\n  const { data: posts, loading, fetchMore, networkStatus } = useQuery(\n    postsQuery,\n    {\n      variables: {\n        first: 10\n      },\n      notifyOnNetworkStatusChange: true\n    }\n  );\n\n  const { data: notices } = useQuery(noticesQuery, {\n    variables: {\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  });\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const handleScrollFetchMore = () => {\n    if (loading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (posts && posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const handleAddNotice = useCallback(() => {\n    setNotice({\n      action: \"add\",\n      actionText: \"등록\",\n      title: \"\",\n      description: \"\",\n      noticeId: \"\"\n    });\n    dispatch({\n      type: SET_NOTICE_MODAL,\n      payload: true\n    });\n  }, []);\n\n  const handleShowNotice = useCallback(\n    (title, description, noticeId) => {\n      setNotice({\n        action: isMaster ? \"modifiable\" : \"readonly\",\n        actionText: \"\",\n        title,\n        description,\n        noticeId\n      });\n      dispatch({\n        type: SET_NOTICE_MODAL,\n        payload: true\n      });\n    },\n    [isMaster]\n  );\n\n  useEffect(() => {\n    if (!isShowNoticeModal) {\n      setNotice({\n        action: \"wait\",\n        actionText: \"비활성화\",\n        title: \"\",\n        description: \"\",\n        noticeId: \"\"\n      });\n    }\n  }, [isShowNoticeModal]);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [posts && posts.getPosts, loading]);\n\n  return (\n    <FeedPresenter\n      loading={loading}\n      loadingMorePosts={loadingMorePosts}\n      posts={posts.getPosts}\n      notices={notices.getNotices}\n      isMaster={isMaster}\n      notice={notice}\n      isShowNoticeModal={isShowNoticeModal}\n      isShowAddPostModal={isShowAddPostModal}\n      isShowLoginModal={isShowLoginModal}\n      onShowNotice={handleShowNotice}\n      onAddNotice={handleAddNotice}\n      recommandUserEl={recommandUserEl}\n    />\n  );\n};\n\nexport default FeedContainer;\n"]},"metadata":{},"sourceType":"module"}