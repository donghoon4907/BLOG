{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport Layout from \"../components/common/Layout\";\nimport Feed from \"../components/feed/FeedContainer\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { feedQuery } from \"../graphql/page/query/feed\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\n\nvar Index = function Index() {\n  var dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    ssr: false,\n    onCompleted: function onCompleted(_ref) {\n      var getMyProfile = _ref.getMyProfile;\n      var id = getMyProfile.id,\n          nickname = getMyProfile.nickname,\n          email = getMyProfile.email,\n          avatar = getMyProfile.avatar,\n          isMaster = getMyProfile.isMaster;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname: nickname,\n        email: email,\n        avatar: avatar,\n        isMaster: isMaster\n      });\n    }\n  });\n  return __jsx(Layout, null, __jsx(Feed, null));\n};\n\nIndex.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var apolloClient;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          apolloClient = initializeApollo();\n          _context.next = 3;\n          return apolloClient.query({\n            query: feedQuery,\n            variables: {\n              first: 10\n            }\n          });\n\n        case 3:\n          return _context.abrupt(\"return\", {\n            initialApolloState: apolloClient.cache.extract()\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})); // export const getStaticProps: GetStaticProps = async () => {\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: feedQuery,\n//     variables: {\n//       first: 10\n//     }\n//   });\n//   return {\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     },\n//     revalidate: 1\n//   };\n// };\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}