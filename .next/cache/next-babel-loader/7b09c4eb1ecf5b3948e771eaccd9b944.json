{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport Layout from \"../components/common/Layout\";\nimport isAuthenticated from \"../lib/isAuthenticated\";\n\nconst Search = () => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  useEffect(() => {\n    isAuthenticated();\n    setLoading(false);\n  }, []);\n\n  if (loading) {\n    return __jsx(Fragment, null);\n  }\n\n  return __jsx(Layout, null, \"TEST\");\n};\n\nSearch.getInitialProps = async (_ref) => {\n  let {\n    apolloClient\n  } = _ref,\n      ctx = _objectWithoutProperties(_ref, [\"apolloClient\"]);\n\n  console.log(ctx.query);\n  console.log(apolloClient);\n  return {};\n};\n\nexport default Search;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search.tsx"],"names":["React","useEffect","useState","Fragment","Layout","isAuthenticated","Search","loading","setLoading","getInitialProps","apolloClient","ctx","console","log","query"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,QAArC,QAAqD,OAArD;AAEA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,eAAP,MAA4B,wBAA5B;;AAGA,MAAMC,MAAgB,GAAG,MAAM;AAC7B,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBN,QAAQ,CAAC,IAAD,CAAtC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,eAAe;AACfG,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,MAAID,OAAJ,EAAa;AACX,WAAO,MAAC,QAAD,OAAP;AACD;;AAED,SAAO,MAAC,MAAD,eAAP;AACD,CAZD;;AAaAD,MAAM,CAACG,eAAP,GAAyB,gBAAmD;AAAA,MAA5C;AAAEC,IAAAA;AAAF,GAA4C;AAAA,MAAzBC,GAAyB;;AAC1EC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,KAAhB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACA,SAAO,EAAP;AACD,CAJD;;AAMA,eAAeJ,MAAf","sourcesContent":["import React, { useEffect, useState, Fragment } from \"react\";\nimport { NextPage } from \"next\";\nimport Layout from \"../components/common/Layout\";\nimport isAuthenticated from \"../lib/isAuthenticated\";\nimport { ApolloContext } from \"../interfaces/apollo\";\n\nconst Search: NextPage = () => {\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    isAuthenticated();\n    setLoading(false);\n  }, []);\n\n  if (loading) {\n    return <Fragment />;\n  }\n\n  return <Layout>TEST</Layout>;\n};\nSearch.getInitialProps = async ({ apolloClient, ...ctx }: ApolloContext) => {\n  console.log(ctx.query);\n  console.log(apolloClient);\n  return {};\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}