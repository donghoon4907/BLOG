{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\"; // import { user } from \"../graphql/page/query/search\";\n\nimport { usersQuery } from \"../graphql/user/query\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nimport Layout from \"../components/common/Layout\";\nimport Section from \"../components/common/Section\";\nimport isBrowser from \"../lib/isBrowser\";\n\nconst Search = test => {\n  console.log(test);\n  const dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    skip: !isBrowser,\n    onCompleted: ({\n      getMyProfile\n    }) => {\n      const {\n        id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n  return __jsx(Layout, {\n    title: \"\\uAC80\\uC0C9\\uACB0\\uACFC\"\n  }, __jsx(Section, null));\n};\n\nSearch.getInitialProps = async context => {\n  const {\n    keyword\n  } = context.query;\n  const apolloClient = initializeApollo();\n  const {\n    data: {\n      getUsers\n    }\n  } = await apolloClient.query({\n    query: usersQuery,\n    variables: {\n      first: 3,\n      keyword\n    }\n  });\n  console.log(getUsers);\n  return {\n    props: {\n      initialApolloState: apolloClient.cache\n    }\n  };\n};\n\nexport default Search;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search.tsx"],"names":["React","useQuery","initializeApollo","usersQuery","meQuery","useVssDispatch","SET_ME","Layout","Section","isBrowser","Search","test","console","log","dispatch","skip","onCompleted","getMyProfile","id","nickname","email","avatar","isMaster","type","userId","getInitialProps","context","keyword","query","apolloClient","data","getUsers","variables","first","props","initialApolloState","cache"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,eAAjC,C,CACA;;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,YAAvC;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AAGA,OAAOC,SAAP,MAAsB,kBAAtB;;AAEA,MAAMC,MAAgB,GAAGC,IAAI,IAAI;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,QAAMG,QAAQ,GAAGT,cAAc,EAA/B;AACAJ,EAAAA,QAAQ,CAACG,OAAD,EAAU;AAChBW,IAAAA,IAAI,EAAE,CAACN,SADS;AAEhBO,IAAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAsB;AACjC,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA,QAAN;AAAgBC,QAAAA,KAAhB;AAAuBC,QAAAA,MAAvB;AAA+BC,QAAAA;AAA/B,UAA4CL,YAAlD;AACAH,MAAAA,QAAQ,CAAC;AACPS,QAAAA,IAAI,EAAEjB,MADC;AAEPkB,QAAAA,MAAM,EAAEN,EAFD;AAGPC,QAAAA,QAHO;AAIPC,QAAAA,KAJO;AAKPC,QAAAA,MALO;AAMPC,QAAAA;AANO,OAAD,CAAR;AAQD;AAZe,GAAV,CAAR;AAcA,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC;AAAd,KACE,MAAC,OAAD,OADF,CADF;AAQD,CAzBD;;AA2BAZ,MAAM,CAACe,eAAP,GAAyB,MAAMC,OAAN,IAAiB;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAcD,OAAO,CAACE,KAA5B;AACA,QAAMC,YAAY,GAAG3B,gBAAgB,EAArC;AACA,QAAM;AACJ4B,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF;AADF,MAEF,MAAMF,YAAY,CAACD,KAAb,CAAmB;AAC3BA,IAAAA,KAAK,EAAEzB,UADoB;AAE3B6B,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE,CADE;AAETN,MAAAA;AAFS;AAFgB,GAAnB,CAFV;AASAf,EAAAA,OAAO,CAACC,GAAR,CAAYkB,QAAZ;AACA,SAAO;AACLG,IAAAA,KAAK,EAAE;AACLC,MAAAA,kBAAkB,EAAEN,YAAY,CAACO;AAD5B;AADF,GAAP;AAKD,CAlBD;;AAoBA,eAAe1B,MAAf","sourcesContent":["import React from \"react\";\nimport { NextPage } from \"next\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\n// import { user } from \"../graphql/page/query/search\";\nimport { usersQuery } from \"../graphql/user/query\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nimport Layout from \"../components/common/Layout\";\nimport Section from \"../components/common/Section\";\nimport SearchUser from \"../components/search/SearchUserContainer\";\nimport SearchPost from \"../components/search/SearchPostContainer\";\nimport isBrowser from \"../lib/isBrowser\";\n\nconst Search: NextPage = test => {\n  console.log(test);\n  const dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    skip: !isBrowser,\n    onCompleted: ({ getMyProfile }) => {\n      const { id, nickname, email, avatar, isMaster } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n  return (\n    <Layout title=\"검색결과\">\n      <Section>\n        {/* <SearchUser /> */}\n        {/* <SearchPost /> */}\n      </Section>\n    </Layout>\n  );\n};\n\nSearch.getInitialProps = async context => {\n  const { keyword } = context.query;\n  const apolloClient = initializeApollo();\n  const {\n    data: { getUsers }\n  } = await apolloClient.query({\n    query: usersQuery,\n    variables: {\n      first: 3,\n      keyword\n    }\n  });\n  console.log(getUsers);\n  return {\n    props: {\n      initialApolloState: apolloClient.cache\n    }\n  };\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}