{"ast":null,"code":"var __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport React, { useCallback, useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport axios from \"axios\";\nimport { addPostMutation } from \"../../graphql/post/mutation/add\";\nimport { updatePostMutation } from \"../../graphql/post/mutation/update\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport SetPostPresenter from \"./SetPostPresenter\";\nimport { useVssState, useVssDispatch, HIDE_POST_MODAL } from \"../../context\";\n\nconst SetPostContainer = () => {\n  const router = useRouter();\n  const {\n    activePost\n  } = useVssState();\n  const dispatch = useVssDispatch();\n  const {\n    0: header,\n    1: setHeader\n  } = useState(\"영상 업로드\");\n  const fileEl = useRef(null);\n  const {\n    0: title,\n    1: setTitle\n  } = useState(\"\");\n  const {\n    0: description,\n    1: setDescription\n  } = useState(\"\");\n  const {\n    0: status,\n    1: setStatus\n  } = useState(\"PUBLIC\");\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(0);\n  const {\n    0: file,\n    1: setFile\n  } = useState(\"\");\n  const [add, {\n    loading: addPostLoading\n  }] = useMutation(addPostMutation);\n  const [update, {\n    loading: updatePostLoading\n  }] = useMutation(updatePostMutation);\n  const [remove, {\n    loading: removePostLoading\n  }] = useMutation(removePostMutation);\n  const handleChangeTitle = useCallback(async e => {\n    setTitle(e.target.value);\n  }, []);\n  const handleChangeDescription = useCallback(async e => {\n    setDescription(e.target.value);\n  }, []);\n  const handleChangeStatus = useCallback(async e => {\n    setStatus(e.target.value);\n  }, []);\n  const handleClickFile = useCallback(() => {\n    const node = fileEl.current;\n\n    if (node) {\n      node.click();\n    }\n  }, []);\n  const handleChangeFile = useCallback(async e => {\n    if (!e.target.value) return; // cancel select file\n\n    const {\n      files\n    } = e.target;\n    const formData = new FormData();\n    formData.append(\"file\", files[0]);\n    const response = await axios.post(`${process.env.BACKEND_API_PATH}/api/upload`, formData, {\n      onUploadProgress: ({\n        lengthComputable,\n        loaded,\n        total\n      }) => {\n        if (lengthComputable) {\n          setProgress(Math.floor(loaded / total * 100));\n        }\n      }\n    });\n\n    if (response.data) {\n      setFile(response.data);\n      setHeader(\"등록\");\n    }\n  }, []);\n  const handleDelete = useCallback(async () => {\n    if (removePostLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n    if (tf) {\n      const {\n        data: {\n          deletePost\n        }\n      } = await remove({\n        variables: {\n          postId: activePost.postId\n        }\n      });\n\n      if (deletePost) {\n        alert(\"포스트가 삭제되었습니다.\");\n      }\n    }\n  }, [activePost, removePostLoading]);\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n\n    if (addPostLoading || updatePostLoading) {\n      return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(`입력한 내용으로 ${header}하시겠어요?`);\n\n    if (tf) {\n      try {\n        if (header === \"등록\") {\n          const {\n            data: {\n              addPost\n            }\n          } = await add({\n            variables: {\n              title,\n              description,\n              status,\n              file\n            }\n          });\n\n          if (addPost) {\n            alert(\"포스트가 등록되었습니다.\");\n            router.reload();\n          }\n        } else if (header === \"수정\") {\n          const {\n            data: {\n              updatePost\n            }\n          } = await update({\n            variables: {\n              postId: activePost.postId,\n              title,\n              description,\n              status,\n              file\n            }\n          });\n\n          if (updatePost) {\n            alert(\"포스트가 수정되었습니다.\");\n            router.replace(\"/\", \"/\", {\n              shallow: true\n            });\n          }\n        } else {\n          throw new Error(\"check current header\");\n        }\n      } catch (error) {\n        const {\n          message\n        } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [title, description, status, file, addPostLoading, activePost, updatePostLoading]);\n  const handleClose = useCallback(() => {\n    dispatch({\n      type: HIDE_POST_MODAL\n    });\n  }, []);\n  useEffect(() => {\n    if (activePost.title) {\n      setTitle(activePost.title);\n    }\n\n    if (activePost.description) {\n      setDescription(activePost.description);\n    }\n\n    if (activePost.status) {\n      setStatus(activePost.status);\n    }\n\n    if (activePost.postId) {\n      setProgress(100);\n      setHeader(\"수정\");\n    }\n\n    if (activePost.url) {\n      setFile(activePost.url);\n    }\n  }, [activePost]);\n  return __jsx(SetPostPresenter, {\n    addPostLoading: addPostLoading,\n    updatePostLoading: updatePostLoading,\n    removePostLoading: removePostLoading,\n    header: header,\n    title: title,\n    description: description,\n    status: status,\n    progress: progress,\n    file: file,\n    fileEl: fileEl,\n    onClickFile: handleClickFile,\n    onChangeFile: handleChangeFile,\n    onChangeTitle: handleChangeTitle,\n    onChangeDescription: handleChangeDescription,\n    onChangeStatus: handleChangeStatus,\n    onClose: handleClose,\n    onDelete: handleDelete,\n    onSubmit: handleSubmit\n  });\n};\n\nexport default SetPostContainer;","map":null,"metadata":{},"sourceType":"module"}