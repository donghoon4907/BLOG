{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport Router from \"next/router\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport Loader from \"../common/Loader\";\n\nvar SearchPostContainer = function SearchPostContainer() {\n  _s();\n\n  var keyword = Router.query.keyword || \"\";\n  var orderBy = Router.query.orderBy || \"createdAt_DESC\";\n  console.log(keyword);\n\n  var _useQuery = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      orderBy: orderBy,\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      posts = _useQuery.data,\n      loadPostLoading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore;\n\n  var handleSort = useCallback(function (nextOrderBy) {\n    Router.push(\"/search?keyword=\".concat(keyword, \"&orderBy=\").concat(nextOrderBy));\n  }, []);\n\n  var handleScrollFetchMore = function handleScrollFetchMore() {\n    if (loadPostLoading) return;\n    var _document$documentEle = document.documentElement,\n        scrollHeight = _document$documentEle.scrollHeight,\n        clientHeight = _document$documentEle.clientHeight,\n        scrollTop = _document$documentEle.scrollTop;\n\n    if (posts && posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            },\n            updateQuery: function updateQuery(prev, _ref) {\n              var fetchMoreResult = _ref.fetchMoreResult;\n              if (!fetchMoreResult) return prev;\n\n              if (fetchMoreResult.getPosts.length === 0) {\n                window.removeEventListener(\"scroll\", handleScrollFetchMore);\n              }\n\n              return Object.assign({}, prev, {\n                getPosts: [].concat(_toConsumableArray(prev.getPosts), _toConsumableArray(fetchMoreResult.getPosts))\n              });\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return function () {\n      return window.removeEventListener(\"scroll\", handleScrollFetchMore);\n    };\n  }, [posts && posts.getPosts, loadPostLoading]);\n\n  if (loadPostLoading && !posts) {\n    return __jsx(Loader, null);\n  }\n\n  return __jsx(SearchPostPresenter, {\n    posts: posts,\n    loading: loadPostLoading,\n    orderBy: orderBy,\n    onSort: handleSort\n  });\n};\n\n_s(SearchPostContainer, \"K8x1NxayNqtPXe1S5sK2WP4Zcg0=\", false, function () {\n  return [useQuery];\n});\n\n_c = SearchPostContainer;\nexport default SearchPostContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchPostContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/search/SearchPostContainer.tsx"],"names":["Router","React","useCallback","useEffect","useQuery","SearchPostPresenter","postsQuery","Loader","SearchPostContainer","keyword","query","orderBy","console","log","variables","searchKeyword","decodeURIComponent","first","notifyOnNetworkStatusChange","posts","data","loadPostLoading","loading","fetchMore","handleSort","nextOrderBy","push","handleScrollFetchMore","document","documentElement","scrollHeight","clientHeight","scrollTop","getPosts","length","skip","updateQuery","prev","fetchMoreResult","window","removeEventListener","Object","assign","addEventListener"],"mappings":"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","sourcesContent":["import Router from \"next/router\";\nimport React, { useCallback, useEffect, FC } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport Loader from \"../common/Loader\";\n\nconst SearchPostContainer: FC = () => {\n  const keyword = (Router.query.keyword || \"\") as string;\n  const orderBy = (Router.query.orderBy || \"createdAt_DESC\") as string;\n  console.log(keyword);\n\n  const { data: posts, loading: loadPostLoading, fetchMore } = useQuery(\n    postsQuery,\n    {\n      variables: {\n        searchKeyword: decodeURIComponent(keyword),\n        orderBy,\n        first: 10\n      },\n      notifyOnNetworkStatusChange: true\n    }\n  );\n\n  const handleSort = useCallback(nextOrderBy => {\n    Router.push(`/search?keyword=${keyword}&orderBy=${nextOrderBy}`);\n  }, []);\n\n  const handleScrollFetchMore = () => {\n    if (loadPostLoading) return;\n    const { scrollHeight, clientHeight, scrollTop } = document.documentElement;\n    if (posts && posts.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (posts.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: posts.getPosts.length\n            },\n            updateQuery: (\n              prev,\n              { fetchMoreResult }: { fetchMoreResult?: any }\n            ) => {\n              if (!fetchMoreResult) return prev;\n\n              if (fetchMoreResult.getPosts.length === 0) {\n                window.removeEventListener(\"scroll\", handleScrollFetchMore);\n              }\n\n              return Object.assign({}, prev, {\n                getPosts: [...prev.getPosts, ...fetchMoreResult.getPosts]\n              });\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return () => window.removeEventListener(\"scroll\", handleScrollFetchMore);\n  }, [posts && posts.getPosts, loadPostLoading]);\n\n  if (loadPostLoading && !posts) {\n    return <Loader />;\n  }\n\n  return (\n    <SearchPostPresenter\n      posts={posts}\n      loading={loadPostLoading}\n      orderBy={orderBy}\n      onSort={handleSort}\n    />\n  );\n};\n\nexport default SearchPostContainer;\n"]},"metadata":{},"sourceType":"module"}