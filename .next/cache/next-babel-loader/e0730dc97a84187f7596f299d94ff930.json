{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: \", \"px;\\n  height: \", \"px;\\n  border: \", \";\\n  border-radius: 50%;\\n  overflow: hidden;\\n  cursor: pointer;\\n  position: relative;\\n\\n  & img {\\n    position: absolute;\\n    width: 100%;\\n    height: 100%;\\n  }\\n\\n  & #dropdown-custom-2 {\\n    opacity: 0;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nvar Container = styled.div(_templateObject(), function (props) {\n  return props.size;\n}, function (props) {\n  return props.size;\n}, function (props) {\n  return props.theme.boxBorder;\n});\n_c = Container;\n\nvar Avatar = function Avatar(_ref) {\n  var size = _ref.size,\n      src = _ref.src,\n      onClick = _ref.onClick,\n      children = _ref.children;\n  return __jsx(Container, {\n    onClick: onClick,\n    size: size\n  }, __jsx(\"img\", {\n    src: src,\n    alt: \"avatar\"\n  }), children);\n};\n\n_c3 = Avatar;\n_c2 = Avatar;\nexport default Avatar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Avatar\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c3;\n\n$RefreshReg$(_c3, \"Avatar\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/common/Avatar.tsx"],"names":["Container","styled","props","Avatar","size","src","onClick","children"],"mappings":";;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,MAAA,MAAA,mBAAA;AAMA,IAAMA,SAAS,GAAGC,MAAM,CAAT,GAAGA,CAAH,eAAA,EAAGA,EACP,UAAA,KAAA,EAAK;AAAA,SAAIC,KAAK,CAAT,IAAA;AADD,CAAGD,EAEN,UAAA,KAAA,EAAK;AAAA,SAAIC,KAAK,CAAT,IAAA;AAFF,CAAGD,EAGN,UAAA,KAAA,EAAK;AAAA,SAAIC,KAAK,CAALA,KAAAA,CAAJ,SAAA;AAHjB,CAAkBD,CAAlB;KAAMD,S;;AA0BN,IAAMG,MAAiB,GAAG,SAApBA,MAAoB,CAAA,IAAA,EAAA;AAAA,MAAGC,IAAH,GAAA,IAAA,CAAA,IAAA;AAAA,MAASC,GAAT,GAAA,IAAA,CAAA,GAAA;AAAA,MAAcC,OAAd,GAAA,IAAA,CAAA,OAAA;AAAA,MAAuBC,QAAvB,GAAA,IAAA,CAAA,QAAA;AAAA,SACxB,KAAA,CAAA,SAAA,EAAA;AAAW,IAAA,OAAO,EAAlB,OAAA;AAA6B,IAAA,IAAI,EAAEH;AAAnC,GAAA,EACE,KAAA,CAAA,KAAA,EAAA;AAAK,IAAA,GAAG,EAAR,GAAA;AAAe,IAAA,GAAG,EAAC;AAAnB,GAAA,CADF,EADwB,QACxB,CADwB;AAA1B,CAAA;;MAAMD,M;MAAAA,M;AAON,eAAA,MAAA","sourcesContent":["import React, { FC, MouseEvent, ReactNode } from \"react\";\nimport styled from \"styled-components\";\n\ninterface AvatarContainer {\n  size: number | string;\n}\n\nconst Container = styled.div<AvatarContainer>`\n  width: ${props => props.size}px;\n  height: ${props => props.size}px;\n  border: ${props => props.theme.boxBorder};\n  border-radius: 50%;\n  overflow: hidden;\n  cursor: pointer;\n  position: relative;\n\n  & img {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n\n  & #dropdown-custom-2 {\n    opacity: 0;\n  }\n`;\n\ninterface Props extends AvatarContainer {\n  src: string;\n  onClick?: (event: MouseEvent<HTMLDivElement>) => void;\n  children?: ReactNode;\n}\n\nconst Avatar: FC<Props> = ({ size, src, onClick, children }) => (\n  <Container onClick={onClick} size={size}>\n    <img src={src} alt=\"avatar\" />\n    {children}\n  </Container>\n);\n\nexport default Avatar;\n"]},"metadata":{},"sourceType":"module"}