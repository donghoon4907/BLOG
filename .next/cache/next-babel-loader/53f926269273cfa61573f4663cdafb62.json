{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport Router from \"next/router\";\nimport { useMutation } from \"@apollo/client\";\nimport PostPresenter from \"./PostPresenter\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport { likeMutation } from \"../../graphql/post/mutation/like\";\n\nconst PostContainer = ({\n  id,\n  title,\n  description,\n  createdAt,\n  user,\n  video,\n  isLiked,\n  likeCount,\n  isMyPost,\n  status,\n  room\n}) => {\n  const {\n    0: ctrlIsLiked,\n    1: setCtrlIsLiked\n  } = useState(isLiked);\n  const {\n    0: ctrlLikeCount,\n    1: setCtrlLikeCount\n  } = useState(likeCount);\n  const [like, {\n    loading: likeLoading\n  }] = useMutation(likeMutation);\n  const [remove, {\n    loading: removeLoading\n  }] = useMutation(removePostMutation); // 포스트 채팅방 접근 이벤트\n\n  const handleRoom = useCallback(() => {\n    Router.push(`/room/${room.id}`);\n  }, []); // 좋아요 / 좋아요 취소 이벤트\n\n  const handleLike = useCallback(async () => {\n    if (likeLoading) {\n      return alert(\"요청중입니다. 잠시만 기다려주세요.\");\n    }\n\n    setCtrlIsLiked(!ctrlIsLiked);\n    setCtrlLikeCount(ctrlIsLiked ? ctrlLikeCount - 1 : ctrlLikeCount + 1);\n\n    try {\n      await like({\n        variables: {\n          postId: id\n        }\n      });\n    } catch (error) {\n      const {\n        message\n      } = JSON.parse(error.message);\n      alert(message);\n    }\n  }, [ctrlIsLiked, ctrlLikeCount, likeLoading]); // 삭제 이벤트\n\n  const handleDelete = useCallback(async () => {\n    if (removeLoading) {\n      return alert(\"요청중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n    if (tf) {\n      try {\n        const {\n          data: {\n            deletePost\n          }\n        } = await remove({\n          variables: {\n            postId: id\n          }\n        });\n\n        if (deletePost) {\n          alert(\"해당 포스트가 삭제되었습니다.\");\n          window.location.reload();\n        } else {\n          alert(\"포스트 삭제 중 오류가 발생했습니다.\");\n        }\n      } catch (error) {\n        const {\n          message\n        } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [removeLoading]);\n  return __jsx(PostPresenter, {\n    id: id,\n    title: title,\n    description: description,\n    status: status,\n    createdAt: createdAt,\n    user: user,\n    video: video,\n    isLiked: ctrlIsLiked,\n    likeCount: ctrlLikeCount,\n    isMyPost: isMyPost,\n    onClickLike: handleLike,\n    onClickRoom: handleRoom,\n    onClickDelete: handleDelete\n  });\n};\n\nexport default PostContainer;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/post/PostContainer.tsx"],"names":["React","useState","useCallback","Router","useMutation","PostPresenter","removePostMutation","likeMutation","PostContainer","id","title","description","createdAt","user","video","isLiked","likeCount","isMyPost","status","room","ctrlIsLiked","setCtrlIsLiked","ctrlLikeCount","setCtrlLikeCount","like","loading","likeLoading","remove","removeLoading","handleRoom","push","handleLike","alert","variables","postId","error","message","JSON","parse","handleDelete","tf","confirm","data","deletePost","window","location","reload"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, FC } from \"react\";\nimport Router from \"next/router\";\nimport { useMutation } from \"@apollo/client\";\nimport PostPresenter from \"./PostPresenter\";\nimport { removePostMutation } from \"../../graphql/post/mutation/remove\";\nimport { likeMutation } from \"../../graphql/post/mutation/like\";\n\nexport type PostProps = {\n  id: string;\n  title: string;\n  description: string;\n  video: any;\n  user: any;\n  likes: any;\n  createdAt: string;\n  updatedAt: string;\n  status: string;\n  isLiked: boolean;\n  likeCount: number;\n  isMyPost: boolean;\n  room: any;\n};\n\nconst PostContainer: FC<PostProps> = ({\n  id,\n  title,\n  description,\n  createdAt,\n  user,\n  video,\n  isLiked,\n  likeCount,\n  isMyPost,\n  status,\n  room\n}) => {\n  const [ctrlIsLiked, setCtrlIsLiked] = useState(isLiked);\n  const [ctrlLikeCount, setCtrlLikeCount] = useState(likeCount);\n\n  const [like, { loading: likeLoading }] = useMutation(likeMutation);\n  const [remove, { loading: removeLoading }] = useMutation(removePostMutation);\n\n  // 포스트 채팅방 접근 이벤트\n  const handleRoom = useCallback(() => {\n    Router.push(`/room/${room.id}`);\n  }, []);\n\n  // 좋아요 / 좋아요 취소 이벤트\n  const handleLike = useCallback(async () => {\n    if (likeLoading) {\n      return alert(\"요청중입니다. 잠시만 기다려주세요.\");\n    }\n\n    setCtrlIsLiked(!ctrlIsLiked);\n    setCtrlLikeCount(ctrlIsLiked ? ctrlLikeCount - 1 : ctrlLikeCount + 1);\n\n    try {\n      await like({\n        variables: { postId: id }\n      });\n    } catch (error) {\n      const { message } = JSON.parse(error.message);\n      alert(message);\n    }\n  }, [ctrlIsLiked, ctrlLikeCount, likeLoading]);\n\n  // 삭제 이벤트\n  const handleDelete = useCallback(async () => {\n    if (removeLoading) {\n      return alert(\"요청중입니다. 잠시만 기다려주세요.\");\n    }\n\n    const tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n    if (tf) {\n      try {\n        const {\n          data: { deletePost }\n        } = await remove({\n          variables: { postId: id }\n        });\n\n        if (deletePost) {\n          alert(\"해당 포스트가 삭제되었습니다.\");\n          window.location.reload();\n        } else {\n          alert(\"포스트 삭제 중 오류가 발생했습니다.\");\n        }\n      } catch (error) {\n        const { message } = JSON.parse(error.message);\n        alert(message);\n      }\n    }\n  }, [removeLoading]);\n\n  return (\n    <PostPresenter\n      id={id}\n      title={title}\n      description={description}\n      status={status}\n      createdAt={createdAt}\n      user={user}\n      video={video}\n      isLiked={ctrlIsLiked}\n      likeCount={ctrlLikeCount}\n      isMyPost={isMyPost}\n      onClickLike={handleLike}\n      onClickRoom={handleRoom}\n      onClickDelete={handleDelete}\n    />\n  );\n};\n\nexport default PostContainer;\n"]},"metadata":{},"sourceType":"module"}