{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from \"react\";\nimport { ApolloClient, InMemoryCache, createHttpLink, split, ApolloLink } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition, concatPagination } from \"@apollo/client/utilities\";\nimport fetch from \"isomorphic-unfetch\";\nimport isBrowser from \"./isBrowser\";\nimport { getAccessToken } from \"./token\";\nlet apolloClient = null;\n\nif (!isBrowser) {\n  global.fetch = fetch;\n}\n\nfunction createApolloClient() {\n  const httpLink = createHttpLink({\n    uri: process.env.BACKEND_API_PATH\n  });\n  const wsLink = isBrowser ? new WebSocketLink({\n    uri: `${process.env.BACKEND_WS_PATH}`,\n    options: {\n      reconnect: true\n    }\n  }) : null;\n  const splitLink = isBrowser ? split(({\n    query\n  }) => {\n    const definition = getMainDefinition(query);\n    return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n  }, wsLink, httpLink) : httpLink;\n  const errorLink = onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    if (graphQLErrors) graphQLErrors.map(({\n      message,\n      path\n    }) => {\n      console.log(`[GraphQL error] Query: ${path}, ${message}`);\n    });\n\n    if (networkError) {\n      console.log(`[Network error]: ${networkError}`);\n    }\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    const token = getAccessToken();\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        Authorization: `Bearer ${token}`\n      })\n    };\n  });\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    link: ApolloLink.from([errorLink, authLink, isBrowser ? httpLink : splitLink]),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            getPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient || createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract(); // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (!isBrowser) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":null,"metadata":{},"sourceType":"module"}