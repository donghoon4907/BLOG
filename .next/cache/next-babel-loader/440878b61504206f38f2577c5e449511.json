{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport React, { useEffect } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport SearchPostPresenter from \"./SearchPostPresenter\";\nimport { postsQuery } from \"../../graphql/post/query\";\n\nvar SearchPostContainer = function SearchPostContainer() {\n  var router = useRouter();\n\n  var _ref = router.query.keyword,\n      _ref2 = _slicedToArray(_ref, 2),\n      keyword = _ref2[0],\n      _ref2$ = _ref2[1],\n      sort = _ref2$ === void 0 ? \"createdAt_DESC\" : _ref2$;\n\n  var _useQuery = useQuery(postsQuery, {\n    variables: {\n      searchKeyword: decodeURIComponent(keyword),\n      sort: sort,\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var handleScrollFetchMore = function handleScrollFetchMore() {\n    if (loading) return;\n    var _document$documentEle = document.documentElement,\n        scrollHeight = _document$documentEle.scrollHeight,\n        clientHeight = _document$documentEle.clientHeight,\n        scrollTop = _document$documentEle.scrollTop;\n\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length,\n              searchKeyword: decodeURIComponent(keyword),\n              sort: sort\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return function () {\n      return window.removeEventListener(\"scroll\", handleScrollFetchMore);\n    };\n  }, [data.getPosts, loading, keyword, sort]);\n  return __jsx(SearchPostPresenter, {\n    loading: loading,\n    loadingMorePosts: loadingMorePosts,\n    posts: data.getPosts,\n    keyword: keyword\n  });\n};\n\nexport default SearchPostContainer;","map":null,"metadata":{},"sourceType":"module"}