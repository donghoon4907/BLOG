{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/idonghun/Desktop/vss/frontend/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport Layout from \"../components/common/Layout\";\nimport Feed from \"../components/feed/FeedContainer\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { feedQuery } from \"../graphql/page/query/feed\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\n\nvar Index = function Index() {\n  _s();\n\n  var dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    ssr: false,\n    onCompleted: function onCompleted(_ref) {\n      var getMyProfile = _ref.getMyProfile;\n      var id = getMyProfile.id,\n          nickname = getMyProfile.nickname,\n          email = getMyProfile.email,\n          avatar = getMyProfile.avatar,\n          isMaster = getMyProfile.isMaster;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname: nickname,\n        email: email,\n        avatar: avatar,\n        isMaster: isMaster\n      });\n    }\n  });\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(Feed, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Index, \"jV7g94KRg7WDCZmKxPP9DnOJQYM=\", false, function () {\n  return [useVssDispatch, useQuery];\n});\n\n_c = Index;\nIndex.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var apolloClient;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          apolloClient = initializeApollo();\n          _context.next = 3;\n          return apolloClient.query({\n            query: feedQuery,\n            variables: {\n              first: 10\n            }\n          });\n\n        case 3:\n          return _context.abrupt(\"return\", {\n            initialApolloState: apolloClient.cache.extract()\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})); // export const getStaticProps: GetStaticProps = async () => {\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: feedQuery,\n//     variables: {\n//       first: 10\n//     }\n//   });\n//   return {\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     },\n//     revalidate: 1\n//   };\n// };\n\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/index.tsx"],"names":["React","useQuery","Layout","Feed","initializeApollo","feedQuery","meQuery","useVssDispatch","SET_ME","Index","dispatch","ssr","onCompleted","getMyProfile","id","nickname","email","avatar","isMaster","type","userId","getInitialProps","apolloClient","query","variables","first","initialApolloState","cache","extract"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,IAAP,MAAiB,kCAAjB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,YAAvC;;AAEA,IAAMC,KAAe,GAAG,SAAlBA,KAAkB,GAAM;AAAA;;AAC5B,MAAMC,QAAQ,GAAGH,cAAc,EAA/B;AACAN,EAAAA,QAAQ,CAACK,OAAD,EAAU;AAChBK,IAAAA,GAAG,EAAE,KADW;AAEhBC,IAAAA,WAAW,EAAE,2BAAsB;AAAA,UAAnBC,YAAmB,QAAnBA,YAAmB;AAAA,UACzBC,EADyB,GACiBD,YADjB,CACzBC,EADyB;AAAA,UACrBC,QADqB,GACiBF,YADjB,CACrBE,QADqB;AAAA,UACXC,KADW,GACiBH,YADjB,CACXG,KADW;AAAA,UACJC,MADI,GACiBJ,YADjB,CACJI,MADI;AAAA,UACIC,QADJ,GACiBL,YADjB,CACIK,QADJ;AAEjCR,MAAAA,QAAQ,CAAC;AACPS,QAAAA,IAAI,EAAEX,MADC;AAEPY,QAAAA,MAAM,EAAEN,EAFD;AAGPC,QAAAA,QAAQ,EAARA,QAHO;AAIPC,QAAAA,KAAK,EAALA,KAJO;AAKPC,QAAAA,MAAM,EAANA,MALO;AAMPC,QAAAA,QAAQ,EAARA;AANO,OAAD,CAAR;AAQD;AAZe,GAAV,CAAR;AAeA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAtBD;;GAAMT,K;UACaF,c,EACjBN,Q;;;KAFIQ,K;AAwBNA,KAAK,CAACY,eAAN,yEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,UAAAA,YADgB,GACDlB,gBAAgB,EADf;AAAA;AAAA,iBAEhBkB,YAAY,CAACC,KAAb,CAAmB;AACvBA,YAAAA,KAAK,EAAElB,SADgB;AAEvBmB,YAAAA,SAAS,EAAE;AACTC,cAAAA,KAAK,EAAE;AADE;AAFY,WAAnB,CAFgB;;AAAA;AAAA,2CASf;AACLC,YAAAA,kBAAkB,EAAEJ,YAAY,CAACK,KAAb,CAAmBC,OAAnB;AADf,WATe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB,G,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAenB,KAAf","sourcesContent":["import React from \"react\";\nimport { GetStaticProps, NextPage } from \"next\";\nimport { useQuery } from \"@apollo/client\";\nimport Layout from \"../components/common/Layout\";\nimport Feed from \"../components/feed/FeedContainer\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { feedQuery } from \"../graphql/page/query/feed\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { useVssDispatch, SET_ME } from \"../context\";\n\nconst Index: NextPage = () => {\n  const dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    ssr: false,\n    onCompleted: ({ getMyProfile }) => {\n      const { id, nickname, email, avatar, isMaster } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n\n  return (\n    <Layout>\n      <Feed />\n    </Layout>\n  );\n};\n\nIndex.getInitialProps = async () => {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: feedQuery,\n    variables: {\n      first: 10\n    }\n  });\n\n  return {\n    initialApolloState: apolloClient.cache.extract()\n  };\n};\n\n// export const getStaticProps: GetStaticProps = async () => {\n//   const apolloClient = initializeApollo();\n//   await apolloClient.query({\n//     query: feedQuery,\n//     variables: {\n//       first: 10\n//     }\n//   });\n\n//   return {\n//     props: {\n//       initialApolloState: apolloClient.cache.extract()\n//     },\n//     revalidate: 1\n//   };\n// };\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}