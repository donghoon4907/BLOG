{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useEffect, memo } from \"react\";\nimport { useQuery, NetworkStatus } from \"@apollo/client\";\nimport { postsQuery } from \"../../graphql/post/query\";\nimport PostContainer from \"../post/PostContainer\";\nimport Loader from \"../common/Loader\";\n\nvar PostList = function PostList() {\n  var _useQuery = useQuery(postsQuery, {\n    variables: {\n      first: 10\n    },\n    notifyOnNetworkStatusChange: true\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var handleScrollFetchMore = function handleScrollFetchMore() {\n    if (loading) return;\n    var _document$documentEle = document.documentElement,\n        scrollHeight = _document$documentEle.scrollHeight,\n        clientHeight = _document$documentEle.clientHeight,\n        scrollTop = _document$documentEle.scrollTop;\n\n    if (data.getPosts) {\n      if (scrollTop + clientHeight === scrollHeight) {\n        if (data.getPosts.length % 10 === 0) {\n          fetchMore({\n            variables: {\n              skip: data.getPosts.length\n            }\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", handleScrollFetchMore);\n    return function () {\n      return window.removeEventListener(\"scroll\", handleScrollFetchMore);\n    };\n  }, [data.getPosts, loading]);\n  return __jsx(React.Fragment, null, loading && loadingMorePosts && __jsx(Loader, null), data.getPosts.map(function (post) {\n    return __jsx(PostContainer, _extends({\n      key: post.id\n    }, post));\n  }));\n};\n\nexport default memo(PostList);","map":null,"metadata":{},"sourceType":"module"}