{"ast":null,"code":"var _jsxFileName = \"/Users/idonghun/Desktop/vss/frontend/pages/search.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { postsQuery } from \"../graphql/post/query\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nimport Layout from \"../components/common/Layout\";\nimport Section from \"../components/common/Section\";\nimport SearchPost from \"../components/search/SearchPostContainer\";\nimport Subject from \"../components/common/Subject\";\nimport SearchBar from \"../components/search/SearchBar\";\nimport SearchTag from \"../components/search/SearchTag\";\n\nconst Search = () => {\n  const router = useRouter();\n  const dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    onCompleted: ({\n      getMyProfile\n    }) => {\n      const {\n        id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n  return __jsx(Layout, {\n    title: \"\\uAC80\\uC0C9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, __jsx(Section, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, __jsx(SearchBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }), __jsx(SearchTag, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }), __jsx(Subject, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"\\\"\", router.query.keyword, \"\\\"\\uC758 \\uAC80\\uC0C9\\uACB0\\uACFC\"), __jsx(SearchPost, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  })));\n};\n\nSearch.getInitialProps = async context => {\n  console.log(context);\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: postsQuery,\n    variables: {\n      first: 10\n    }\n  });\n  return {\n    initialApolloState: apolloClient.cache.extract()\n  };\n};\n\nexport default Search;","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/search.tsx"],"names":["React","useRouter","useQuery","initializeApollo","meQuery","postsQuery","useVssDispatch","SET_ME","Layout","Section","SearchPost","Subject","SearchBar","SearchTag","Search","router","dispatch","onCompleted","getMyProfile","id","nickname","email","avatar","isMaster","type","userId","query","keyword","getInitialProps","context","console","log","apolloClient","variables","first","initialApolloState","cache","extract"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,YAAvC;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,UAAP,MAAuB,0CAAvB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,SAAP,MAAsB,gCAAtB;;AAEA,MAAMC,MAAgB,GAAG,MAAM;AAC7B,QAAMC,MAAM,GAAGd,SAAS,EAAxB;AACA,QAAMe,QAAQ,GAAGV,cAAc,EAA/B;AACAJ,EAAAA,QAAQ,CAACE,OAAD,EAAU;AAChBa,IAAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAsB;AACjC,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA,QAAN;AAAgBC,QAAAA,KAAhB;AAAuBC,QAAAA,MAAvB;AAA+BC,QAAAA;AAA/B,UAA4CL,YAAlD;AACAF,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAEjB,MADC;AAEPkB,QAAAA,MAAM,EAAEN,EAFD;AAGPC,QAAAA,QAHO;AAIPC,QAAAA,KAJO;AAKPC,QAAAA,MALO;AAMPC,QAAAA;AANO,OAAD,CAAR;AAQD;AAXe,GAAV,CAAR;AAaA,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAWR,MAAM,CAACW,KAAP,CAAaC,OAAxB,sCAHF,EAIE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CADF;AAUD,CA1BD;;AA4BAb,MAAM,CAACc,eAAP,GAAyB,MAAMC,OAAN,IAAiB;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,QAAMG,YAAY,GAAG7B,gBAAgB,EAArC;AACA,QAAM6B,YAAY,CAACN,KAAb,CAAmB;AACvBA,IAAAA,KAAK,EAAErB,UADgB;AAEvB4B,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AADE;AAFY,GAAnB,CAAN;AAOA,SAAO;AACLC,IAAAA,kBAAkB,EAAEH,YAAY,CAACI,KAAb,CAAmBC,OAAnB;AADf,GAAP;AAGD,CAbD;;AAeA,eAAevB,MAAf","sourcesContent":["import React from \"react\";\nimport { NextPage } from \"next\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"@apollo/client\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { postsQuery } from \"../graphql/post/query\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nimport Layout from \"../components/common/Layout\";\nimport Section from \"../components/common/Section\";\nimport SearchPost from \"../components/search/SearchPostContainer\";\nimport Subject from \"../components/common/Subject\";\nimport SearchBar from \"../components/search/SearchBar\";\nimport SearchTag from \"../components/search/SearchTag\";\n\nconst Search: NextPage = () => {\n  const router = useRouter();\n  const dispatch = useVssDispatch();\n  useQuery(meQuery, {\n    onCompleted: ({ getMyProfile }) => {\n      const { id, nickname, email, avatar, isMaster } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n  return (\n    <Layout title=\"검색\">\n      <Section>\n        <SearchBar />\n        <SearchTag />\n        <Subject>\"{router.query.keyword}\"의 검색결과</Subject>\n        <SearchPost />\n      </Section>\n    </Layout>\n  );\n};\n\nSearch.getInitialProps = async context => {\n  console.log(context);\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: postsQuery,\n    variables: {\n      first: 10\n    }\n  });\n\n  return {\n    initialApolloState: apolloClient.cache.extract()\n  };\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}