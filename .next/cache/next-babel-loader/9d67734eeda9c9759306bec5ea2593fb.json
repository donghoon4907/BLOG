{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport Layout from \"../components/common/Layout\";\nimport Feed from \"../components/feed/FeedContainer\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { getAccessToken } from \"../lib/token\";\nimport { useVssDispatch, SET_ME } from \"../context\";\n\nvar Index = function Index() {\n  _s();\n\n  var dispatch = useVssDispatch();\n\n  var _useLazyQuery = useLazyQuery(meQuery, {\n    onCompleted: function onCompleted(_ref) {\n      var getMyProfile = _ref.getMyProfile;\n      dispatch({\n        type: SET_ME,\n        id: getMyProfile.id,\n        nickname: getMyProfile.nickname,\n        email: getMyProfile.email,\n        avatar: getMyProfile.avatar,\n        isMaster: getMyProfile.isMaster\n      });\n    }\n  }),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1),\n      me = _useLazyQuery2[0];\n\n  useEffect(function () {\n    var token = getAccessToken();\n\n    if (token) {\n      me();\n    }\n  }, []);\n  return __jsx(Layout, null, __jsx(Feed, null));\n};\n\n_s(Index, \"JM4SkaspVM3tVhXprlUacWegLuI=\", false, function () {\n  return [useVssDispatch, useLazyQuery];\n});\n\n_c = Index;\nexport var __N_SSG = true;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/pages/index.tsx"],"names":["React","useEffect","useLazyQuery","Layout","Feed","meQuery","getAccessToken","useVssDispatch","SET_ME","Index","dispatch","onCompleted","getMyProfile","type","id","nickname","email","avatar","isMaster","me","token"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAoBC,SAApB,QAAqC,OAArC;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,IAAP,MAAiB,kCAAjB;AAGA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,YAAvC;;AAEA,IAAMC,KAAS,GAAG,SAAZA,KAAY,GAAM;AAAA;;AACtB,MAAMC,QAAQ,GAAGH,cAAc,EAA/B;;AADsB,sBAETL,YAAY,CAACG,OAAD,EAAU;AACjCM,IAAAA,WAAW,EAAE,2BAAsB;AAAA,UAAnBC,YAAmB,QAAnBA,YAAmB;AACjCF,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,MADC;AAEPM,QAAAA,EAAE,EAAEF,YAAY,CAACE,EAFV;AAGPC,QAAAA,QAAQ,EAAEH,YAAY,CAACG,QAHhB;AAIPC,QAAAA,KAAK,EAAEJ,YAAY,CAACI,KAJb;AAKPC,QAAAA,MAAM,EAAEL,YAAY,CAACK,MALd;AAMPC,QAAAA,QAAQ,EAAEN,YAAY,CAACM;AANhB,OAAD,CAAR;AAQD;AAVgC,GAAV,CAFH;AAAA;AAAA,MAEfC,EAFe;;AAetBlB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMmB,KAAK,GAAGd,cAAc,EAA5B;;AACA,QAAIc,KAAJ,EAAW;AACTD,MAAAA,EAAE;AACH;AACF,GALQ,EAKN,EALM,CAAT;AAOA,SACE,MAAC,MAAD,QACE,MAAC,IAAD,OADF,CADF;AAKD,CA3BD;;GAAMV,K;UACaF,c,EACJL,Y;;;KAFTO,K;;AA8CN,eAAeA,KAAf","sourcesContent":["import React, { FC, useEffect } from \"react\";\nimport { GetStaticProps } from \"next\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport Layout from \"../components/common/Layout\";\nimport Feed from \"../components/feed/FeedContainer\";\nimport { initializeApollo } from \"../lib/apollo\";\nimport { feedQuery } from \"../graphql/page/query/feed\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { getAccessToken } from \"../lib/token\";\nimport { useVssDispatch, SET_ME } from \"../context\";\n\nconst Index: FC = () => {\n  const dispatch = useVssDispatch();\n  const [me] = useLazyQuery(meQuery, {\n    onCompleted: ({ getMyProfile }) => {\n      dispatch({\n        type: SET_ME,\n        id: getMyProfile.id,\n        nickname: getMyProfile.nickname,\n        email: getMyProfile.email,\n        avatar: getMyProfile.avatar,\n        isMaster: getMyProfile.isMaster\n      });\n    }\n  });\n\n  useEffect(() => {\n    const token = getAccessToken();\n    if (token) {\n      me();\n    }\n  }, []);\n\n  return (\n    <Layout>\n      <Feed />\n    </Layout>\n  );\n};\n\nexport const getStaticProps: GetStaticProps = async () => {\n  const apolloClient = initializeApollo();\n  await apolloClient.query({\n    query: feedQuery,\n    variables: {\n      first: 10\n    }\n  });\n\n  return {\n    props: {\n      initialApolloState: apolloClient.cache.extract()\n    },\n    revalidate: 1\n  };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}