{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { getAccessToken } from \"../lib/token\";\nimport { useVssDispatch, SET_ME } from \"../context\";\nexport default function isAuthenticated() {\n  return _isAuthenticated.apply(this, arguments);\n}\n\nfunction _isAuthenticated() {\n  var _s = $RefreshSig$();\n\n  _isAuthenticated = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var dispatch, _useLazyQuery, _useLazyQuery2, me, token, _yield$me, getMyProfile;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _s();\n\n            dispatch = useVssDispatch();\n            _useLazyQuery = useLazyQuery(meQuery), _useLazyQuery2 = _slicedToArray(_useLazyQuery, 1), me = _useLazyQuery2[0];\n            token = getAccessToken();\n\n            if (!token) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 7;\n            return me();\n\n          case 7:\n            _yield$me = _context.sent;\n            getMyProfile = _yield$me.data.getMyProfile;\n\n            if (getMyProfile) {\n              dispatch({\n                type: SET_ME,\n                id: getMyProfile.id,\n                nickname: getMyProfile.nickname,\n                email: getMyProfile.email,\n                avatar: getMyProfile.avatar,\n                isMaster: getMyProfile.isMaster\n              });\n            }\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }), \"hkG0LDwL9WbiPpkbWaLOHB1AjRU=\", false, function () {\n    return [useVssDispatch, useLazyQuery];\n  }));\n  return _isAuthenticated.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/lib/isAuthenticated.ts"],"names":["useLazyQuery","meQuery","getAccessToken","useVssDispatch","SET_ME","isAuthenticated","dispatch","me","token","getMyProfile","data","type","id","nickname","email","avatar","isMaster"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,YAAvC;AAEA,wBAA8BC,eAA9B;AAAA;AAAA;;;;;iFAAe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACPC,YAAAA,QADO,GACIH,cAAc,EADlB;AAAA,4BAEAH,YAAY,CAACC,OAAD,CAFZ,qDAENM,EAFM;AAGPC,YAAAA,KAHO,GAGCN,cAAc,EAHf;;AAAA,iBAITM,KAJS;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAODD,EAAE,EAPD;;AAAA;AAAA;AAMDE,YAAAA,YANC,aAMTC,IANS,CAMDD,YANC;;AAQX,gBAAIA,YAAJ,EAAkB;AAChBH,cAAAA,QAAQ,CAAC;AACPK,gBAAAA,IAAI,EAAEP,MADC;AAEPQ,gBAAAA,EAAE,EAAEH,YAAY,CAACG,EAFV;AAGPC,gBAAAA,QAAQ,EAAEJ,YAAY,CAACI,QAHhB;AAIPC,gBAAAA,KAAK,EAAEL,YAAY,CAACK,KAJb;AAKPC,gBAAAA,MAAM,EAAEN,YAAY,CAACM,MALd;AAMPC,gBAAAA,QAAQ,EAAEP,YAAY,CAACO;AANhB,eAAD,CAAR;AAQD;;AAjBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;YACIb,c,EACJH,Y","sourcesContent":["import { useLazyQuery } from \"@apollo/client\";\nimport { meQuery } from \"../graphql/auth/query/me\";\nimport { getAccessToken } from \"../lib/token\";\nimport { useVssDispatch, SET_ME } from \"../context\";\n\nexport default async function isAuthenticated() {\n  const dispatch = useVssDispatch();\n  const [me] = useLazyQuery(meQuery);\n  const token = getAccessToken();\n  if (token) {\n    const {\n      data: { getMyProfile }\n    } = await me();\n    if (getMyProfile) {\n      dispatch({\n        type: SET_ME,\n        id: getMyProfile.id,\n        nickname: getMyProfile.nickname,\n        email: getMyProfile.email,\n        avatar: getMyProfile.avatar,\n        isMaster: getMyProfile.isMaster\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}