{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { usersQuery, recommandUsersQuery } from \"../../graphql/user/query\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\nimport SearchUserPresenter from \"./SearchUserPresenter\";\nimport { useVssDispatch, SET_ME } from \"../../context\";\n\nvar SearchUserContainer = function SearchUserContainer() {\n  _s();\n\n  var dispatch = useVssDispatch();\n  var router = useRouter();\n  var keyword = decodeURIComponent(router.query.keyword);\n\n  var _useQuery = useQuery(usersQuery, {\n    variables: {\n      keyword: keyword,\n      first: 10\n    }\n  }),\n      users = _useQuery.data;\n\n  var _useQuery2 = useQuery(recommandUsersQuery),\n      recommandUsers = _useQuery2.data;\n\n  useQuery(meQuery, {\n    ssr: false,\n    onCompleted: function onCompleted(_ref) {\n      var getMyProfile = _ref.getMyProfile;\n      var id = getMyProfile.id,\n          nickname = getMyProfile.nickname,\n          email = getMyProfile.email,\n          avatar = getMyProfile.avatar,\n          isMaster = getMyProfile.isMaster;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname: nickname,\n        email: email,\n        avatar: avatar,\n        isMaster: isMaster\n      });\n    }\n  });\n  return __jsx(SearchUserPresenter, {\n    users: users.getUsers,\n    recommandUsers: recommandUsers.getRecommandUsers,\n    keyword: keyword\n  });\n};\n\n_s(SearchUserContainer, \"j/fOAIrbwrHkZlyz+bqD5qIZvQc=\", false, function () {\n  return [useVssDispatch, useRouter, useQuery, useQuery, useQuery];\n});\n\n_c = SearchUserContainer;\nexport default SearchUserContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchUserContainer\");","map":{"version":3,"sources":["/Users/idonghun/Desktop/vss/frontend/components/search/SearchUserContainer.tsx"],"names":["useRouter","React","useQuery","usersQuery","recommandUsersQuery","meQuery","SearchUserPresenter","useVssDispatch","SET_ME","SearchUserContainer","dispatch","router","keyword","decodeURIComponent","query","variables","first","users","data","recommandUsers","ssr","onCompleted","getMyProfile","id","nickname","email","avatar","isMaster","type","userId","getUsers","getRecommandUsers"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,UAAT,EAAqBC,mBAArB,QAAgD,0BAAhD;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,eAAvC;;AAEA,IAAMC,mBAAuB,GAAG,SAA1BA,mBAA0B,GAAM;AAAA;;AACpC,MAAMC,QAAQ,GAAGH,cAAc,EAA/B;AACA,MAAMI,MAAM,GAAGX,SAAS,EAAxB;AACA,MAAMY,OAAO,GAAGC,kBAAkB,CAACF,MAAM,CAACG,KAAP,CAAaF,OAAd,CAAlC;;AAHoC,kBAKZV,QAAQ,CAACC,UAAD,EAAa;AAC3CY,IAAAA,SAAS,EAAE;AACTH,MAAAA,OAAO,EAAPA,OADS;AAETI,MAAAA,KAAK,EAAE;AAFE;AADgC,GAAb,CALI;AAAA,MAKtBC,KALsB,aAK5BC,IAL4B;;AAAA,mBAYHhB,QAAQ,CAACE,mBAAD,CAZL;AAAA,MAYtBe,cAZsB,cAY5BD,IAZ4B;;AAcpChB,EAAAA,QAAQ,CAACG,OAAD,EAAU;AAChBe,IAAAA,GAAG,EAAE,KADW;AAEhBC,IAAAA,WAAW,EAAE,2BAAsB;AAAA,UAAnBC,YAAmB,QAAnBA,YAAmB;AAAA,UACzBC,EADyB,GACiBD,YADjB,CACzBC,EADyB;AAAA,UACrBC,QADqB,GACiBF,YADjB,CACrBE,QADqB;AAAA,UACXC,KADW,GACiBH,YADjB,CACXG,KADW;AAAA,UACJC,MADI,GACiBJ,YADjB,CACJI,MADI;AAAA,UACIC,QADJ,GACiBL,YADjB,CACIK,QADJ;AAEjCjB,MAAAA,QAAQ,CAAC;AACPkB,QAAAA,IAAI,EAAEpB,MADC;AAEPqB,QAAAA,MAAM,EAAEN,EAFD;AAGPC,QAAAA,QAAQ,EAARA,QAHO;AAIPC,QAAAA,KAAK,EAALA,KAJO;AAKPC,QAAAA,MAAM,EAANA,MALO;AAMPC,QAAAA,QAAQ,EAARA;AANO,OAAD,CAAR;AAQD;AAZe,GAAV,CAAR;AAeA,SACE,MAAC,mBAAD;AACE,IAAA,KAAK,EAAEV,KAAK,CAACa,QADf;AAEE,IAAA,cAAc,EAAEX,cAAc,CAACY,iBAFjC;AAGE,IAAA,OAAO,EAAEnB;AAHX,IADF;AAOD,CApCD;;GAAMH,mB;UACaF,c,EACFP,S,EAGSE,Q,EAOSA,Q,EAEjCA,Q;;;KAdIO,mB;AAsCN,eAAeA,mBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport React, { FC } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { usersQuery, recommandUsersQuery } from \"../../graphql/user/query\";\nimport { meQuery } from \"../../graphql/auth/query/me\";\nimport SearchUserPresenter from \"./SearchUserPresenter\";\nimport { useVssDispatch, SET_ME } from \"../../context\";\n\nconst SearchUserContainer: FC = () => {\n  const dispatch = useVssDispatch();\n  const router = useRouter();\n  const keyword = decodeURIComponent(router.query.keyword as string);\n\n  const { data: users } = useQuery(usersQuery, {\n    variables: {\n      keyword,\n      first: 10\n    }\n  });\n\n  const { data: recommandUsers } = useQuery(recommandUsersQuery);\n\n  useQuery(meQuery, {\n    ssr: false,\n    onCompleted: ({ getMyProfile }) => {\n      const { id, nickname, email, avatar, isMaster } = getMyProfile;\n      dispatch({\n        type: SET_ME,\n        userId: id,\n        nickname,\n        email,\n        avatar,\n        isMaster\n      });\n    }\n  });\n\n  return (\n    <SearchUserPresenter\n      users={users.getUsers}\n      recommandUsers={recommandUsers.getRecommandUsers}\n      keyword={keyword}\n    />\n  );\n};\n\nexport default SearchUserContainer;\n"]},"metadata":{},"sourceType":"module"}